#!/usr/bin/env python3
"""
Teste Completo do Fluxo de Upload com Cria√ß√£o Autom√°tica de Projeto
===============================================================

Este script testa todas as funcionalidades implementadas:
1. Verifica√ß√£o de projetos dispon√≠veis
2. Upload com cria√ß√£o autom√°tica de projeto
3. Upload com projeto existente
4. Valida√ß√£o de erros
"""

import requests
import json
import os
import uuid
from pathlib import Path

# Configura√ß√µes
BASE_URL = "http://127.0.0.1:8000/api"
TEST_USERNAME = f"teste_upload_{uuid.uuid4().hex[:8]}"
TEST_PASSWORD = "teste123456"
TEST_EMAIL = f"{TEST_USERNAME}@teste.com"

def print_header(text):
    """Imprime cabe√ßalho formatado"""
    print(f"\n{'='*60}")
    print(f"  {text}")
    print(f"{'='*60}")

def print_step(step_num, text):
    """Imprime passo do teste"""
    print(f"\nüìã PASSO {step_num}: {text}")

def print_success(text):
    """Imprime mensagem de sucesso"""
    print(f"‚úÖ {text}")

def print_error(text):
    """Imprime mensagem de erro"""
    print(f"‚ùå {text}")

def print_info(text):
    """Imprime informa√ß√£o"""
    print(f"üí° {text}")

def register_test_user():
    """Registra usu√°rio de teste"""
    print_step(1, "Registrando usu√°rio de teste")
    
    try:
        response = requests.post(f"{BASE_URL}/auth/register", json={
            "full_name": f"Teste Upload {TEST_USERNAME}",
            "email": TEST_EMAIL,
            "password": TEST_PASSWORD,
            "username": TEST_USERNAME
        }, timeout=10)
        
        if response.status_code in [200, 201]:
            print_success("Usu√°rio registrado com sucesso")
            return True
        elif response.status_code == 400 and "j√° existe" in response.text:
            print_info("Usu√°rio j√° existe - continuando com login")
            return True
        else:
            print_error(f"Erro ao registrar: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print_error(f"Erro na requisi√ß√£o de registro: {str(e)}")
        return False

def login_test_user():
    """Faz login do usu√°rio de teste"""
    print_step(2, "Fazendo login do usu√°rio")
    
    try:
        response = requests.post(f"{BASE_URL}/auth/login", json={
            "email": TEST_EMAIL,
            "password": TEST_PASSWORD
        }, timeout=10)
        
        if response.status_code == 200:
            token_data = response.json()
            token = token_data.get("access_token")
            if token:
                print_success(f"Login realizado com sucesso")
                return token
            else:
                print_error("Token n√£o encontrado na resposta")
                return None
        else:
            print_error(f"Erro no login: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        print_error(f"Erro na requisi√ß√£o de login: {str(e)}")
        return None

def check_projects(token):
    """Verifica projetos dispon√≠veis"""
    print_step(3, "Verificando projetos dispon√≠veis")
    
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{BASE_URL}/files/check-projects", headers=headers, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print_success(f"Verifica√ß√£o realizada: {data['message']}")
            print_info(f"  - Tem projetos: {data['has_projects']}")
            print_info(f"  - Quantidade: {data['project_count']}")
            print_info(f"  - Pode criar automaticamente: {data['can_auto_create']}")
            return data
        else:
            print_error(f"Erro ao verificar projetos: {response.status_code}")
            return None
            
    except Exception as e:
        print_error(f"Erro na verifica√ß√£o de projetos: {str(e)}")
        return None

def create_test_file():
    """Cria arquivo de teste"""
    print_step(4, "Criando arquivo de teste")
    
    try:
        # Usar arquivo existente se dispon√≠vel
        test_files = ["sample_test.pdf", "test_pipeline.pdf"]
        for test_file in test_files:
            if os.path.exists(test_file):
                print_success(f"Usando arquivo existente: {test_file}")
                return test_file
        
        # Criar arquivo texto simples para teste
        test_content = """Teste de Upload Autom√°tico
        
Este √© um arquivo de teste para verificar o sistema de upload
com cria√ß√£o autom√°tica de projeto.

Funcionalidades testadas:
1. Upload sem projeto existente
2. Cria√ß√£o autom√°tica de projeto
3. Processamento de arquivo
4. Integra√ß√£o completa

Data do teste: {datetime.now()}
Usu√°rio: {TEST_USERNAME}
""".format(datetime=__import__("datetime").datetime, TEST_USERNAME=TEST_USERNAME)
        
        test_file = f"teste_upload_{uuid.uuid4().hex[:8]}.txt"
        with open(test_file, 'w', encoding='utf-8') as f:
            f.write(test_content)
        
        print_success(f"Arquivo de teste criado: {test_file}")
        return test_file
        
    except Exception as e:
        print_error(f"Erro ao criar arquivo de teste: {str(e)}")
        return None

def test_upload_auto_create(token, test_file):
    """Testa upload com cria√ß√£o autom√°tica de projeto"""
    print_step(5, "Testando upload com cria√ß√£o autom√°tica de projeto")
    
    try:
        headers = {"Authorization": f"Bearer {token}"}
        
        with open(test_file, 'rb') as f:
            files = {'file': f}
            data = {
                'auto_create_project': 'true',
                'description': 'Teste de upload com cria√ß√£o autom√°tica'
            }
            
            response = requests.post(
                f"{BASE_URL}/files/upload",
                files=files,
                data=data,
                headers=headers,
                timeout=60  # Timeout maior para processamento
            )
        
        if response.status_code in [200, 201]:
            result = response.json()
            print_success("Upload realizado com sucesso!")
            print_info(f"  - Arquivo ID: {result.get('file_id')}")
            print_info(f"  - Projeto ID: {result.get('project_id')}")
            print_info(f"  - Status: {result.get('status')}")
            
            # Verificar se projeto foi criado
            if result.get('project_created'):
                print_success("‚ú® Projeto criado automaticamente!")
                print_info(f"  - Nome do projeto: {result.get('project_name')}")
            
            return result
        else:
            print_error(f"Erro no upload: {response.status_code}")
            print_error(f"Resposta: {response.text}")
            return None
            
    except Exception as e:
        print_error(f"Erro no upload: {str(e)}")
        return None

def verify_project_creation(token):
    """Verifica se o projeto foi criado"""
    print_step(6, "Verificando se projeto foi criado")
    
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{BASE_URL}/projects/", headers=headers, timeout=10)
        
        if response.status_code == 200:
            projects = response.json()
            if projects:
                print_success(f"‚úÖ {len(projects)} projeto(s) encontrado(s):")
                for project in projects:
                    print_info(f"  - {project.get('name')} (ID: {project.get('id')})")
            else:
                print_error("Nenhum projeto encontrado")
            return projects
        else:
            print_error(f"Erro ao listar projetos: {response.status_code}")
            return None
            
    except Exception as e:
        print_error(f"Erro ao verificar projetos: {str(e)}")
        return None

def cleanup_test_file(test_file):
    """Limpa arquivo de teste"""
    try:
        if test_file and os.path.exists(test_file) and test_file.startswith("teste_upload_"):
            os.remove(test_file)
            print_info(f"Arquivo de teste removido: {test_file}")
    except Exception as e:
        print_error(f"Erro ao remover arquivo: {str(e)}")

def main():
    """Fun√ß√£o principal do teste"""
    print_header("TESTE COMPLETO - UPLOAD COM CRIA√á√ÉO AUTOM√ÅTICA DE PROJETO")
    
    print_info("Este teste verifica todo o fluxo implementado:")
    print_info("1. Registro de usu√°rio")
    print_info("2. Login")
    print_info("3. Verifica√ß√£o de projetos")
    print_info("4. Upload com cria√ß√£o autom√°tica")
    print_info("5. Verifica√ß√£o final")
    
    token = None
    test_file = None
    
    try:
        # Etapa 1: Registro
        if not register_test_user():
            return
        
        # Etapa 2: Login
        token = login_test_user()
        if not token:
            return
        
        # Etapa 3: Verificar projetos
        project_info = check_projects(token)
        if project_info is None:
            return
        
        # Etapa 4: Criar arquivo de teste
        test_file = create_test_file()
        if not test_file:
            return
        
        # Etapa 5: Upload com cria√ß√£o autom√°tica
        upload_result = test_upload_auto_create(token, test_file)
        if not upload_result:
            return
        
        # Etapa 6: Verificar cria√ß√£o do projeto
        projects = verify_project_creation(token)
        
        # Resumo final
        print_header("RESUMO DO TESTE")
        if upload_result and projects:
            print_success("üéâ TESTE CONCLU√çDO COM SUCESSO!")
            print_info("‚úÖ Todas as funcionalidades est√£o funcionando:")
            print_info("  - Verifica√ß√£o de projetos")
            print_info("  - Cria√ß√£o autom√°tica de projeto")
            print_info("  - Upload de arquivos")
            print_info("  - Integra√ß√£o completa")
        else:
            print_error("‚ùå Teste n√£o foi conclu√≠do com sucesso")
        
    except KeyboardInterrupt:
        print_error("\n‚ùå Teste interrompido pelo usu√°rio")
    except Exception as e:
        print_error(f"‚ùå Erro inesperado: {str(e)}")
    finally:
        # Limpeza
        if test_file:
            cleanup_test_file(test_file)

if __name__ == "__main__":
    main() 