#!/usr/bin/env python3
"""
ü§ù COLLABORATION ENGINE - FASE 6
Sistema avan√ßado de colabora√ß√£o em tempo real para edi√ß√£o de v√≠deos

Funcionalidades:
‚úÖ Colabora√ß√£o multi-usu√°rio em tempo real
‚úÖ Controle de vers√µes avan√ßado
‚úÖ Chat integrado
‚úÖ Permiss√µes granulares
‚úÖ Conflict resolution autom√°tico
‚úÖ Live cursors e sele√ß√µes
‚úÖ Comments e annotations
‚úÖ Session replay
‚úÖ Offline sync

Data: 17 de Janeiro de 2025
Vers√£o: 6.0.0
"""

import asyncio
import json
import uuid
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Set
from dataclasses import dataclass, asdict
from enum import Enum
import logging
from collections import defaultdict
import redis
import websockets

logger = logging.getLogger(__name__)

class PermissionLevel(Enum):
    """N√≠veis de permiss√£o"""
    VIEWER = "viewer"
    EDITOR = "editor"
    ADMIN = "admin"
    OWNER = "owner"

class ActionType(Enum):
    """Tipos de a√ß√£o"""
    CREATE = "create"
    UPDATE = "update"
    DELETE = "delete"
    MOVE = "move"
    COMMENT = "comment"
    CURSOR = "cursor"
    SELECT = "select"

@dataclass
class User:
    """Usu√°rio colaborativo"""
    id: str
    name: str
    email: str
    avatar: str
    color: str  # Cor do cursor/sele√ß√£o
    permission: PermissionLevel
    status: str  # online, away, offline
    last_seen: datetime
    cursor_position: Optional[Dict[str, float]] = None
    selected_elements: List[str] = None

@dataclass
class Action:
    """A√ß√£o colaborativa"""
    id: str
    user_id: str
    project_id: str
    action_type: ActionType
    target_id: str  # ID do elemento afetado
    data: Dict[str, Any]
    timestamp: datetime
    applied: bool = False
    conflicts: List[str] = None

@dataclass
class Comment:
    """Coment√°rio em elemento"""
    id: str
    user_id: str
    element_id: str
    text: str
    position: Dict[str, float]  # x, y relativo ao elemento
    timestamp: datetime
    resolved: bool = False
    replies: List['Comment'] = None

@dataclass
class Session:
    """Sess√£o de colabora√ß√£o"""
    id: str
    project_id: str
    name: str
    created_by: str
    created_at: datetime
    users: Dict[str, User]
    actions: List[Action]
    comments: List[Comment]
    version: int
    locked_by: Optional[str] = None
    locked_until: Optional[datetime] = None

class CollaborationEngine:
    """Engine principal de colabora√ß√£o"""
    
    def __init__(self):
        self.sessions: Dict[str, Session] = {}
        self.user_connections: Dict[str, Set[websockets.WebSocketServerProtocol]] = defaultdict(set)
        self.project_users: Dict[str, Set[str]] = defaultdict(set)
        self.redis_client = None
        self.is_running = False
        
        # Configura√ß√µes
        self.config = {
            "max_users_per_session": 50,
            "action_history_limit": 10000,
            "conflict_resolution_timeout": 30,  # segundos
            "cursor_update_interval": 0.1,  # segundos
            "auto_save_interval": 30,  # segundos
        }

    async def initialize(self):
        """Inicializar o sistema de colabora√ß√£o"""
        try:
            # Conectar ao Redis para persist√™ncia
            self.redis_client = redis.Redis(
                host='localhost', 
                port=6379, 
                db=1,
                decode_responses=True
            )
            
            # Testar conex√£o
            await asyncio.get_event_loop().run_in_executor(
                None, self.redis_client.ping
            )
            
            logger.info("‚úÖ Collaboration Engine inicializado com Redis")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Redis n√£o dispon√≠vel: {e}. Usando mem√≥ria local.")
            self.redis_client = None
        
        self.is_running = True

    async def create_session(self, project_id: str, creator_user: User) -> Session:
        """Criar nova sess√£o de colabora√ß√£o"""
        session_id = str(uuid.uuid4())
        
        session = Session(
            id=session_id,
            project_id=project_id,
            name=f"Sess√£o de {creator_user.name}",
            created_by=creator_user.id,
            created_at=datetime.now(),
            users={creator_user.id: creator_user},
            actions=[],
            comments=[],
            version=1
        )
        
        self.sessions[session_id] = session
        self.project_users[project_id].add(creator_user.id)
        
        # Persistir no Redis
        await self._save_session_to_redis(session)
        
        logger.info(f"üÜï Nova sess√£o criada: {session_id} para projeto {project_id}")
        return session

    async def join_session(self, session_id: str, user: User, websocket: websockets.WebSocketServerProtocol) -> bool:
        """Usu√°rio entrar na sess√£o"""
        session = self.sessions.get(session_id)
        if not session:
            return False
        
        # Verificar limite de usu√°rios
        if len(session.users) >= self.config["max_users_per_session"]:
            return False
        
        # Adicionar usu√°rio
        session.users[user.id] = user
        self.project_users[session.project_id].add(user.id)
        self.user_connections[user.id].add(websocket)
        
        # Notificar outros usu√°rios
        await self._broadcast_to_session(session_id, {
            "type": "user_joined",
            "user": asdict(user),
            "timestamp": datetime.now().isoformat()
        }, exclude_user=user.id)
        
        # Enviar estado atual para o novo usu√°rio
        await self._send_session_state(user.id, session)
        
        logger.info(f"üë• Usu√°rio {user.name} entrou na sess√£o {session_id}")
        return True

    async def leave_session(self, session_id: str, user_id: str, websocket: websockets.WebSocketServerProtocol):
        """Usu√°rio sair da sess√£o"""
        session = self.sessions.get(session_id)
        if not session or user_id not in session.users:
            return
        
        # Remover conex√£o
        self.user_connections[user_id].discard(websocket)
        
        # Se n√£o h√° mais conex√µes, marcar como offline
        if not self.user_connections[user_id]:
            session.users[user_id].status = "offline"
            session.users[user_id].last_seen = datetime.now()
            
            # Remover da lista de usu√°rios do projeto
            self.project_users[session.project_id].discard(user_id)
        
        # Notificar outros usu√°rios
        await self._broadcast_to_session(session_id, {
            "type": "user_left",
            "user_id": user_id,
            "timestamp": datetime.now().isoformat()
        }, exclude_user=user_id)
        
        logger.info(f"üëã Usu√°rio {user_id} saiu da sess√£o {session_id}")

    async def apply_action(self, session_id: str, action: Action) -> bool:
        """Aplicar a√ß√£o colaborativa"""
        session = self.sessions.get(session_id)
        if not session:
            return False
        
        # Verificar permiss√µes
        user = session.users.get(action.user_id)
        if not user or not self._has_permission(user, action.action_type):
            return False
        
        # Verificar conflitos
        conflicts = await self._detect_conflicts(session, action)
        if conflicts:
            action.conflicts = conflicts
            await self._resolve_conflicts(session, action)
        
        # Aplicar a√ß√£o
        action.applied = True
        action.timestamp = datetime.now()
        session.actions.append(action)
        session.version += 1
        
        # Limitar hist√≥rico
        if len(session.actions) > self.config["action_history_limit"]:
            session.actions = session.actions[-self.config["action_history_limit"]:]
        
        # Broadcast para outros usu√°rios
        await self._broadcast_to_session(session_id, {
            "type": "action_applied",
            "action": asdict(action),
            "session_version": session.version
        }, exclude_user=action.user_id)
        
        # Persistir mudan√ßas
        await self._save_session_to_redis(session)
        
        logger.info(f"‚ö° A√ß√£o aplicada: {action.action_type.value} por {action.user_id}")
        return True

    async def update_cursor(self, session_id: str, user_id: str, position: Dict[str, float]):
        """Atualizar posi√ß√£o do cursor"""
        session = self.sessions.get(session_id)
        if not session or user_id not in session.users:
            return
        
        session.users[user_id].cursor_position = position
        
        # Broadcast posi√ß√£o do cursor (throttled)
        await self._broadcast_to_session(session_id, {
            "type": "cursor_update",
            "user_id": user_id,
            "position": position,
            "timestamp": datetime.now().isoformat()
        }, exclude_user=user_id, throttle=True)

    async def select_elements(self, session_id: str, user_id: str, element_ids: List[str]):
        """Selecionar elementos"""
        session = self.sessions.get(session_id)
        if not session or user_id not in session.users:
            return
        
        session.users[user_id].selected_elements = element_ids
        
        # Broadcast sele√ß√£o
        await self._broadcast_to_session(session_id, {
            "type": "selection_update",
            "user_id": user_id,
            "selected_elements": element_ids,
            "timestamp": datetime.now().isoformat()
        }, exclude_user=user_id)

    async def add_comment(self, session_id: str, comment: Comment) -> bool:
        """Adicionar coment√°rio"""
        session = self.sessions.get(session_id)
        if not session:
            return False
        
        # Verificar permiss√µes
        user = session.users.get(comment.user_id)
        if not user:
            return False
        
        comment.id = str(uuid.uuid4())
        comment.timestamp = datetime.now()
        session.comments.append(comment)
        
        # Broadcast coment√°rio
        await self._broadcast_to_session(session_id, {
            "type": "comment_added",
            "comment": asdict(comment)
        })
        
        logger.info(f"üí¨ Coment√°rio adicionado por {comment.user_id}")
        return True

    async def resolve_comment(self, session_id: str, comment_id: str, user_id: str) -> bool:
        """Resolver coment√°rio"""
        session = self.sessions.get(session_id)
        if not session:
            return False
        
        # Encontrar coment√°rio
        comment = None
        for c in session.comments:
            if c.id == comment_id:
                comment = c
                break
        
        if not comment:
            return False
        
        # Verificar permiss√µes
        user = session.users.get(user_id)
        if not user or (comment.user_id != user_id and user.permission not in [PermissionLevel.ADMIN, PermissionLevel.OWNER]):
            return False
        
        comment.resolved = True
        
        # Broadcast resolu√ß√£o
        await self._broadcast_to_session(session_id, {
            "type": "comment_resolved",
            "comment_id": comment_id,
            "resolved_by": user_id
        })
        
        return True

    async def lock_project(self, session_id: str, user_id: str, duration_minutes: int = 10) -> bool:
        """Bloquear projeto para edi√ß√£o exclusiva"""
        session = self.sessions.get(session_id)
        if not session:
            return False
        
        user = session.users.get(user_id)
        if not user or user.permission not in [PermissionLevel.ADMIN, PermissionLevel.OWNER]:
            return False
        
        # Verificar se j√° est√° bloqueado
        if session.locked_by and session.locked_until and datetime.now() < session.locked_until:
            return False
        
        session.locked_by = user_id
        session.locked_until = datetime.now() + timedelta(minutes=duration_minutes)
        
        # Broadcast bloqueio
        await self._broadcast_to_session(session_id, {
            "type": "project_locked",
            "locked_by": user_id,
            "locked_until": session.locked_until.isoformat()
        })
        
        return True

    async def unlock_project(self, session_id: str, user_id: str) -> bool:
        """Desbloquear projeto"""
        session = self.sessions.get(session_id)
        if not session:
            return False
        
        user = session.users.get(user_id)
        if not user:
            return False
        
        # Verificar permiss√µes
        if (session.locked_by != user_id and 
            user.permission not in [PermissionLevel.ADMIN, PermissionLevel.OWNER]):
            return False
        
        session.locked_by = None
        session.locked_until = None
        
        # Broadcast desbloqueio
        await self._broadcast_to_session(session_id, {
            "type": "project_unlocked",
            "unlocked_by": user_id
        })
        
        return True

    # ===================================================================
    # M√âTODOS PRIVADOS
    # ===================================================================
    
    def _has_permission(self, user: User, action_type: ActionType) -> bool:
        """Verificar se usu√°rio tem permiss√£o para a√ß√£o"""
        if user.permission == PermissionLevel.VIEWER:
            return action_type in [ActionType.CURSOR, ActionType.SELECT, ActionType.COMMENT]
        elif user.permission == PermissionLevel.EDITOR:
            return action_type != ActionType.DELETE or action_type == ActionType.COMMENT
        else:  # ADMIN ou OWNER
            return True

    async def _detect_conflicts(self, session: Session, action: Action) -> List[str]:
        """Detectar conflitos com outras a√ß√µes recentes"""
        conflicts = []
        
        # Verificar a√ß√µes dos √∫ltimos 5 segundos no mesmo elemento
        cutoff = datetime.now() - timedelta(seconds=5)
        recent_actions = [
            a for a in session.actions 
            if a.target_id == action.target_id and a.timestamp > cutoff and a.user_id != action.user_id
        ]
        
        for recent_action in recent_actions:
            if self._actions_conflict(action, recent_action):
                conflicts.append(f"Conflito com a√ß√£o {recent_action.id} do usu√°rio {recent_action.user_id}")
        
        return conflicts

    def _actions_conflict(self, action1: Action, action2: Action) -> bool:
        """Verificar se duas a√ß√µes conflitam"""
        # Mesmo elemento, a√ß√µes diferentes
        if action1.target_id == action2.target_id:
            # UPDATE + UPDATE = conflito se propriedades sobrepostas
            if action1.action_type == ActionType.UPDATE and action2.action_type == ActionType.UPDATE:
                props1 = set(action1.data.get("properties", {}).keys())
                props2 = set(action2.data.get("properties", {}).keys())
                return bool(props1.intersection(props2))
            
            # DELETE + qualquer coisa = conflito
            if action1.action_type == ActionType.DELETE or action2.action_type == ActionType.DELETE:
                return True
        
        return False

    async def _resolve_conflicts(self, session: Session, action: Action):
        """Resolver conflitos automaticamente"""
        # Estrat√©gia simples: √∫ltimo a escrever vence
        # Em implementa√ß√£o real, poderia usar operational transforms
        
        for conflict in action.conflicts or []:
            logger.warning(f"‚ö†Ô∏è Resolvendo conflito: {conflict}")
            # Por agora, apenas log. Implementa√ß√£o futura: merge autom√°tico

    async def _broadcast_to_session(self, session_id: str, message: Dict[str, Any], 
                                  exclude_user: Optional[str] = None, throttle: bool = False):
        """Enviar mensagem para todos usu√°rios da sess√£o"""
        session = self.sessions.get(session_id)
        if not session:
            return
        
        message_json = json.dumps(message)
        
        for user_id, user in session.users.items():
            if exclude_user and user_id == exclude_user:
                continue
            
            if user.status == "offline":
                continue
            
            # Enviar para todas as conex√µes do usu√°rio
            connections = self.user_connections.get(user_id, set())
            disconnected = set()
            
            for connection in connections:
                try:
                    await connection.send(message_json)
                except Exception:
                    disconnected.add(connection)
            
            # Remover conex√µes mortas
            for conn in disconnected:
                self.user_connections[user_id].discard(conn)

    async def _send_session_state(self, user_id: str, session: Session):
        """Enviar estado completo da sess√£o para usu√°rio"""
        state = {
            "type": "session_state",
            "session": {
                "id": session.id,
                "project_id": session.project_id,
                "name": session.name,
                "version": session.version,
                "users": {uid: asdict(user) for uid, user in session.users.items()},
                "recent_actions": [asdict(a) for a in session.actions[-100:]],  # √öltimas 100 a√ß√µes
                "comments": [asdict(c) for c in session.comments if not c.resolved],
                "locked_by": session.locked_by,
                "locked_until": session.locked_until.isoformat() if session.locked_until else None
            }
        }
        
        connections = self.user_connections.get(user_id, set())
        for connection in connections:
            try:
                await connection.send(json.dumps(state))
            except Exception:
                self.user_connections[user_id].discard(connection)

    async def _save_session_to_redis(self, session: Session):
        """Salvar sess√£o no Redis"""
        if not self.redis_client:
            return
        
        try:
            # Converter dataclasses para dict
            session_data = asdict(session)
            
            # Converter datetime para strings
            session_data["created_at"] = session.created_at.isoformat()
            if session.locked_until:
                session_data["locked_until"] = session.locked_until.isoformat()
            
            # Salvar no Redis
            await asyncio.get_event_loop().run_in_executor(
                None, 
                self.redis_client.setex,
                f"session:{session.id}",
                3600 * 24,  # 24 horas TTL
                json.dumps(session_data)
            )
            
        except Exception as e:
            logger.error(f"Erro ao salvar sess√£o no Redis: {e}")

    async def start_auto_save_task(self):
        """Iniciar tarefa de salvamento autom√°tico"""
        while self.is_running:
            try:
                for session in self.sessions.values():
                    await self._save_session_to_redis(session)
                
                await asyncio.sleep(self.config["auto_save_interval"])
                
            except Exception as e:
                logger.error(f"Erro no auto-save: {e}")
                await asyncio.sleep(5)

    def get_session_analytics(self, session_id: str) -> Dict[str, Any]:
        """Obter analytics da sess√£o"""
        session = self.sessions.get(session_id)
        if not session:
            return {}
        
        now = datetime.now()
        
        # Estat√≠sticas b√°sicas
        total_actions = len(session.actions)
        total_users = len(session.users)
        active_users = len([u for u in session.users.values() if u.status == "online"])
        
        # A√ß√µes por tipo
        actions_by_type = defaultdict(int)
        for action in session.actions:
            actions_by_type[action.action_type.value] += 1
        
        # Atividade por usu√°rio
        user_activity = defaultdict(int)
        for action in session.actions:
            user_activity[action.user_id] += 1
        
        # Coment√°rios n√£o resolvidos
        unresolved_comments = len([c for c in session.comments if not c.resolved])
        
        return {
            "session_id": session_id,
            "duration_minutes": (now - session.created_at).total_seconds() / 60,
            "total_actions": total_actions,
            "total_users": total_users,
            "active_users": active_users,
            "actions_by_type": dict(actions_by_type),
            "user_activity": dict(user_activity),
            "unresolved_comments": unresolved_comments,
            "version": session.version,
            "is_locked": bool(session.locked_by and session.locked_until and now < session.locked_until)
        }

# ===================================================================
# INST√ÇNCIA SINGLETON
# ===================================================================

collaboration_engine = CollaborationEngine()

async def initialize_collaboration():
    """Inicializar sistema de colabora√ß√£o"""
    await collaboration_engine.initialize()
    asyncio.create_task(collaboration_engine.start_auto_save_task())

def get_collaboration_engine() -> CollaborationEngine:
    """Obter inst√¢ncia do collaboration engine"""
    return collaboration_engine

if __name__ == "__main__":
    async def demo():
        # Demonstra√ß√£o do sistema de colabora√ß√£o
        engine = get_collaboration_engine()
        await engine.initialize()
        
        # Criar usu√°rios de exemplo
        user1 = User(
            id="user1",
            name="Alice",
            email="alice@example.com",
            avatar="/avatars/alice.jpg",
            color="#ff6b6b",
            permission=PermissionLevel.OWNER,
            status="online",
            last_seen=datetime.now()
        )
        
        user2 = User(
            id="user2", 
            name="Bob",
            email="bob@example.com",
            avatar="/avatars/bob.jpg",
            color="#4ecdc4",
            permission=PermissionLevel.EDITOR,
            status="online",
            last_seen=datetime.now()
        )
        
        # Criar sess√£o
        session = await engine.create_session("project123", user1)
        print(f"üìù Sess√£o criada: {session.id}")
        
        # Simular a√ß√µes colaborativas
        action1 = Action(
            id=str(uuid.uuid4()),
            user_id=user1.id,
            project_id="project123",
            action_type=ActionType.CREATE,
            target_id="element1",
            data={"type": "text", "content": "Hello World"},
            timestamp=datetime.now()
        )
        
        await engine.apply_action(session.id, action1)
        print(f"‚ö° A√ß√£o aplicada: {action1.action_type.value}")
        
        # Analytics
        analytics = engine.get_session_analytics(session.id)
        print(f"üìä Analytics: {analytics}")
    
    asyncio.run(demo()) 