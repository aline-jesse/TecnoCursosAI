"""
Demo B√°sico - Gerador de Avatar com MoviePy
Vers√£o simplificada que demonstra as funcionalidades principais
"""

import os
import tempfile
from pathlib import Path
from PIL import Image, ImageDraw, ImageFont
import numpy as np

try:
    from moviepy.editor import ImageClip, CompositeVideoClip, AudioFileClip
    MOVIEPY_OK = True
except ImportError:
    print("‚ùå MoviePy n√£o est√° dispon√≠vel. Execute: pip install moviepy==1.0.3")
    MOVIEPY_OK = False

def criar_avatar_simples(width=400, height=600, cor_pele="#fdbcb4", cor_camisa="#4a90e2"):
    """Cria um avatar simples usando PIL"""
    
    # Criar imagem
    avatar = Image.new('RGBA', (width, height), (0, 0, 0, 0))
    draw = ImageDraw.Draw(avatar)
    
    # Cabe√ßa (c√≠rculo)
    head_center = (width // 2, height // 3)
    head_radius = 80
    
    # Desenhar cabe√ßa
    draw.ellipse(
        [head_center[0] - head_radius, head_center[1] - head_radius,
         head_center[0] + head_radius, head_center[1] + head_radius],
        fill=cor_pele,
        outline="#d4a574",
        width=2
    )
    
    # Corpo (ret√¢ngulo)
    body_top = head_center[1] + head_radius - 20
    body_width = 120
    body_height = 200
    
    draw.rectangle(
        [head_center[0] - body_width//2, body_top,
         head_center[0] + body_width//2, body_top + body_height],
        fill=cor_camisa,
        outline="#2c3e50",
        width=2
    )
    
    # Cabelo
    hair_points = [
        (head_center[0] - head_radius + 10, head_center[1] - head_radius + 20),
        (head_center[0], head_center[1] - head_radius - 10),
        (head_center[0] + head_radius - 10, head_center[1] - head_radius + 20)
    ]
    draw.polygon(hair_points, fill="#8b4513")
    
    # Olhos
    eye_y = head_center[1] - 20
    left_eye = (head_center[0] - 25, eye_y)
    right_eye = (head_center[0] + 25, eye_y)
    
    # Desenhar olhos
    for eye_pos in [left_eye, right_eye]:
        # Branco do olho
        draw.ellipse([eye_pos[0] - 8, eye_pos[1] - 6,
                     eye_pos[0] + 8, eye_pos[1] + 6],
                    fill="white", outline="black")
        # Pupila
        draw.ellipse([eye_pos[0] - 3, eye_pos[1] - 3,
                     eye_pos[0] + 3, eye_pos[1] + 3],
                    fill="black")
    
    # Nariz
    nose_center = (head_center[0], head_center[1] + 5)
    draw.line([nose_center[0], nose_center[1], 
              nose_center[0], nose_center[1] + 10], 
             fill="#d4a574", width=2)
    
    # Boca
    mouth_center = (head_center[0], head_center[1] + 30)
    draw.arc([mouth_center[0] - 15, mouth_center[1] - 5,
             mouth_center[0] + 15, mouth_center[1] + 10],
            0, 180, fill="black", width=2)
    
    return avatar

def criar_slide_simples(titulo, conteudo, width=1280, height=720):
    """Cria um slide simples"""
    
    # Criar slide
    slide = Image.new('RGB', (width, height), "#ffffff")
    draw = ImageDraw.Draw(slide)
    
    try:
        # Tentar carregar fonte
        font_titulo = ImageFont.truetype("arial.ttf", 36)
        font_conteudo = ImageFont.truetype("arial.ttf", 24)
    except:
        # Usar fonte padr√£o se n√£o encontrar arial
        font_titulo = ImageFont.load_default()
        font_conteudo = ImageFont.load_default()
    
    # √Årea de conte√∫do (lado direito)
    content_x = width // 2 + 50
    content_width = width // 2 - 100
    
    # T√≠tulo
    draw.text((content_x, 100), titulo, font=font_titulo, fill="#2c3e50")
    
    # Conte√∫do (quebrar em linhas)
    words = conteudo.split(' ')
    lines = []
    current_line = []
    
    for word in words:
        test_line = ' '.join(current_line + [word])
        bbox = draw.textbbox((0, 0), test_line, font=font_conteudo)
        if bbox[2] - bbox[0] <= content_width:
            current_line.append(word)
        else:
            if current_line:
                lines.append(' '.join(current_line))
            current_line = [word]
    
    if current_line:
        lines.append(' '.join(current_line))
    
    # Desenhar linhas de conte√∫do
    y_pos = 180
    for line in lines[:8]:  # M√°ximo 8 linhas
        draw.text((content_x, y_pos), line, font=font_conteudo, fill="#34495e")
        y_pos += 40
    
    # Linha de separa√ß√£o
    draw.line([(content_x - 30, 80), (content_x - 30, height - 80)], 
             fill="#3498db", width=3)
    
    return slide

def demo_basico():
    """Demonstra√ß√£o b√°sica sem TTS"""
    
    print("üé¨ Demo B√°sico - Gerador de Avatar")
    print("=" * 40)
    
    if not MOVIEPY_OK:
        return
    
    try:
        # Criar diret√≥rio tempor√°rio
        temp_dir = Path(tempfile.gettempdir()) / "demo_avatar"
        temp_dir.mkdir(exist_ok=True)
        
        print("üé≠ Criando avatar...")
        
        # Criar avatar
        avatar = criar_avatar_simples()
        avatar_path = temp_dir / "avatar.png"
        avatar.save(str(avatar_path))
        
        print("üìÑ Criando slide...")
        
        # Criar slide
        slide = criar_slide_simples(
            "Bem-vindos ao TecnoCursos AI",
            "Esta √© uma demonstra√ß√£o do nosso gerador de v√≠deos com avatar virtual. "
            "O sistema combina slides educacionais com um apresentador animado para "
            "criar experi√™ncias de aprendizado envolventes e profissionais."
        )
        slide_path = temp_dir / "slide.png"
        slide.save(str(slide_path))
        
        print("üé¨ Criando v√≠deo...")
        
        # Criar clips
        duracao = 5  # 5 segundos
        
        # Slide como fundo
        slide_clip = ImageClip(str(slide_path), duration=duracao)
        
        # Avatar no lado esquerdo
        avatar_clip = ImageClip(str(avatar_path), duration=duracao)
        avatar_clip = avatar_clip.set_position((50, 60))  # Posi√ß√£o x, y
        
        # Combinar clips
        video_final = CompositeVideoClip([slide_clip, avatar_clip])
        
        # Caminho de sa√≠da
        output_path = "./demo_avatar_basico.mp4"
        
        print("üíæ Exportando v√≠deo...")
        
        # Exportar v√≠deo
        video_final.write_videofile(
            output_path,
            fps=24,
            codec='libx264',
            audio_codec='aac',
            verbose=False,
            logger=None
        )
        
        # Limpar
        video_final.close()
        
        print(f"‚úÖ Demo conclu√≠do!")
        print(f"üìÅ Arquivo: {os.path.abspath(output_path)}")
        print(f"‚è±Ô∏è  Dura√ß√£o: {duracao} segundos")
        print(f"üìè Resolu√ß√£o: 1280x720")
        
        # Verificar arquivo
        if os.path.exists(output_path):
            file_size = os.path.getsize(output_path)
            print(f"üíæ Tamanho: {file_size / (1024*1024):.1f} MB")
            print("üé• Abra o arquivo para ver o resultado!")
        else:
            print("‚ö†Ô∏è  Arquivo n√£o foi criado")
        
    except Exception as e:
        print(f"‚ùå Erro na cria√ß√£o do demo: {e}")

def demo_multiplos_estilos():
    """Demo com diferentes estilos de avatar"""
    
    print("\nüé® Demo - M√∫ltiplos Estilos de Avatar")
    print("=" * 40)
    
    if not MOVIEPY_OK:
        return
    
    estilos = [
        {"nome": "Profissional", "pele": "#fdbcb4", "camisa": "#2c3e50"},
        {"nome": "Amig√°vel", "pele": "#f4c2a1", "camisa": "#e74c3c"},
        {"nome": "Professor", "pele": "#d4a574", "camisa": "#27ae60"},
        {"nome": "Minimalista", "pele": "#e8d5b7", "camisa": "#95a5a6"}
    ]
    
    try:
        temp_dir = Path(tempfile.gettempdir()) / "demo_estilos"
        temp_dir.mkdir(exist_ok=True)
        
        for i, estilo in enumerate(estilos):
            print(f"üé≠ Criando avatar {estilo['nome']}...")
            
            # Criar avatar com cores espec√≠ficas
            avatar = criar_avatar_simples(
                cor_pele=estilo['pele'],
                cor_camisa=estilo['camisa']
            )
            
            # Criar slide
            slide = criar_slide_simples(
                f"Avatar {estilo['nome']}",
                f"Este √© o estilo {estilo['nome'].lower()} do nosso avatar virtual. "
                f"Cada estilo tem cores e caracter√≠sticas espec√≠ficas para diferentes "
                f"tipos de conte√∫do educacional."
            )
            
            # Salvar imagens
            avatar_path = temp_dir / f"avatar_{i}.png"
            slide_path = temp_dir / f"slide_{i}.png"
            avatar.save(str(avatar_path))
            slide.save(str(slide_path))
            
            # Criar v√≠deo individual
            slide_clip = ImageClip(str(slide_path), duration=3)
            avatar_clip = ImageClip(str(avatar_path), duration=3)
            avatar_clip = avatar_clip.set_position((50, 60))
            
            video_clip = CompositeVideoClip([slide_clip, avatar_clip])
            
            output_path = f"./demo_avatar_{estilo['nome'].lower()}.mp4"
            
            video_clip.write_videofile(
                output_path,
                fps=24,
                codec='libx264',
                audio_codec='aac',
                verbose=False,
                logger=None
            )
            
            video_clip.close()
            
            print(f"   ‚úÖ {estilo['nome']}: {output_path}")
        
        print("üéâ Todos os estilos criados com sucesso!")
        
    except Exception as e:
        print(f"‚ùå Erro na cria√ß√£o dos estilos: {e}")

def verificar_sistema():
    """Verifica se o sistema est√° pronto"""
    
    print("üîç Verifica√ß√£o do Sistema")
    print("=" * 25)
    
    dependencias = [
        ("PIL", "Pillow"),
        ("numpy", "numpy"),
        ("moviepy", "moviepy")
    ]
    
    todas_ok = True
    
    for modulo, nome in dependencias:
        try:
            __import__(modulo)
            print(f"   ‚úÖ {nome}")
        except ImportError:
            print(f"   ‚ùå {nome} - FALTANDO")
            todas_ok = False
    
    if todas_ok:
        print("‚úÖ Sistema pronto para demonstra√ß√£o!")
        return True
    else:
        print("\n‚ö†Ô∏è  Instale as depend√™ncias:")
        print("pip install pillow numpy moviepy==1.0.3")
        return False

def main():
    """Fun√ß√£o principal"""
    
    print("üöÄ TecnoCursos AI - Demo do Gerador de Avatar")
    print("=" * 50)
    
    # Verificar sistema
    if not verificar_sistema():
        return
    
    print("\n")
    
    # Executar demos
    demo_basico()
    demo_multiplos_estilos()
    
    print("\n" + "=" * 50)
    print("üé¨ Demonstra√ß√µes conclu√≠das!")
    print("üìÅ Verifique os arquivos .mp4 gerados")
    print("üé• Cada v√≠deo mostra um estilo diferente de avatar")

if __name__ == "__main__":
    main() 