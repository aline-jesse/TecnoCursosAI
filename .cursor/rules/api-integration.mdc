# Integração Frontend-Backend - TecnoCursos AI

## Padrões de API

### Endpoints Backend
```python
# Exemplo de endpoint completo
@app.post("/api/projects", response_model=ProjectResponse)
async def create_project(
    project: ProjectCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """Criar novo projeto"""
    try:
        db_project = Project(
            title=project.title,
            description=project.description,
            user_id=current_user.id
        )
        db.add(db_project)
        db.commit()
        db.refresh(db_project)
        return db_project
    except Exception as e:
        db.rollback()
        logger.error(f"Erro ao criar projeto: {e}")
        raise HTTPException(status_code=500, detail="Erro interno")
```

### Cliente Frontend
```typescript
// src/services/apiService.ts
export const apiService = {
  // Configuração base
  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',
  
  // Headers padrão
  getHeaders: () => ({
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${localStorage.getItem('access_token')}`
  }),
  
  // Métodos HTTP
  async get<T>(endpoint: string): Promise<T> {
    const response = await fetch(`${this.baseURL}${endpoint}`, {
      headers: this.getHeaders()
    })
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`)
    }
    
    return response.json()
  },
  
  async post<T>(endpoint: string, data: any): Promise<T> {
    const response = await fetch(`${this.baseURL}${endpoint}`, {
      method: 'POST',
      headers: this.getHeaders(),
      body: JSON.stringify(data)
    })
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`)
    }
    
    return response.json()
  }
}
```

## Autenticação JWT

### Backend - Geração de Tokens
```python
# app/auth.py
def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

@app.post("/api/auth/login", response_model=LoginResponse)
async def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
    user = authenticate_user(db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(status_code=401, detail="Credenciais inválidas")
    
    access_token = create_access_token(data={"sub": user.email})
    refresh_token = create_refresh_token(data={"sub": user.email})
    
    return {
        "access_token": access_token,
        "refresh_token": refresh_token,
        "token_type": "bearer",
        "user": user
    }
```

### Frontend - Interceptadores
```typescript
// src/services/authService.ts
export const authService = {
  // Login
  async login(email: string, password: string) {
    const formData = new FormData()
    formData.append('username', email)
    formData.append('password', password)
    
    const response = await fetch('/api/auth/login', {
      method: 'POST',
      body: formData
    })
    
    if (!response.ok) {
      throw new Error('Credenciais inválidas')
    }
    
    const data = await response.json()
    localStorage.setItem('access_token', data.access_token)
    localStorage.setItem('refresh_token', data.refresh_token)
    
    return data.user
  },
  
  // Refresh token
  async refreshToken() {
    const refresh_token = localStorage.getItem('refresh_token')
    if (!refresh_token) {
      throw new Error('No refresh token')
    }
    
    const response = await fetch('/api/auth/refresh', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${refresh_token}`
      }
    })
    
    if (!response.ok) {
      localStorage.removeItem('access_token')
      localStorage.removeItem('refresh_token')
      throw new Error('Token refresh failed')
    }
    
    const data = await response.json()
    localStorage.setItem('access_token', data.access_token)
    return data.access_token
  }
}
```

## Tratamento de Erros

### Backend - Error Handling
```python
from fastapi import HTTPException, status
from fastapi.responses import JSONResponse

@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc):
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": exc.detail,
            "status_code": exc.status_code,
            "timestamp": datetime.utcnow().isoformat()
        }
    )

@app.exception_handler(Exception)
async def general_exception_handler(request, exc):
    logger.error(f"Erro não tratado: {exc}")
    return JSONResponse(
        status_code=500,
        content={
            "error": "Erro interno do servidor",
            "status_code": 500,
            "timestamp": datetime.utcnow().isoformat()
        }
    )
```

### Frontend - Error Handling
```typescript
// src/hooks/useApi.ts
export const useApi = () => {
  const [error, setError] = useState<string | null>(null)
  const [loading, setLoading] = useState(false)
  
  const apiCall = useCallback(async <T>(
    apiFunction: () => Promise<T>
  ): Promise<T | null> => {
    setLoading(true)
    setError(null)
    
    try {
      const result = await apiFunction()
      return result
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Erro desconhecido'
      setError(errorMessage)
      return null
    } finally {
      setLoading(false)
    }
  }, [])
  
  return { apiCall, error, loading }
}
```

## WebSocket Integration

### Backend - WebSocket
```python
# app/routers/websocket_router.py
@app.websocket("/ws/{user_id}")
async def websocket_endpoint(websocket: WebSocket, user_id: int):
    await websocket.accept()
    try:
        while True:
            data = await websocket.receive_text()
            # Processar dados
            await websocket.send_text(f"Processado: {data}")
    except WebSocketDisconnect:
        logger.info(f"WebSocket desconectado: {user_id}")
```

### Frontend - WebSocket Client
```typescript
// src/services/websocketService.ts
export class WebSocketService {
  private ws: WebSocket | null = null
  
  connect(userId: string) {
    this.ws = new WebSocket(`ws://localhost:8000/ws/${userId}`)
    
    this.ws.onopen = () => {
      console.log('WebSocket conectado')
    }
    
    this.ws.onmessage = (event) => {
      const data = JSON.parse(event.data)
      // Processar mensagem
    }
    
    this.ws.onerror = (error) => {
      console.error('WebSocket error:', error)
    }
  }
  
  send(data: any) {
    if (this.ws?.readyState === WebSocket.OPEN) {
      this.ws.send(JSON.stringify(data))
    }
  }
  
  disconnect() {
    this.ws?.close()
  }
}
```

## Upload de Arquivos

### Backend - File Upload
```python
@app.post("/api/files/upload")
async def upload_file(
    file: UploadFile = File(...),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    # Validar tipo de arquivo
    if not file.content_type.startswith(('image/', 'video/', 'application/pdf')):
        raise HTTPException(status_code=400, detail="Tipo de arquivo não suportado")
    
    # Salvar arquivo
    file_path = f"uploads/{current_user.id}/{file.filename}"
    with open(file_path, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)
    
    # Salvar no banco
    db_file = FileUpload(
        filename=file.filename,
        file_path=file_path,
        user_id=current_user.id
    )
    db.add(db_file)
    db.commit()
    
    return {"filename": file.filename, "file_path": file_path}
```

### Frontend - File Upload
```typescript
// src/services/fileService.ts
export const fileService = {
  async uploadFile(file: File, onProgress?: (progress: number) => void) {
    const formData = new FormData()
    formData.append('file', file)
    
    const xhr = new XMLHttpRequest()
    
    return new Promise((resolve, reject) => {
      xhr.upload.addEventListener('progress', (event) => {
        if (event.lengthComputable && onProgress) {
          const progress = (event.loaded / event.total) * 100
          onProgress(progress)
        }
      })
      
      xhr.addEventListener('load', () => {
        if (xhr.status === 200) {
          resolve(JSON.parse(xhr.responseText))
        } else {
          reject(new Error('Upload failed'))
        }
      })
      
      xhr.addEventListener('error', () => {
        reject(new Error('Upload failed'))
      })
      
      xhr.open('POST', '/api/files/upload')
      xhr.setRequestHeader('Authorization', `Bearer ${localStorage.getItem('access_token')}`)
      xhr.send(formData)
    })
  }
}
```
description:
globs:
alwaysApply: false
---
