# Estrutura do Projeto

## Organização de Diretórios

1. `/src/components/editor/` - Componentes específicos do editor
   - `EditorCanvas.tsx` - Canvas principal do editor
   - `ScenePreview.tsx` - Preview de cenas
   - Outros componentes relacionados ao editor

2. `/src/store/` - Gerenciamento de estado
   - `editorStore.ts` - Store principal do editor
   - Outros stores relacionados

3. `/src/types/` - Definições de tipos
   - `editor.ts` - Tipos principais do editor
   - Outros arquivos de tipos

4. `/src/services/` - Serviços e APIs
   - `apiService.ts` - Serviço principal de API
   - Outros serviços

5. `/src/hooks/` - Hooks customizados
   - `useTemplates.ts` - Hook para templates
   - Outros hooks

6. `/src/data/` - Dados estáticos
   - `initialData.ts` - Dados iniciais
   - `sceneTemplates.ts` - Templates de cena

## Convenções de Código

1. Nomes de arquivos:
   - Componentes: PascalCase (ex: EditorCanvas.tsx)
   - Hooks: camelCase começando com 'use' (ex: useTemplates.ts)
   - Serviços: camelCase terminando com 'Service' (ex: apiService.ts)
   - Tipos: camelCase (ex: editor.ts)

2. Estrutura de componentes:
   - Props interface no topo
   - Hooks e refs logo após
   - Funções auxiliares
   - Renderização

3. Importações:
   - React primeiro
   - Bibliotecas externas
   - Componentes internos
   - Hooks
   - Tipos
   - Estilos por último

## Padrões de Implementação

1. Componentes:
   - Use TypeScript e interfaces para props
   - Evite props drilling, use context ou stores
   - Mantenha componentes pequenos e focados

2. Estado:
   - Use Zustand para estado global
   - Use hooks para lógica reutilizável
   - Mantenha estado local quando possível

3. Tipos:
   - Defina interfaces para todas as estruturas de dados
   - Use union types para variações
   - Evite `any`

4. Estilização:
   - Use CSS Modules ou Tailwind
   - Mantenha estilos próximos aos componentes
   - Use variáveis CSS para temas
