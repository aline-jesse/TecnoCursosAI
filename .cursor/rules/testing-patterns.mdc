# Padrões de Testes - TecnoCursos AI

## Testes Backend (Python/Pytest)

### Estrutura de Testes
```python
# tests/test_auth.py
import pytest
from fastapi.testclient import TestClient
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.main import app
from app.database import get_db, Base

# Configuração do banco de teste
SQLALCHEMY_DATABASE_URL = "sqlite:///./test.db"
engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})
TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def override_get_db():
    try:
        db = TestingSessionLocal()
        yield db
    finally:
        db.close()

app.dependency_overrides[get_db] = override_get_db
client = TestClient(app)

@pytest.fixture(autouse=True)
def setup_database():
    Base.metadata.create_all(bind=engine)
    yield
    Base.metadata.drop_all(bind=engine)
```

### Testes de Endpoints
```python
def test_login_success():
    """Teste de login bem-sucedido"""
    response = client.post("/api/auth/login", data={
        "username": "admin@tecnocursos.ai",
        "password": "admin123"
    })
    
    assert response.status_code == 200
    data = response.json()
    assert "access_token" in data
    assert "refresh_token" in data
    assert data["token_type"] == "bearer"

def test_login_invalid_credentials():
    """Teste de login com credenciais inválidas"""
    response = client.post("/api/auth/login", data={
        "username": "invalid@email.com",
        "password": "wrongpassword"
    })
    
    assert response.status_code == 401
    assert "Credenciais inválidas" in response.json()["detail"]

def test_protected_endpoint_with_token():
    """Teste de endpoint protegido com token válido"""
    # Primeiro fazer login
    login_response = client.post("/api/auth/login", data={
        "username": "admin@tecnocursos.ai",
        "password": "admin123"
    })
    token = login_response.json()["access_token"]
    
    # Testar endpoint protegido
    response = client.get("/api/users/me", headers={
        "Authorization": f"Bearer {token}"
    })
    
    assert response.status_code == 200
    data = response.json()
    assert data["email"] == "admin@tecnocursos.ai"
```

### Testes de Modelos
```python
def test_user_model():
    """Teste do modelo User"""
    user = User(
        email="test@example.com",
        username="testuser",
        hashed_password="hashed_password"
    )
    
    assert user.email == "test@example.com"
    assert user.username == "testuser"
    assert user.hashed_password == "hashed_password"
    assert user.is_active is True
    assert user.is_superuser is False

def test_project_model():
    """Teste do modelo Project"""
    project = Project(
        title="Test Project",
        description="Test Description",
        user_id=1
    )
    
    assert project.title == "Test Project"
    assert project.description == "Test Description"
    assert project.user_id == 1
    assert project.is_active is True
```

### Testes de Serviços
```python
def test_auth_service():
    """Teste do serviço de autenticação"""
    from app.auth import auth_manager
    
    # Teste de criação de usuário
    user_data = {
        "email": "test@example.com",
        "username": "testuser",
        "password": "testpassword"
    }
    
    user = auth_manager.create_user(user_data)
    assert user.email == user_data["email"]
    assert user.username == user_data["username"]
    
    # Teste de autenticação
    authenticated_user = auth_manager.authenticate_user(
        user_data["email"], 
        user_data["password"]
    )
    assert authenticated_user is not None
    assert authenticated_user.email == user_data["email"]
```

## Testes Frontend (Jest/React Testing Library)

### Configuração de Testes
```typescript
// src/setupTests.ts
import '@testing-library/jest-dom'
import { server } from './mocks/server'

beforeAll(() => server.listen())
afterEach(() => server.resetHandlers())
afterAll(() => server.close())
```

### Testes de Componentes
```typescript
// src/components/__tests__/LoginForm.test.tsx
import React from 'react'
import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import { LoginForm } from '../LoginForm'
import { AuthProvider } from '../../contexts/AuthContext'

const renderWithAuth = (component: React.ReactElement) => {
  return render(
    <AuthProvider>
      {component}
    </AuthProvider>
  )
}

describe('LoginForm', () => {
  test('renderiza campos de login', () => {
    renderWithAuth(<LoginForm />)
    
    expect(screen.getByLabelText(/email/i)).toBeInTheDocument()
    expect(screen.getByLabelText(/senha/i)).toBeInTheDocument()
    expect(screen.getByRole('button', { name: /entrar/i })).toBeInTheDocument()
  })
  
  test('submete formulário com dados válidos', async () => {
    const mockOnSubmit = jest.fn()
    renderWithAuth(<LoginForm onSubmit={mockOnSubmit} />)
    
    fireEvent.change(screen.getByLabelText(/email/i), {
      target: { value: 'test@example.com' }
    })
    fireEvent.change(screen.getByLabelText(/senha/i), {
      target: { value: 'password123' }
    })
    
    fireEvent.click(screen.getByRole('button', { name: /entrar/i }))
    
    await waitFor(() => {
      expect(mockOnSubmit).toHaveBeenCalledWith({
        email: 'test@example.com',
        password: 'password123'
      })
    })
  })
  
  test('exibe erro com credenciais inválidas', async () => {
    renderWithAuth(<LoginForm />)
    
    fireEvent.change(screen.getByLabelText(/email/i), {
      target: { value: 'invalid@example.com' }
    })
    fireEvent.change(screen.getByLabelText(/senha/i), {
      target: { value: 'wrongpassword' }
    })
    
    fireEvent.click(screen.getByRole('button', { name: /entrar/i }))
    
    await waitFor(() => {
      expect(screen.getByText(/credenciais inválidas/i)).toBeInTheDocument()
    })
  })
})
```

### Testes de Hooks
```typescript
// src/hooks/__tests__/useAuth.test.ts
import { renderHook, act } from '@testing-library/react'
import { useAuth } from '../useAuth'
import { AuthProvider } from '../../contexts/AuthContext'

const wrapper = ({ children }: { children: React.ReactNode }) => (
  <AuthProvider>{children}</AuthProvider>
)

describe('useAuth', () => {
  test('retorna estado inicial', () => {
    const { result } = renderHook(() => useAuth(), { wrapper })
    
    expect(result.current.user).toBeNull()
    expect(result.current.isAuthenticated).toBe(false)
    expect(result.current.loading).toBe(false)
  })
  
  test('faz login com sucesso', async () => {
    const { result } = renderHook(() => useAuth(), { wrapper })
    
    await act(async () => {
      await result.current.login('test@example.com', 'password123')
    })
    
    expect(result.current.isAuthenticated).toBe(true)
    expect(result.current.user).toEqual({
      id: 1,
      email: 'test@example.com',
      username: 'testuser'
    })
  })
  
  test('faz logout', async () => {
    const { result } = renderHook(() => useAuth(), { wrapper })
    
    // Primeiro fazer login
    await act(async () => {
      await result.current.login('test@example.com', 'password123')
    })
    
    // Depois fazer logout
    await act(async () => {
      result.current.logout()
    })
    
    expect(result.current.isAuthenticated).toBe(false)
    expect(result.current.user).toBeNull()
  })
})
```

### Testes de Serviços
```typescript
// src/services/__tests__/apiService.test.ts
import { apiService } from '../apiService'
import { server } from '../../mocks/server'
import { rest } from 'msw'

describe('apiService', () => {
  test('faz requisição GET com sucesso', async () => {
    server.use(
      rest.get('/api/users/me', (req, res, ctx) => {
        return res(
          ctx.json({
            id: 1,
            email: 'test@example.com',
            username: 'testuser'
          })
        )
      })
    )
    
    const result = await apiService.get('/api/users/me')
    
    expect(result).toEqual({
      id: 1,
      email: 'test@example.com',
      username: 'testuser'
    })
  })
  
  test('faz requisição POST com sucesso', async () => {
    const postData = { title: 'Test Project', description: 'Test Description' }
    
    server.use(
      rest.post('/api/projects', (req, res, ctx) => {
        return res(
          ctx.json({
            id: 1,
            ...postData,
            user_id: 1,
            created_at: '2023-01-01T00:00:00Z'
          })
        )
      })
    )
    
    const result = await apiService.post('/api/projects', postData)
    
    expect(result).toEqual({
      id: 1,
      title: 'Test Project',
      description: 'Test Description',
      user_id: 1,
      created_at: '2023-01-01T00:00:00Z'
    })
  })
  
  test('trata erro de requisição', async () => {
    server.use(
      rest.get('/api/error', (req, res, ctx) => {
        return res(ctx.status(500), ctx.json({ error: 'Internal Server Error' }))
      })
    )
    
    await expect(apiService.get('/api/error')).rejects.toThrow('HTTP 500')
  })
})
```

## Testes de Integração

### Testes E2E
```python
# tests/test_integration.py
def test_full_user_flow():
    """Teste completo do fluxo do usuário"""
    # 1. Registro
    register_response = client.post("/api/auth/register", json={
        "email": "newuser@example.com",
        "username": "newuser",
        "password": "newpassword123"
    })
    assert register_response.status_code == 201
    
    # 2. Login
    login_response = client.post("/api/auth/login", data={
        "username": "newuser@example.com",
        "password": "newpassword123"
    })
    assert login_response.status_code == 200
    token = login_response.json()["access_token"]
    
    # 3. Criar projeto
    project_response = client.post("/api/projects", 
        json={"title": "Test Project", "description": "Test Description"},
        headers={"Authorization": f"Bearer {token}"}
    )
    assert project_response.status_code == 201
    
    # 4. Upload arquivo
    with open("test_file.pdf", "rb") as f:
        upload_response = client.post("/api/files/upload",
            files={"file": f},
            headers={"Authorization": f"Bearer {token}"}
        )
    assert upload_response.status_code == 200
    
    # 5. Gerar vídeo
    video_response = client.post("/api/videos/generate",
        json={"project_id": project_response.json()["id"]},
        headers={"Authorization": f"Bearer {token}"}
    )
    assert video_response.status_code == 202
```

## Cobertura de Testes

### Configuração de Cobertura
```yaml
# .coveragerc
[run]
source = app
omit = 
    */tests/*
    */migrations/*
    */__pycache__/*
    */venv/*

[report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
```

### Scripts de Teste
```json
// package.json
{
  "scripts": {
    "test": "react-scripts test --coverage --watchAll=false",
    "test:watch": "react-scripts test",
    "test:coverage": "npm test -- --coverage --watchAll=false",
    "test:ci": "npm test -- --watchAll=false --coverage --ci"
  }
}
```

## Mock e Fixtures

### Mock de APIs
```typescript
// src/mocks/handlers.ts
import { rest } from 'msw'

export const handlers = [
  rest.post('/api/auth/login', (req, res, ctx) => {
    const { username, password } = req.body as any
    
    if (username === 'admin@tecnocursos.ai' && password === 'admin123') {
      return res(
        ctx.json({
          access_token: 'mock_access_token',
          refresh_token: 'mock_refresh_token',
          token_type: 'bearer',
          user: {
            id: 1,
            email: 'admin@tecnocursos.ai',
            username: 'admin'
          }
        })
      )
    }
    
    return res(
      ctx.status(401),
      ctx.json({ detail: 'Credenciais inválidas' })
    )
  }),
  
  rest.get('/api/users/me', (req, res, ctx) => {
    const authHeader = req.headers.get('Authorization')
    
    if (authHeader === 'Bearer mock_access_token') {
      return res(
        ctx.json({
          id: 1,
          email: 'admin@tecnocursos.ai',
          username: 'admin'
        })
      )
    }
    
    return res(ctx.status(401))
  })
]
```
description:
globs:
alwaysApply: false
---
