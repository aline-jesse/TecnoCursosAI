#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Demo Sistema Completo - TecnoCursos AI Best Practices

Este script demonstra como executar o sistema TecnoCursos AI
com todas as melhores pr√°ticas do FastAPI implementadas.

Funcionalidades Demonstradas:
- Startup com middleware avan√ßado
- Configura√ß√£o din√¢mica por ambiente
- Logging estruturado
- M√©tricas Prometheus
- Documenta√ß√£o autom√°tica
- Health checks
- Sistema completo funcionando

Autor: TecnoCursos AI System
Data: 17/01/2025
"""

import asyncio
import os
import sys
import time
from datetime import datetime
from pathlib import Path

# Adicionar o diret√≥rio raiz ao Python path
sys.path.insert(0, str(Path(__file__).parent))

try:
    from fastapi import FastAPI, HTTPException
    from fastapi.responses import JSONResponse
    import uvicorn
    
    # Imports das implementa√ß√µes best practices
    from app.middleware.advanced_middleware import setup_advanced_middleware
    from app.config.settings import get_settings, validate_critical_settings
    from app.core.enhanced_logging import get_logger, configure_logging, LogConfig
    from app.monitoring.prometheus_metrics import start_metrics_collection, get_metrics
    from app.core.api_documentation import setup_api_documentation, APIDocConfig
    
    IMPORTS_OK = True
except ImportError as e:
    print(f"‚ö†Ô∏è  Importa√ß√£o faltando: {e}")
    IMPORTS_OK = False

# ============================================================================
# CONFIGURA√á√ÉO E INICIALIZA√á√ÉO
# ============================================================================

def create_application() -> FastAPI:
    """Criar aplica√ß√£o FastAPI com todas as best practices"""
    
    # Configurar ambiente
    os.environ.setdefault("ENVIRONMENT", "development")
    
    # Configurar logging
    log_config = LogConfig(
        level="INFO",
        format="json",
        output="console",
        enable_correlation=True,
        enable_performance=True
    )
    configure_logging(log_config)
    
    # Logger principal
    logger = get_logger("tecnocursos.main")
    logger.info("üöÄ Iniciando TecnoCursos AI com Best Practices...")
    
    # Validar configura√ß√µes cr√≠ticas
    try:
        validate_critical_settings()
        logger.info("‚úÖ Configura√ß√µes validadas com sucesso")
    except ValueError as e:
        logger.error(f"‚ùå Erro de configura√ß√£o: {e}")
        # Em desenvolvimento, continuar mesmo com erro
        if os.getenv("ENVIRONMENT") != "development":
            raise
    
    # Obter configura√ß√µes
    settings = get_settings()
    
    # Criar aplica√ß√£o FastAPI
    app = FastAPI(
        title=settings.app.app_name,
        description=settings.app.app_description,
        version=settings.app.app_version,
        debug=settings.app.debug,
        docs_url="/docs" if settings.app.environment != "production" else None,
        redoc_url="/redoc" if settings.app.environment != "production" else None,
        openapi_url="/openapi.json"
    )
    
    # Setup de middleware avan√ßado
    logger.info("‚öôÔ∏è  Configurando middleware avan√ßado...")
    try:
        logging_middleware = setup_advanced_middleware(app)
        logger.info("‚úÖ Middleware configurado com sucesso")
    except Exception as e:
        logger.error(f"‚ùå Erro ao configurar middleware: {e}")
        # Middleware b√°sico de fallback
        from fastapi.middleware.cors import CORSMiddleware
        app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"]
        )
    
    # Setup de documenta√ß√£o autom√°tica
    logger.info("üìö Configurando documenta√ß√£o autom√°tica...")
    try:
        doc_config = APIDocConfig(
            title=f"{settings.app.app_name} API",
            version=settings.app.app_version,
            description="API completa com todas as best practices implementadas"
        )
        setup_api_documentation(app, doc_config)
        logger.info("‚úÖ Documenta√ß√£o configurada com sucesso")
    except Exception as e:
        logger.error(f"‚ùå Erro ao configurar documenta√ß√£o: {e}")
    
    return app, logger

# ============================================================================
# ROTAS DE DEMONSTRA√á√ÉO
# ============================================================================

def setup_demo_routes(app: FastAPI, logger):
    """Configurar rotas de demonstra√ß√£o"""
    
    @app.get("/")
    async def root():
        """Endpoint raiz com informa√ß√µes do sistema"""
        return {
            "message": "üöÄ TecnoCursos AI - Enterprise Edition 2025",
            "status": "‚úÖ Sistema funcionando com todas as best practices",
            "version": "v2.0.0",
            "features": [
                "‚úÖ Middleware Avan√ßado",
                "‚úÖ Logging Estruturado", 
                "‚úÖ M√©tricas Prometheus",
                "‚úÖ Documenta√ß√£o Autom√°tica",
                "‚úÖ Configuration Management",
                "‚úÖ Health Checks",
                "‚úÖ Security Headers",
                "‚úÖ Rate Limiting",
                "‚úÖ Performance Monitoring"
            ],
            "timestamp": datetime.utcnow().isoformat(),
            "environment": os.getenv("ENVIRONMENT", "development")
        }
    
    @app.get("/health")
    async def health_check():
        """Health check avan√ßado"""
        logger.info("üîç Health check solicitado")
        
        health_status = {
            "status": "healthy",
            "timestamp": datetime.utcnow().isoformat(),
            "checks": {
                "api": "‚úÖ OK",
                "middleware": "‚úÖ OK", 
                "logging": "‚úÖ OK",
                "configuration": "‚úÖ OK",
                "documentation": "‚úÖ OK"
            },
            "system_info": {
                "python_version": sys.version.split()[0],
                "fastapi_available": True,
                "environment": os.getenv("ENVIRONMENT", "development"),
                "uptime": "Sistema iniciado"
            }
        }
        
        try:
            # Verificar m√©tricas se dispon√≠veis
            metrics_data = get_metrics()
            health_status["metrics"] = "‚úÖ Coletando" if metrics_data else "‚ö†Ô∏è  Indispon√≠vel"
        except:
            health_status["metrics"] = "‚ö†Ô∏è  Indispon√≠vel"
        
        return health_status
    
    @app.get("/metrics")
    async def prometheus_metrics():
        """Endpoint de m√©tricas Prometheus"""
        try:
            metrics_data = get_metrics()
            return JSONResponse(
                content={"metrics": "available", "format": "prometheus"},
                headers={"Content-Type": "text/plain"}
            )
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter m√©tricas: {e}")
            return {"error": "M√©tricas indispon√≠veis", "message": str(e)}
    
    @app.get("/demo/middleware")
    async def demo_middleware():
        """Demonstrar middleware em a√ß√£o"""
        logger.info("üé≠ Demo de middleware executado")
        
        # Simular processamento
        await asyncio.sleep(0.1)
        
        return {
            "message": "‚úÖ Middleware demonstrado com sucesso",
            "features": [
                "üîç Request logging autom√°tico",
                "‚è±Ô∏è  Performance tracking",
                "üîí Security headers adicionados",
                "üö¶ Rate limiting aplicado", 
                "üìù Correlation ID gerado",
                "üìä M√©tricas coletadas"
            ],
            "note": "Verifique os logs para ver o middleware em a√ß√£o!"
        }
    
    @app.get("/demo/logging")
    async def demo_logging():
        """Demonstrar sistema de logging"""
        logger.info("üìù Demo de logging iniciado")
        logger.debug("Debug message - detalhes t√©cnicos")
        logger.warning("Warning message - aten√ß√£o necess√°ria")
        
        # Log de performance
        logger.log_performance("demo_operation", 0.05, success=True)
        
        # Log de evento de neg√≥cio
        logger.log_business_event("demo_event", "test_value", user_id=123)
        
        return {
            "message": "‚úÖ Sistema de logging demonstrado",
            "logs_generated": [
                "üìù Info log com contexto",
                "üêõ Debug log para desenvolvimento", 
                "‚ö†Ô∏è  Warning log para aten√ß√£o",
                "‚ö° Performance log com m√©tricas",
                "üíº Business event log"
            ],
            "note": "Logs estruturados em JSON com correlation IDs!"
        }
    
    @app.get("/demo/error")
    async def demo_error_handling():
        """Demonstrar tratamento de erros"""
        logger.warning("üö® Demo de erro iniciado intencionalmente")
        
        # Simular erro para demonstrar handling
        raise HTTPException(
            status_code=400,
            detail={
                "error": "DEMO_ERROR",
                "message": "Este √© um erro de demonstra√ß√£o",
                "timestamp": datetime.utcnow().isoformat(),
                "note": "Erro tratado pelo middleware de forma estruturada"
            }
        )
    
    @app.get("/demo/config")
    async def demo_configuration():
        """Demonstrar sistema de configura√ß√£o"""
        settings = get_settings()
        
        # Configura√ß√µes n√£o sens√≠veis para demo
        safe_config = {
            "app": {
                "name": settings.app.app_name,
                "version": settings.app.app_version,
                "environment": settings.app.environment,
                "debug": settings.app.debug
            },
            "database": {
                "pool_size": settings.database.database_pool_size,
                "echo": settings.database.database_echo
            },
            "redis": {
                "host": settings.redis.redis_host,
                "port": settings.redis.redis_port,
                "cache_ttl": settings.redis.cache_ttl_default
            },
            "security": {
                "rate_limit": settings.security.rate_limit_requests_per_minute,
                "cors_origins": len(settings.security.cors_allowed_origins)
            }
        }
        
        return {
            "message": "‚öôÔ∏è  Sistema de configura√ß√£o demonstrado",
            "features": [
                "‚úÖ Pydantic Settings com valida√ß√£o",
                "‚úÖ Configura√ß√£o por ambiente", 
                "‚úÖ Valida√ß√£o de tipos autom√°tica",
                "‚úÖ Secrets management",
                "‚úÖ Configuration caching"
            ],
            "current_config": safe_config,
            "note": "Configura√ß√µes sens√≠veis s√£o automaticamente sanitizadas!"
        }

# ============================================================================
# FUN√á√ÉO PRINCIPAL
# ============================================================================

async def startup_events(app: FastAPI, logger):
    """Eventos de startup da aplica√ß√£o"""
    logger.info("üîÑ Executando eventos de startup...")
    
    # Iniciar coleta de m√©tricas
    try:
        await start_metrics_collection()
        logger.info("‚úÖ Coleta de m√©tricas iniciada")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è  M√©tricas n√£o dispon√≠veis: {e}")
    
    # Log de startup completo
    logger.info("üéâ TecnoCursos AI iniciado com sucesso!")
    logger.info("üìä Sistema pronto para receber requisi√ß√µes")

def main():
    """Fun√ß√£o principal para executar o demo"""
    
    print("=" * 80)
    print("üöÄ TECNOCURSOS AI - DEMO SISTEMA COMPLETO COM BEST PRACTICES")
    print("=" * 80)
    
    if not IMPORTS_OK:
        print("‚ùå N√£o foi poss√≠vel importar todos os m√≥dulos necess√°rios")
        print("üí° Execute: pip install -r requirements.txt")
        return
    
    try:
        # Criar aplica√ß√£o
        app, logger = create_application()
        
        # Setup das rotas de demo
        setup_demo_routes(app, logger)
        
        # Configurar evento de startup
        @app.on_event("startup")
        async def startup():
            await startup_events(app, logger)
        
        print("\n‚úÖ Aplica√ß√£o configurada com sucesso!")
        print("\nüìã ENDPOINTS DISPON√çVEIS:")
        print("   GET  /                 - Informa√ß√µes do sistema")
        print("   GET  /health           - Health check completo")  
        print("   GET  /metrics          - M√©tricas Prometheus")
        print("   GET  /docs             - Documenta√ß√£o Swagger")
        print("   GET  /redoc            - Documenta√ß√£o ReDoc")
        print("   GET  /demo/middleware  - Demo de middleware")
        print("   GET  /demo/logging     - Demo de logging")
        print("   GET  /demo/error       - Demo de error handling")
        print("   GET  /demo/config      - Demo de configura√ß√£o")
        
        print("\nüéØ FUNCIONALIDADES ATIVAS:")
        print("   ‚úÖ Middleware avan√ßado com 5+ componentes")
        print("   ‚úÖ Logging estruturado em JSON")
        print("   ‚úÖ Configuration management por ambiente")
        print("   ‚úÖ Documenta√ß√£o autom√°tica OpenAPI 3.0")
        print("   ‚úÖ M√©tricas Prometheus (se dispon√≠vel)")
        print("   ‚úÖ Health checks robustos")
        print("   ‚úÖ Error handling padronizado")
        print("   ‚úÖ Security headers autom√°ticos")
        print("   ‚úÖ Rate limiting inteligente")
        print("   ‚úÖ Performance monitoring")
        
        print(f"\nüåê Servidor iniciando na porta 8000...")
        print("   üì± Swagger UI: http://localhost:8000/docs")
        print("   üìö ReDoc:      http://localhost:8000/redoc")
        print("   üîç Health:     http://localhost:8000/health")
        print("   üìä M√©tricas:   http://localhost:8000/metrics")
        
        print("\nüí° DICAS:")
        print("   ‚Ä¢ Monitore os logs para ver middleware em a√ß√£o")
        print("   ‚Ä¢ Teste os endpoints /demo/* para ver funcionalidades")
        print("   ‚Ä¢ Acesse /docs para documenta√ß√£o interativa")
        print("   ‚Ä¢ Use Ctrl+C para parar o servidor")
        
        print("\n" + "=" * 80)
        
        # Iniciar servidor
        uvicorn.run(
            app,
            host="0.0.0.0",
            port=8000,
            log_level="info",
            reload=True,
            access_log=True
        )
        
    except KeyboardInterrupt:
        print("\n\nüëã Servidor interrompido pelo usu√°rio")
        print("‚úÖ Sistema encerrado com sucesso!")
        
    except Exception as e:
        print(f"\n‚ùå Erro ao iniciar o sistema: {e}")
        print("üí° Verifique os logs para mais detalhes")
        sys.exit(1)

if __name__ == "__main__":
    # Banner inicial
    print("""
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
       ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
       ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë
       ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
       ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
                                                                                                     
                        üöÄ ENTERPRISE EDITION 2025 - BEST PRACTICES IMPLEMENTED üöÄ
    """)
    
    main() 