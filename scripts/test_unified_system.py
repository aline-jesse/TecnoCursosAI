#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ TESTE DO SISTEMA UNIFICADO - TECNOCURSOS AI
==============================================

Script de teste completo para validar todas as funcionalidades
do sistema unificado ap√≥s padroniza√ß√£o e consolida√ß√£o.

Funcionalidades Testadas:
- Sistema de imports centralizados
- Configura√ß√£o unificada
- Video Engine
- Depend√™ncias instaladas
- Funcionalidades b√°sicas

Autor: TecnoCursos AI System
Data: 17/01/2025
"""

import sys
import os
from pathlib import Path

# Adicionar app ao path
sys.path.insert(0, str(Path(__file__).parent))

def test_imports_system():
    """Testar sistema de imports centralizados"""
    print("üîó TESTANDO SISTEMA DE IMPORTS CENTRALIZADOS")
    print("=" * 60)
    
    try:
        from app.core.imports import (
            get_dependency_report, 
            check_dependencies,
            check_video_dependencies,
            check_ai_dependencies,
            check_web_dependencies,
            AVAILABLE_MODULES
        )
        
        print("‚úÖ Imports centralizados carregados com sucesso")
        
        # Mostrar status das depend√™ncias
        deps = check_dependencies()
        print(f"‚úÖ Status das depend√™ncias obtido: {len(deps)} m√≥dulos verificados")
        
        # Verificar depend√™ncias por categoria
        print(f"üé¨ Depend√™ncias de v√≠deo: {'‚úÖ' if check_video_dependencies() else '‚ùå'}")
        print(f"ü§ñ Depend√™ncias de IA: {'‚úÖ' if check_ai_dependencies() else '‚ùå'}")
        print(f"üåê Depend√™ncias web: {'‚úÖ' if check_web_dependencies() else '‚ùå'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no sistema de imports: {e}")
        return False

def test_unified_config():
    """Testar configura√ß√£o unificada"""
    print("\nüîß TESTANDO CONFIGURA√á√ÉO UNIFICADA")
    print("=" * 60)
    
    try:
        from app.unified_config import (
            get_config, 
            get_video_config,
            get_audio_config,
            get_ai_config,
            is_development
        )
        
        print("‚úÖ Configura√ß√£o unificada carregada com sucesso")
        
        # Testar configura√ß√µes
        config = get_config()
        print(f"‚úÖ Configura√ß√£o principal: {type(config).__name__}")
        
        video_config = get_video_config()
        print(f"‚úÖ Config de v√≠deo: resolu√ß√£o padr√£o {video_config.default_resolution}")
        
        audio_config = get_audio_config()
        print(f"‚úÖ Config de √°udio: provedor padr√£o {audio_config.default_provider}")
        
        ai_config = get_ai_config()
        print(f"‚úÖ Config de IA: provedor padr√£o {ai_config.default_provider}")
        
        print(f"‚úÖ Modo desenvolvimento: {is_development()}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na configura√ß√£o unificada: {e}")
        return False

def test_video_engine():
    """Testar Video Engine"""
    print("\nüé¨ TESTANDO VIDEO ENGINE")
    print("=" * 60)
    
    try:
        from app.video_engine import (
            VideoEngine, 
            VideoConfig, 
            VideoQuality, 
            VideoTemplate,
            video_engine
        )
        
        print("‚úÖ Video Engine carregado com sucesso")
        
        # Testar configura√ß√£o
        config = VideoConfig()
        print(f"‚úÖ Config de v√≠deo: {config.width}x{config.height} @ {config.fps}fps")
        
        # Testar inst√¢ncia global
        print(f"‚úÖ Inst√¢ncia global: {type(video_engine).__name__}")
        
        # Testar enums
        print(f"‚úÖ Qualidades dispon√≠veis: {[q.value for q in VideoQuality]}")
        print(f"‚úÖ Templates dispon√≠veis: {[t.value for t in VideoTemplate]}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no Video Engine: {e}")
        return False

def test_basic_functionality():
    """Testar funcionalidades b√°sicas"""
    print("\n‚öôÔ∏è TESTANDO FUNCIONALIDADES B√ÅSICAS")
    print("=" * 60)
    
    try:
        # Testar imports b√°sicos que devem estar dispon√≠veis
        from app.core.imports import (
            FASTAPI_AVAILABLE,
            SQLALCHEMY_AVAILABLE, 
            PYDANTIC_AVAILABLE,
            PIL_AVAILABLE,
            GTTS_AVAILABLE
        )
        
        print(f"‚úÖ FastAPI dispon√≠vel: {FASTAPI_AVAILABLE}")
        print(f"‚úÖ SQLAlchemy dispon√≠vel: {SQLALCHEMY_AVAILABLE}")
        print(f"‚úÖ Pydantic dispon√≠vel: {PYDANTIC_AVAILABLE}")
        print(f"‚úÖ PIL dispon√≠vel: {PIL_AVAILABLE}")
        print(f"‚úÖ gTTS dispon√≠vel: {GTTS_AVAILABLE}")
        
        # Testar funcionalidades b√°sicas se dispon√≠veis
        if FASTAPI_AVAILABLE:
            from app.core.imports import FastAPI, APIRouter
            print("‚úÖ FastAPI classes importadas com sucesso")
        
        if PIL_AVAILABLE:
            from app.core.imports import Image
            print("‚úÖ PIL Image importada com sucesso")
            
            # Criar uma imagem de teste
            img = Image.new('RGB', (100, 100), color='red')
            print("‚úÖ Imagem de teste criada com sucesso")
        
        if GTTS_AVAILABLE:
            from app.core.imports import gTTS
            print("‚úÖ gTTS importada com sucesso")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro nas funcionalidades b√°sicas: {e}")
        return False

def test_directory_structure():
    """Testar estrutura de diret√≥rios"""
    print("\nüìÅ TESTANDO ESTRUTURA DE DIRET√ìRIOS")
    print("=" * 60)
    
    try:
        # Diret√≥rios que devem existir
        required_dirs = [
            "app",
            "app/core", 
            "static/videos",
            "static/audios",
            "temp/videos",
            "temp/audios",
            "cache/videos",
            "cache/audios",
            "logs"
        ]
        
        for directory in required_dirs:
            path = Path(directory)
            if path.exists():
                print(f"‚úÖ {directory}")
            else:
                path.mkdir(parents=True, exist_ok=True)
                print(f"üìÅ {directory} (criado)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na estrutura de diret√≥rios: {e}")
        return False

def test_file_system():
    """Testar sistema de arquivos"""
    print("\nüíæ TESTANDO SISTEMA DE ARQUIVOS")
    print("=" * 60)
    
    try:
        # Arquivos principais que devem existir
        key_files = [
            "app/__init__.py",
            "app/core/imports.py",
            "app/unified_config.py", 
            "app/video_engine.py",
            "requirements_minimal_dev.txt"
        ]
        
        for file_path in key_files:
            path = Path(file_path)
            if path.exists():
                size = path.stat().st_size
                print(f"‚úÖ {file_path} ({size:,} bytes)")
            else:
                print(f"‚ùå {file_path} (n√£o encontrado)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no sistema de arquivos: {e}")
        return False

def main():
    """Executar todos os testes"""
    print("üß™ TESTE COMPLETO DO SISTEMA UNIFICADO TECNOCURSOS AI")
    print("=" * 70)
    print(f"Data: {os.popen('date /t').read().strip() if os.name == 'nt' else os.popen('date').read().strip()}")
    print()
    
    tests = [
        ("Imports Centralizados", test_imports_system),
        ("Configura√ß√£o Unificada", test_unified_config),
        ("Video Engine", test_video_engine),
        ("Funcionalidades B√°sicas", test_basic_functionality),
        ("Estrutura de Diret√≥rios", test_directory_structure),
        ("Sistema de Arquivos", test_file_system)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erro cr√≠tico no teste {test_name}: {e}")
            results.append((test_name, False))
    
    # Relat√≥rio final
    print("\nüìä RELAT√ìRIO FINAL")
    print("=" * 70)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{status:12} {test_name}")
    
    print(f"\nüéØ RESULTADO: {passed}/{total} testes passaram ({passed/total*100:.1f}%)")
    
    if passed == total:
        print("üéâ TODOS OS TESTES PASSARAM! Sistema unificado funcionando perfeitamente!")
        print("\n‚ú® PR√ìXIMOS PASSOS:")
        print("1. Instalar depend√™ncias opcionais: pip install moviepy numpy openai")
        print("2. Configurar chaves de API (OpenAI, D-ID, etc.)")
        print("3. Testar funcionalidades avan√ßadas")
        print("4. Executar em produ√ß√£o")
    else:
        failed = total - passed
        print(f"‚ö†Ô∏è {failed} teste(s) falharam. Verifique os erros acima.")
        print("\nüîß A√á√ïES RECOMENDADAS:")
        print("1. Instalar depend√™ncias faltantes")
        print("2. Verificar configura√ß√µes")
        print("3. Corrigir problemas identificados")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 