#!/usr/bin/env node

/**
 * Script de Automa√ß√£o de Corre√ß√µes de C√≥digo
 * Baseado nas melhores pr√°ticas de ESLint fix-on-save
 *
 * Refer√™ncias:
 * - https://tech.holidayextras.com/effortlessly-improve-typescript-code-with-vs-codes-eslint-autofix-813b36be7d54
 * - https://react-japan.dev/en/blog/eslint-fix-on-save
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîß Iniciando automa√ß√£o de corre√ß√µes de c√≥digo...');

// Fun√ß√£o para executar comandos com tratamento de erro
function runCommand(command, description, allowFailure = false) {
  try {
    console.log(`\nüìã ${description}...`);
    execSync(command, { stdio: 'inherit' });
    console.log(`‚úÖ ${description} conclu√≠do com sucesso`);
    return true;
  } catch (error) {
    if (allowFailure) {
      console.log(`‚ö†Ô∏è  ${description} falhou, mas continuando...`);
      return false;
    } else {
      console.error(`‚ùå Erro em ${description}:`, error.message);
      return false;
    }
  }
}

// Fun√ß√£o para verificar se arquivo existe
function fileExists(filePath) {
  return fs.existsSync(path.join(process.cwd(), filePath));
}

// Executar corre√ß√µes autom√°ticas
async function autoFix() {
  const steps = [
    {
      command: 'npm run typecheck',
      description: 'Verifica√ß√£o de tipos TypeScript',
      allowFailure: true,
    },
    {
      command: 'npm run lint',
      description: 'Corre√ß√£o autom√°tica com ESLint',
      allowFailure: true,
    },
    {
      command: 'npm run format',
      description: 'Formata√ß√£o com Prettier',
      allowFailure: false,
    },
  ];

  // Adicionar Stylelint se configurado
  if (fileExists('stylelint.config.js')) {
    steps.push({
      command: 'npm run stylelint',
      description: 'Corre√ß√£o autom√°tica de CSS com Stylelint',
      allowFailure: true,
    });
  }

  let successCount = 0;
  const totalSteps = steps.length;

  for (const step of steps) {
    if (runCommand(step.command, step.description, step.allowFailure)) {
      successCount++;
    }
  }

  console.log(
    `\nüìä Resumo: ${successCount}/${totalSteps} etapas conclu√≠das com sucesso`
  );

  if (successCount >= totalSteps - 1) {
    // Permitir 1 falha
    console.log('üéâ Automa√ß√£o de corre√ß√µes aplicada com sucesso!');
    console.log('\nüí° Pr√≥ximos passos recomendados:');
    console.log(
      '   1. Configure o VS Code para corre√ß√µes autom√°ticas ao salvar'
    );
    console.log('   2. Instale as extens√µes: ESLint, Prettier, Stylelint');
    console.log('   3. Configure "editor.codeActionsOnSave" no settings.json');
    console.log('   4. Configure "editor.formatOnSave": true');
    console.log('\nüìö Documenta√ß√£o completa: README_AUTOMACAO.md');
  } else {
    console.log('‚ö†Ô∏è  Algumas corre√ß√µes falharam. Verifique os erros acima.');
    console.log(
      'üí° Dica: Execute "npm run lint" para ver detalhes dos problemas.'
    );
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  autoFix();
}

module.exports = { autoFix, runCommand };
