#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Demonstra√ß√£o da Fun√ß√£o: create_video_from_text_and_audio

Este script demonstra como usar a nova fun√ß√£o implementada no utils.py
para criar v√≠deos a partir de texto e √°udio sincronizados.

Funcionalidades demonstradas:
- Cria√ß√£o de slide com texto formatado
- Sincroniza√ß√£o com √°udio
- Gera√ß√£o de v√≠deo MP4 final
- Valida√ß√£o de arquivos criados

Autor: TecnoCursos AI
Data: 17/01/2025
"""

import os
import sys
import time

# Adicionar o diret√≥rio app ao path para importar utils
sys.path.append('app')

try:
    from app.utils import create_video_from_text_and_audio
    print("‚úÖ Fun√ß√£o create_video_from_text_and_audio importada com sucesso!")
except ImportError as e:
    print(f"‚ùå Erro ao importar fun√ß√£o: {e}")
    sys.exit(1)

def demonstrar_funcao():
    """
    Demonstra o uso da fun√ß√£o create_video_from_text_and_audio
    com diferentes tipos de conte√∫do e configura√ß√µes.
    """
    print("üé¨ DEMONSTRA√á√ÉO: create_video_from_text_and_audio")
    print("=" * 70)
    
    # Lista de exemplos para testar
    exemplos = [
        {
            "nome": "Introdu√ß√£o T√©cnica",
            "texto": """
            üöÄ TecnoCursos AI - Plataforma de Ensino

            Bem-vindos √† nova era do aprendizado!
            
            ‚úì Intelig√™ncia Artificial aplicada
            ‚úì Conte√∫do personalizado
            ‚úì Metodologia inovadora
            
            Prepare-se para transformar seu futuro!
            """,
            "audio": "app/static/audios/intro_tecnica.wav",
            "saida": "videos/demo_intro_tecnica.mp4"
        },
        {
            "nome": "Curso Python",
            "texto": """
            üêç CURSO DE PYTHON

            M√≥dulo 1: Fundamentos
            
            ‚Ä¢ Vari√°veis e tipos de dados
            ‚Ä¢ Estruturas de controle
            ‚Ä¢ Fun√ß√µes e m√≥dulos
            ‚Ä¢ Programa√ß√£o orientada a objetos
            
            Vamos come√ßar a programar juntos!
            """,
            "audio": "app/static/audios/curso_python.wav",
            "saida": "videos/demo_curso_python.mp4"
        },
        {
            "nome": "Resumo Executivo",
            "texto": """
            üìä RELAT√ìRIO EXECUTIVO - Q1 2025

            Principais M√©tricas:
            ‚ñ≤ 150% crescimento em usu√°rios
            ‚ñ≤ 89% satisfa√ß√£o do cliente
            ‚ñ≤ 200+ cursos dispon√≠veis
            
            Meta para Q2: Expans√£o internacional
            """,
            "audio": "app/static/audios/relatorio_exec.wav",
            "saida": "videos/demo_relatorio_exec.mp4"
        }
    ]
    
    # Resultados dos testes
    resultados = []
    
    for i, exemplo in enumerate(exemplos, 1):
        print(f"\nüéØ TESTE {i}: {exemplo['nome']}")
        print("-" * 50)
        
        # Criar √°udio de teste se n√£o existir
        if not os.path.exists(exemplo['audio']):
            print(f"üéµ Criando √°udio de teste: {exemplo['nome']}")
            criar_audio_teste(exemplo['texto'][:100], exemplo['audio'])
        
        # Garantir que o diret√≥rio de sa√≠da existe
        os.makedirs(os.path.dirname(exemplo['saida']), exist_ok=True)
        
        # Executar a fun√ß√£o
        print(f"üöÄ Executando cria√ß√£o de v√≠deo...")
        inicio = time.time()
        
        resultado = create_video_from_text_and_audio(
            text=exemplo['texto'],
            audio_path=exemplo['audio'],
            output_path=exemplo['saida']
        )
        
        fim = time.time()
        tempo_execucao = fim - inicio
        
        # Validar resultado
        if resultado['success']:
            tamanho_mb = resultado['file_size'] / 1024 / 1024
            print(f"‚úÖ Sucesso! V√≠deo criado em {tempo_execucao:.2f}s")
            print(f"üìÅ Arquivo: {resultado['output_path']}")
            print(f"‚è±Ô∏è Dura√ß√£o: {resultado['duration']:.2f}s")
            print(f"üìê Resolu√ß√£o: {resultado['resolution']}")
            print(f"üíæ Tamanho: {tamanho_mb:.2f} MB")
            
            # Verificar se arquivo realmente existe
            if os.path.exists(resultado['output_path']):
                print(f"‚úÖ Arquivo confirmado no sistema")
            else:
                print(f"‚ö†Ô∏è Arquivo n√£o encontrado no caminho especificado")
        else:
            print(f"‚ùå Erro: {resultado['error']}")
        
        # Salvar resultado para resumo
        resultados.append({
            'nome': exemplo['nome'],
            'sucesso': resultado['success'],
            'tempo': tempo_execucao,
            'tamanho_mb': resultado['file_size'] / 1024 / 1024 if resultado['success'] else 0,
            'duracao': resultado['duration'] if resultado['success'] else 0
        })
    
    # Resumo final
    print("\n" + "=" * 70)
    print("üìä RESUMO DOS TESTES")
    print("=" * 70)
    
    sucessos = sum(1 for r in resultados if r['sucesso'])
    tempo_total = sum(r['tempo'] for r in resultados)
    tamanho_total = sum(r['tamanho_mb'] for r in resultados)
    
    print(f"‚úÖ Sucessos: {sucessos}/{len(resultados)}")
    print(f"‚è±Ô∏è Tempo total: {tempo_total:.2f}s")
    print(f"üíæ Tamanho total: {tamanho_total:.2f} MB")
    print(f"üìà Taxa de sucesso: {(sucessos/len(resultados)*100):.1f}%")
    
    # Detalhes por teste
    print(f"\nüìã DETALHES POR TESTE:")
    for resultado in resultados:
        status = "‚úÖ" if resultado['sucesso'] else "‚ùå"
        print(f"{status} {resultado['nome']: <20} | "
              f"{resultado['tempo']:5.2f}s | "
              f"{resultado['tamanho_mb']:5.2f}MB | "
              f"{resultado['duracao']:5.2f}s")
    
    return sucessos == len(resultados)


def criar_audio_teste(texto_base: str, caminho_audio: str):
    """
    Cria um arquivo de √°udio de teste usando gTTS.
    
    Args:
        texto_base (str): Texto para gerar o √°udio
        caminho_audio (str): Caminho onde salvar o √°udio
    """
    try:
        from gtts import gTTS
        
        # Garantir que o diret√≥rio existe
        os.makedirs(os.path.dirname(caminho_audio), exist_ok=True)
        
        # Criar √°udio
        tts = gTTS(text=texto_base, lang='pt', slow=False)
        tts.save(caminho_audio)
        
        print(f"‚úÖ √Åudio criado: {caminho_audio}")
        
    except ImportError:
        print("‚ö†Ô∏è gTTS n√£o dispon√≠vel - criando √°udio silencioso")
        criar_audio_silencioso(caminho_audio, duracao=5.0)
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao criar √°udio: {e}")
        criar_audio_silencioso(caminho_audio, duracao=5.0)


def criar_audio_silencioso(caminho_audio: str, duracao: float = 5.0):
    """
    Cria um arquivo de √°udio silencioso para teste.
    
    Args:
        caminho_audio (str): Caminho onde salvar
        duracao (float): Dura√ß√£o em segundos
    """
    try:
        import wave
        import numpy as np
        
        # Garantir que o diret√≥rio existe
        os.makedirs(os.path.dirname(caminho_audio), exist_ok=True)
        
        # Configura√ß√µes de √°udio
        sample_rate = 44100
        frames = int(duracao * sample_rate)
        
        # Gerar sil√™ncio (zeros)
        audio_data = np.zeros(frames, dtype=np.int16)
        
        # Salvar como WAV
        with wave.open(caminho_audio, 'w') as wav_file:
            wav_file.setnchannels(1)  # Mono
            wav_file.setsampwidth(2)  # 16-bit
            wav_file.setframerate(sample_rate)
            wav_file.writeframes(audio_data.tobytes())
        
        print(f"‚úÖ √Åudio silencioso criado: {caminho_audio} ({duracao}s)")
        
    except Exception as e:
        print(f"‚ùå Erro ao criar √°udio silencioso: {e}")


def validar_dependencias():
    """
    Valida se todas as depend√™ncias necess√°rias est√£o dispon√≠veis.
    """
    print("üîç VALIDANDO DEPEND√äNCIAS")
    print("-" * 30)
    
    dependencias = {
        'moviepy': False,
        'PIL': False,
        'numpy': False,
        'gtts': False
    }
    
    # MoviePy
    try:
        import moviepy
        dependencias['moviepy'] = True
        print("‚úÖ MoviePy: Dispon√≠vel")
    except ImportError:
        print("‚ùå MoviePy: N√£o dispon√≠vel - pip install moviepy")
    
    # PIL (Pillow)
    try:
        from PIL import Image
        dependencias['PIL'] = True
        print("‚úÖ PIL/Pillow: Dispon√≠vel")
    except ImportError:
        print("‚ùå PIL/Pillow: N√£o dispon√≠vel - pip install pillow")
    
    # NumPy
    try:
        import numpy
        dependencias['numpy'] = True
        print("‚úÖ NumPy: Dispon√≠vel")
    except ImportError:
        print("‚ùå NumPy: N√£o dispon√≠vel - pip install numpy")
    
    # gTTS (opcional)
    try:
        import gtts
        dependencias['gtts'] = True
        print("‚úÖ gTTS: Dispon√≠vel")
    except ImportError:
        print("‚ö†Ô∏è gTTS: N√£o dispon√≠vel (opcional) - pip install gtts")
    
    # Verificar depend√™ncias cr√≠ticas
    criticas = ['moviepy', 'PIL']
    criticas_ok = all(dependencias[dep] for dep in criticas)
    
    print(f"\nüéØ Depend√™ncias cr√≠ticas: {'‚úÖ OK' if criticas_ok else '‚ùå FALTANDO'}")
    
    if not criticas_ok:
        print("\nüí° INSTALAR DEPEND√äNCIAS:")
        print("pip install moviepy pillow numpy gtts")
        return False
    
    return True


if __name__ == '__main__':
    """
    Script principal de demonstra√ß√£o.
    """
    print("üé¨ DEMO: Criador de V√≠deo a partir de Texto e √Åudio")
    print("=" * 70)
    print("üìù Fun√ß√£o: create_video_from_text_and_audio()")
    print("üìç Localiza√ß√£o: app/utils.py")
    print("üéØ Objetivo: Criar v√≠deos sincronizados com slides de texto")
    print()
    
    # Validar depend√™ncias
    if not validar_dependencias():
        print("\n‚ùå Depend√™ncias insuficientes. Instale os pacotes necess√°rios.")
        sys.exit(1)
    
    # Executar demonstra√ß√£o
    try:
        sucesso = demonstrar_funcao()
        
        if sucesso:
            print("\nüéâ DEMONSTRA√á√ÉO CONCLU√çDA COM SUCESSO!")
            print("üîó Verifique os v√≠deos criados no diret√≥rio 'videos/'")
        else:
            print("\n‚ö†Ô∏è Alguns testes falharam. Verifique os logs acima.")
            
    except Exception as e:
        print(f"\n‚ùå Erro durante a demonstra√ß√£o: {e}")
        sys.exit(1)
    
    print("\n" + "=" * 70)
    print("üìö Para usar a fun√ß√£o em seu c√≥digo:")
    print()
    print("```python")
    print("from app.utils import create_video_from_text_and_audio")
    print()
    print("resultado = create_video_from_text_and_audio(")
    print("    text='Seu texto aqui',")
    print("    audio_path='caminho/para/audio.wav',")
    print("    output_path='video_saida.mp4'")
    print(")")
    print()
    print("if resultado['success']:")
    print("    print(f'V√≠deo criado: {resultado[\"output_path\"]}')")
    print("```")
    print("=" * 70) 