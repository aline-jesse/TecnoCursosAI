"""
Teste do Pipeline Completo com Autentica√ß√£o Autom√°tica
======================================================

Este script testa o endpoint /upload com autentica√ß√£o autom√°tica:
1. Registra usu√°rio de teste (se necess√°rio)
2. Faz login para obter token
3. Cria projeto de teste
4. Executa upload com pipeline completo
5. Valida resultado final

Autor: Sistema TecnoCursos AI
Data: Janeiro 2025
"""

import requests
import json
import time
import uuid
from pathlib import Path

# Configura√ß√µes do teste
BASE_URL = "http://localhost:8000"
TEST_PDF_PATH = "sample_test.pdf"

# Credenciais de teste
TEST_USER = {
    "email": f"teste_{uuid.uuid4().hex[:8]}@tecnocursos.ai",
    "password": "senha123456",
    "name": "Usu√°rio Teste Pipeline"
}

def register_and_login():
    """
    Registra usu√°rio de teste e faz login para obter token
    """
    print("üîê Configurando autentica√ß√£o...")
    
    try:
        # 1. Registrar usu√°rio
        print(f"üìù Registrando usu√°rio: {TEST_USER['email']}")
        register_data = {
            "full_name": TEST_USER["name"],
            "email": TEST_USER["email"],
            "password": TEST_USER["password"],
            "username": TEST_USER["email"]  # Usar email como username
        }
        register_response = requests.post(
            f"{BASE_URL}/auth/register",
            json=register_data,
            timeout=10
        )
        
        if register_response.status_code in [200, 201]:
            print("‚úÖ Usu√°rio registrado com sucesso")
        elif register_response.status_code == 400:
            print("‚ÑπÔ∏è Usu√°rio j√° existe, continuando...")
        else:
            print(f"‚ö†Ô∏è Status do registro: {register_response.status_code}")
        
        # 2. Fazer login
        print("üîë Fazendo login...")
        login_data = {
            "email": TEST_USER["email"],
            "password": TEST_USER["password"]
        }
        
        login_response = requests.post(
            f"{BASE_URL}/auth/login",
            json=login_data,  # JSON data
            timeout=10
        )
        
        if login_response.status_code == 200:
            token_data = login_response.json()
            access_token = token_data.get("access_token")
            if access_token:
                print("‚úÖ Login realizado com sucesso")
                return access_token
            else:
                print("‚ùå Token n√£o encontrado na resposta")
                return None
        else:
            print(f"‚ùå Erro no login: {login_response.status_code}")
            print(f"üìù Resposta: {login_response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro na autentica√ß√£o: {str(e)}")
        return None

def create_test_project(token):
    """
    Cria projeto de teste para upload
    """
    print("üìÅ Criando projeto de teste...")
    
    try:
        headers = {"Authorization": f"Bearer {token}"}
        project_data = {
            "name": f"Projeto Teste Pipeline {uuid.uuid4().hex[:8]}",
            "description": "Projeto para teste do pipeline completo"
        }
        
        response = requests.post(
            f"{BASE_URL}/projects",
            json=project_data,
            headers=headers,
            timeout=10
        )
        
        if response.status_code in [200, 201]:
            project = response.json()
            project_id = project.get("id")
            print(f"‚úÖ Projeto criado com ID: {project_id}")
            return project_id
        else:
            print(f"‚ùå Erro ao criar projeto: {response.status_code}")
            print(f"üìù Resposta: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro ao criar projeto: {str(e)}")
        return None

def test_upload_pipeline_authenticated(token, project_id):
    """
    Testa o pipeline completo de upload com autentica√ß√£o
    """
    print(f"üöÄ Iniciando teste do pipeline autenticado")
    print("="*60)
    
    # Verificar se arquivo de teste existe
    if not Path(TEST_PDF_PATH).exists():
        print(f"‚ùå Arquivo de teste n√£o encontrado: {TEST_PDF_PATH}")
        print("üìã Criando arquivo PDF simples para teste...")
        create_test_pdf()
    
    # Headers com token
    headers = {"Authorization": f"Bearer {token}"}
    
    # Dados do upload
    upload_data = {
        'project_id': project_id,
        'description': 'Teste autenticado do pipeline completo de gera√ß√£o de v√≠deo'
    }
    
    try:
        print(f"üì§ Fazendo upload autenticado do arquivo: {TEST_PDF_PATH}")
        print(f"üéØ Endpoint: {BASE_URL}/api/files/upload")
        
        # Fazer upload
        with open(TEST_PDF_PATH, 'rb') as file:
            files = {'file': (TEST_PDF_PATH, file, 'application/pdf')}
            
            start_time = time.time()
            response = requests.post(
                f"{BASE_URL}/api/files/upload",
                files=files,
                data=upload_data,
                headers=headers,
                timeout=300  # 5 minutos timeout
            )
            end_time = time.time()
        
        print(f"‚è±Ô∏è Tempo total de processamento: {end_time - start_time:.2f} segundos")
        print(f"üìä Status da resposta: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("\nüéâ PIPELINE EXECUTADO COM SUCESSO!")
            print("="*60)
            
            # Informa√ß√µes b√°sicas do arquivo
            print("üìÅ ARQUIVO CARREGADO:")
            print(f"   ‚Ä¢ ID: {result.get('id')}")
            print(f"   ‚Ä¢ UUID: {result.get('uuid')}")
            print(f"   ‚Ä¢ Nome: {result.get('filename')}")
            print(f"   ‚Ä¢ Tamanho: {result.get('file_size')} bytes")
            print(f"   ‚Ä¢ Tipo: {result.get('file_type')}")
            
            # Extra√ß√£o de texto
            text_extraction = result.get('text_extraction', {})
            print(f"\nüìÑ EXTRA√á√ÉO DE TEXTO:")
            print(f"   ‚Ä¢ Sucesso: {text_extraction.get('success')}")
            print(f"   ‚Ä¢ P√°ginas/Slides: {text_extraction.get('pages_count')}")
            print(f"   ‚Ä¢ Total de caracteres: {text_extraction.get('text_length')}")
            
            # Gera√ß√£o de √°udio
            audio_generation = result.get('audio_generation', {})
            print(f"\nüéµ GERA√á√ÉO DE √ÅUDIO:")
            print(f"   ‚Ä¢ Sucesso: {audio_generation.get('success')}")
            print(f"   ‚Ä¢ URL do √°udio: {audio_generation.get('audio_url')}")
            print(f"   ‚Ä¢ Nome do arquivo: {audio_generation.get('audio_filename')}")
            if audio_generation.get('error'):
                print(f"   ‚Ä¢ Erro: {audio_generation.get('error')}")
            
            # Gera√ß√£o de v√≠deo (FUNCIONALIDADE PRINCIPAL)
            video_generation = result.get('video_generation', {})
            print(f"\nüé¨ GERA√á√ÉO DE V√çDEO:")
            print(f"   ‚Ä¢ Sucesso: {video_generation.get('success')}")
            print(f"   ‚Ä¢ URL do v√≠deo: {video_generation.get('video_url')}")
            print(f"   ‚Ä¢ Nome do arquivo: {video_generation.get('video_filename')}")
            
            video_stats = video_generation.get('video_stats', {})
            if video_stats:
                print(f"   ‚Ä¢ Total de slides processados: {video_stats.get('total_slides')}")
                print(f"   ‚Ä¢ √Åudios gerados: {video_stats.get('audios_generated')}")
                print(f"   ‚Ä¢ V√≠deos criados: {video_stats.get('videos_created')}")
                print(f"   ‚Ä¢ Dura√ß√£o final: {video_stats.get('final_video_duration')} segundos")
                print(f"   ‚Ä¢ Tamanho do v√≠deo: {video_stats.get('final_video_size')} bytes")
                print(f"   ‚Ä¢ Tempo de processamento: {video_stats.get('processing_time')} segundos")
                print(f"   ‚Ä¢ ID do v√≠deo no banco: {video_stats.get('video_id')}")
                print(f"   ‚Ä¢ UUID do v√≠deo: {video_stats.get('video_uuid')}")
            
            if video_generation.get('error'):
                print(f"   ‚Ä¢ Erro: {video_generation.get('error')}")
            
            # Links de download
            download_links = result.get('download_links', {})
            print(f"\nüîó LINKS DE DOWNLOAD:")
            print(f"   ‚Ä¢ Arquivo original: {BASE_URL}{download_links.get('original_file')}")
            if download_links.get('audio_narration'):
                print(f"   ‚Ä¢ Narra√ß√£o em √°udio: {BASE_URL}{download_links.get('audio_narration')}")
            if download_links.get('final_video'):
                print(f"   ‚Ä¢ üéØ V√çDEO FINAL: {BASE_URL}{download_links.get('final_video')}")
            
            # Resumo do pipeline
            pipeline_summary = result.get('pipeline_summary', {})
            print(f"\nüìã RESUMO DO PIPELINE:")
            steps = pipeline_summary.get('steps_completed', [])
            for step in steps:
                print(f"   {step}")
            print(f"   ‚Ä¢ Tempo total: {pipeline_summary.get('total_processing_time')}")
            print(f"   ‚Ä¢ Resultado final: {pipeline_summary.get('final_output')}")
            
            # Status geral
            print(f"\n‚úÖ PROCESSAMENTO COMPLETO: {result.get('processing_completed')}")
            if result.get('processing_error'):
                print(f"‚ö†Ô∏è ERROS: {result.get('processing_error')}")
            
            # Testar download do v√≠deo final
            if download_links.get('final_video'):
                test_video_download(BASE_URL + download_links.get('final_video'), token)
            
            # Testar endpoints relacionados
            test_additional_endpoints(token, result.get('id'), video_stats.get('video_id'))
            
            return True
            
        else:
            print(f"‚ùå Erro na requisi√ß√£o: {response.status_code}")
            print(f"üìù Resposta: {response.text}")
            return False
            
    except requests.exceptions.Timeout:
        print("‚è∞ Timeout - O processamento est√° demorando mais que 5 minutos")
        return False
    except Exception as e:
        print(f"‚ùå Erro no teste: {str(e)}")
        return False

def test_video_download(video_url, token):
    """
    Testa o download do v√≠deo final gerado
    """
    print(f"\nüé¨ Testando download do v√≠deo final...")
    print(f"üîó URL: {video_url}")
    
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.head(video_url, headers=headers)
        if response.status_code == 200:
            file_size = response.headers.get('content-length')
            content_type = response.headers.get('content-type')
            print(f"‚úÖ V√≠deo dispon√≠vel para download")
            print(f"   ‚Ä¢ Tamanho: {file_size} bytes")
            print(f"   ‚Ä¢ Tipo: {content_type}")
        else:
            print(f"‚ùå V√≠deo n√£o est√° dispon√≠vel: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro ao testar download: {str(e)}")

def test_additional_endpoints(token, file_id, video_id):
    """
    Testa endpoints adicionais relacionados ao arquivo e v√≠deo
    """
    print(f"\nüîç Testando endpoints adicionais...")
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        # Testar listagem de arquivos
        response = requests.get(f"{BASE_URL}/api/files/", headers=headers)
        if response.status_code == 200:
            files = response.json()
            print(f"‚úÖ Listagem de arquivos: {len(files)} arquivos encontrados")
        
        # Testar detalhes do arquivo
        if file_id:
            response = requests.get(f"{BASE_URL}/api/files/{file_id}", headers=headers)
            if response.status_code == 200:
                print(f"‚úÖ Detalhes do arquivo ID {file_id} obtidos")
        
        # Testar listagem de √°udios
        response = requests.get(f"{BASE_URL}/api/files/audios", headers=headers)
        if response.status_code == 200:
            audios = response.json()
            print(f"‚úÖ Listagem de √°udios: encontrados")
        
        # Testar status do sistema
        response = requests.get(f"{BASE_URL}/api/status")
        if response.status_code == 200:
            status = response.json()
            print(f"‚úÖ Status do sistema: {status.get('status')}")
            
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao testar endpoints adicionais: {str(e)}")

def create_test_pdf():
    """
    Cria um PDF simples para teste se n√£o existir
    """
    try:
        from reportlab.pdfgen import canvas
        from reportlab.lib.pagesizes import letter
        
        print("üìÑ Criando PDF de teste...")
        
        c = canvas.Canvas(TEST_PDF_PATH, pagesize=letter)
        
        # P√°gina 1
        c.drawString(100, 750, "Slide 1: Introdu√ß√£o ao TecnoCursos AI")
        c.drawString(100, 720, "Este √© o primeiro slide da apresenta√ß√£o de teste do pipeline completo.")
        c.drawString(100, 690, "O sistema ir√° gerar automaticamente um v√≠deo profissional.")
        c.drawString(100, 660, "Funcionalidades: Upload, Extra√ß√£o, TTS, V√≠deo e Concatena√ß√£o.")
        c.showPage()
        
        # P√°gina 2
        c.drawString(100, 750, "Slide 2: Funcionalidades Principais")
        c.drawString(100, 720, "‚Ä¢ Upload de arquivos PDF e PPTX")
        c.drawString(100, 690, "‚Ä¢ Extra√ß√£o autom√°tica de texto por slides")
        c.drawString(100, 660, "‚Ä¢ Gera√ß√£o de narra√ß√£o com sistema TTS avan√ßado")
        c.drawString(100, 630, "‚Ä¢ Cria√ß√£o de v√≠deos individuais para cada slide")
        c.drawString(100, 600, "‚Ä¢ Concatena√ß√£o autom√°tica em apresenta√ß√£o final")
        c.drawString(100, 570, "‚Ä¢ Registro completo no banco de dados")
        c.showPage()
        
        # P√°gina 3
        c.drawString(100, 750, "Slide 3: Resultados e Benef√≠cios")
        c.drawString(100, 720, "‚úÖ Pipeline automatizado de ponta a ponta")
        c.drawString(100, 690, "‚úÖ V√≠deos profissionais em minutos")
        c.drawString(100, 660, "‚úÖ Links diretos para download")
        c.drawString(100, 630, "‚úÖ Integra√ß√£o completa com banco de dados")
        c.drawString(100, 600, "‚úÖ Sistema pronto para produ√ß√£o")
        c.showPage()
        
        # P√°gina 4
        c.drawString(100, 750, "Slide 4: Conclus√£o")
        c.drawString(100, 720, "üéâ Pipeline completo de automa√ß√£o implementado com sucesso!")
        c.drawString(100, 690, "üöÄ TecnoCursos AI est√° pronto para transformar")
        c.drawString(100, 660, "   qualquer apresenta√ß√£o em v√≠deo profissional.")
        c.drawString(100, 630, "üíº Obrigado por usar o TecnoCursos AI!")
        c.showPage()
        
        c.save()
        print(f"‚úÖ PDF de teste criado: {TEST_PDF_PATH}")
        
    except ImportError:
        print("‚ö†Ô∏è ReportLab n√£o est√° instalado. Criando arquivo texto simples...")
        with open("sample_test.txt", "w", encoding="utf-8") as f:
            f.write("Slide 1: Introdu√ß√£o ao TecnoCursos AI\n")
            f.write("Este √© um teste completo do pipeline automatizado.\n\n")
            f.write("Slide 2: Funcionalidades Principais\n") 
            f.write("O sistema processa arquivos e gera v√≠deos automaticamente.\n\n")
            f.write("Slide 3: Resultados\n")
            f.write("Pipeline de v√≠deo funcionando perfeitamente!\n\n")
            f.write("Slide 4: Conclus√£o\n")
            f.write("Sistema TecnoCursos AI est√° pronto para produ√ß√£o!\n")
        print(f"‚úÖ Arquivo de texto criado: sample_test.txt")

def main():
    """
    Fun√ß√£o principal do teste autenticado
    """
    print("üéØ TESTE COMPLETO DO PIPELINE COM AUTENTICA√á√ÉO")
    print("="*70)
    print(f"üìç Servidor: {BASE_URL}")
    print(f"üìÑ Arquivo de teste: {TEST_PDF_PATH}")
    print(f"üë§ Email de teste: {TEST_USER['email']}")
    print()
    
    # Verificar se servidor est√° rodando
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Servidor est√° rodando")
        else:
            print("‚ö†Ô∏è Servidor retornou c√≥digo inesperado")
    except:
        print("‚ùå Servidor n√£o est√° rodando. Inicie com: python main.py")
        return
    
    # Executar fluxo completo
    print("\n" + "="*70)
    
    # 1. Autentica√ß√£o
    token = register_and_login()
    if not token:
        print("‚ùå Falha na autentica√ß√£o")
        return
    
    # 2. Criar projeto
    project_id = create_test_project(token)
    if not project_id:
        print("‚ùå Falha ao criar projeto")
        return
    
    # 3. Testar pipeline
    success = test_upload_pipeline_authenticated(token, project_id)
    
    print("\n" + "="*70)
    if success:
        print("üéâ TESTE COMPLETO EXECUTADO COM SUCESSO!")
        print("‚úÖ Pipeline completo de upload ‚Üí v√≠deo funcionando!")
        print("üé¨ V√≠deo final gerado e dispon√≠vel para download!")
        print("üíæ Todas as informa√ß√µes salvas no banco de dados!")
        print("üîó Links diretos funcionando corretamente!")
        print("\nüöÄ SISTEMA TECNOCURSOS AI PRONTO PARA PRODU√á√ÉO!")
    else:
        print("‚ùå TESTE FALHOU!")
        print("üîß Verifique os logs do servidor para mais detalhes.")
    print("="*70)

if __name__ == "__main__":
    main() 