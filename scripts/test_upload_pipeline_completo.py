"""
Teste do Pipeline Completo de Upload com Gera√ß√£o de V√≠deo
========================================================

Este script testa o endpoint /upload modificado que executa o pipeline completo:
1. Upload de arquivo PDF/PPTX
2. Extra√ß√£o de texto por slides
3. Gera√ß√£o de √°udios individuais
4. Cria√ß√£o de v√≠deos para cada slide
5. Concatena√ß√£o em v√≠deo final
6. Registro no banco de dados

Autor: Sistema TecnoCursos AI
Data: Janeiro 2025
"""

import asyncio
import requests
import json
import time
from pathlib import Path

# Configura√ß√µes do teste
BASE_URL = "http://localhost:8000"
TEST_PDF_PATH = "sample_test.pdf"  # Arquivo de teste existente
PROJECT_ID = 1  # ID do projeto para teste

def test_upload_pipeline():
    """
    Testa o pipeline completo de upload com gera√ß√£o de v√≠deo
    """
    print("üöÄ Iniciando teste do pipeline completo de upload")
    print("="*60)
    
    # Verificar se arquivo de teste existe
    if not Path(TEST_PDF_PATH).exists():
        print(f"‚ùå Arquivo de teste n√£o encontrado: {TEST_PDF_PATH}")
        print("üìã Criando arquivo PDF simples para teste...")
        create_test_pdf()
    
    # Dados do upload
    upload_data = {
        'project_id': PROJECT_ID,
        'description': 'Teste do pipeline completo de gera√ß√£o de v√≠deo'
    }
    
    try:
        print(f"üì§ Fazendo upload do arquivo: {TEST_PDF_PATH}")
        print(f"üéØ Endpoint: {BASE_URL}/api/files/upload")
        
        # Fazer upload
        with open(TEST_PDF_PATH, 'rb') as file:
            files = {'file': (TEST_PDF_PATH, file, 'application/pdf')}
            
            start_time = time.time()
            response = requests.post(
                f"{BASE_URL}/api/files/upload",
                files=files,
                data=upload_data,
                timeout=300  # 5 minutos timeout
            )
            end_time = time.time()
        
        print(f"‚è±Ô∏è Tempo total de processamento: {end_time - start_time:.2f} segundos")
        print(f"üìä Status da resposta: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("\nüéâ PIPELINE EXECUTADO COM SUCESSO!")
            print("="*60)
            
            # Informa√ß√µes b√°sicas do arquivo
            print("üìÅ ARQUIVO CARREGADO:")
            print(f"   ‚Ä¢ ID: {result.get('id')}")
            print(f"   ‚Ä¢ UUID: {result.get('uuid')}")
            print(f"   ‚Ä¢ Nome: {result.get('filename')}")
            print(f"   ‚Ä¢ Tamanho: {result.get('file_size')} bytes")
            print(f"   ‚Ä¢ Tipo: {result.get('file_type')}")
            
            # Extra√ß√£o de texto
            text_extraction = result.get('text_extraction', {})
            print(f"\nüìÑ EXTRA√á√ÉO DE TEXTO:")
            print(f"   ‚Ä¢ Sucesso: {text_extraction.get('success')}")
            print(f"   ‚Ä¢ P√°ginas/Slides: {text_extraction.get('pages_count')}")
            print(f"   ‚Ä¢ Total de caracteres: {text_extraction.get('text_length')}")
            
            # Gera√ß√£o de √°udio
            audio_generation = result.get('audio_generation', {})
            print(f"\nüéµ GERA√á√ÉO DE √ÅUDIO:")
            print(f"   ‚Ä¢ Sucesso: {audio_generation.get('success')}")
            print(f"   ‚Ä¢ URL do √°udio: {audio_generation.get('audio_url')}")
            print(f"   ‚Ä¢ Nome do arquivo: {audio_generation.get('audio_filename')}")
            if audio_generation.get('error'):
                print(f"   ‚Ä¢ Erro: {audio_generation.get('error')}")
            
            # Gera√ß√£o de v√≠deo (NOVA FUNCIONALIDADE)
            video_generation = result.get('video_generation', {})
            print(f"\nüé¨ GERA√á√ÉO DE V√çDEO:")
            print(f"   ‚Ä¢ Sucesso: {video_generation.get('success')}")
            print(f"   ‚Ä¢ URL do v√≠deo: {video_generation.get('video_url')}")
            print(f"   ‚Ä¢ Nome do arquivo: {video_generation.get('video_filename')}")
            
            video_stats = video_generation.get('video_stats', {})
            if video_stats:
                print(f"   ‚Ä¢ Total de slides processados: {video_stats.get('total_slides')}")
                print(f"   ‚Ä¢ √Åudios gerados: {video_stats.get('audios_generated')}")
                print(f"   ‚Ä¢ V√≠deos criados: {video_stats.get('videos_created')}")
                print(f"   ‚Ä¢ Dura√ß√£o final: {video_stats.get('final_video_duration')} segundos")
                print(f"   ‚Ä¢ Tamanho do v√≠deo: {video_stats.get('final_video_size')} bytes")
                print(f"   ‚Ä¢ Tempo de processamento: {video_stats.get('processing_time')} segundos")
                print(f"   ‚Ä¢ ID do v√≠deo no banco: {video_stats.get('video_id')}")
            
            if video_generation.get('error'):
                print(f"   ‚Ä¢ Erro: {video_generation.get('error')}")
            
            # Links de download
            download_links = result.get('download_links', {})
            print(f"\nüîó LINKS DE DOWNLOAD:")
            print(f"   ‚Ä¢ Arquivo original: {BASE_URL}{download_links.get('original_file')}")
            if download_links.get('audio_narration'):
                print(f"   ‚Ä¢ Narra√ß√£o em √°udio: {BASE_URL}{download_links.get('audio_narration')}")
            if download_links.get('final_video'):
                print(f"   ‚Ä¢ üéØ V√çDEO FINAL: {BASE_URL}{download_links.get('final_video')}")
            
            # Resumo do pipeline
            pipeline_summary = result.get('pipeline_summary', {})
            print(f"\nüìã RESUMO DO PIPELINE:")
            steps = pipeline_summary.get('steps_completed', [])
            for step in steps:
                print(f"   {step}")
            print(f"   ‚Ä¢ Tempo total: {pipeline_summary.get('total_processing_time')}")
            print(f"   ‚Ä¢ Resultado final: {pipeline_summary.get('final_output')}")
            
            # Status geral
            print(f"\n‚úÖ PROCESSAMENTO COMPLETO: {result.get('processing_completed')}")
            if result.get('processing_error'):
                print(f"‚ö†Ô∏è ERROS: {result.get('processing_error')}")
            
            # Testar download do v√≠deo final
            if download_links.get('final_video'):
                test_video_download(BASE_URL + download_links.get('final_video'))
            
            return True
            
        else:
            print(f"‚ùå Erro na requisi√ß√£o: {response.status_code}")
            print(f"üìù Resposta: {response.text}")
            return False
            
    except requests.exceptions.Timeout:
        print("‚è∞ Timeout - O processamento est√° demorando mais que 5 minutos")
        return False
    except Exception as e:
        print(f"‚ùå Erro no teste: {str(e)}")
        return False

def test_video_download(video_url):
    """
    Testa o download do v√≠deo final gerado
    """
    print(f"\nüé¨ Testando download do v√≠deo final...")
    print(f"üîó URL: {video_url}")
    
    try:
        response = requests.head(video_url)
        if response.status_code == 200:
            file_size = response.headers.get('content-length')
            content_type = response.headers.get('content-type')
            print(f"‚úÖ V√≠deo dispon√≠vel para download")
            print(f"   ‚Ä¢ Tamanho: {file_size} bytes")
            print(f"   ‚Ä¢ Tipo: {content_type}")
        else:
            print(f"‚ùå V√≠deo n√£o est√° dispon√≠vel: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro ao testar download: {str(e)}")

def create_test_pdf():
    """
    Cria um PDF simples para teste se n√£o existir
    """
    try:
        from reportlab.pdfgen import canvas
        from reportlab.lib.pagesizes import letter
        
        print("üìÑ Criando PDF de teste...")
        
        c = canvas.Canvas(TEST_PDF_PATH, pagesize=letter)
        
        # P√°gina 1
        c.drawString(100, 750, "Slide 1: Introdu√ß√£o ao TecnoCursos AI")
        c.drawString(100, 720, "Este √© o primeiro slide da apresenta√ß√£o de teste.")
        c.drawString(100, 690, "O sistema ir√° gerar um v√≠deo automaticamente.")
        c.showPage()
        
        # P√°gina 2
        c.drawString(100, 750, "Slide 2: Funcionalidades Principais")
        c.drawString(100, 720, "‚Ä¢ Upload de arquivos PDF e PPTX")
        c.drawString(100, 690, "‚Ä¢ Extra√ß√£o autom√°tica de texto")
        c.drawString(100, 660, "‚Ä¢ Gera√ß√£o de narra√ß√£o com TTS")
        c.drawString(100, 630, "‚Ä¢ Cria√ß√£o de v√≠deos individuais")
        c.drawString(100, 600, "‚Ä¢ Concatena√ß√£o em v√≠deo final")
        c.showPage()
        
        # P√°gina 3
        c.drawString(100, 750, "Slide 3: Conclus√£o")
        c.drawString(100, 720, "Pipeline completo de automa√ß√£o implementado!")
        c.drawString(100, 690, "Obrigado por usar o TecnoCursos AI.")
        c.showPage()
        
        c.save()
        print(f"‚úÖ PDF de teste criado: {TEST_PDF_PATH}")
        
    except ImportError:
        print("‚ö†Ô∏è ReportLab n√£o est√° instalado. Criando arquivo de texto simples...")
        with open("sample_test.txt", "w", encoding="utf-8") as f:
            f.write("Slide 1: Introdu√ß√£o\n")
            f.write("Este √© um teste do sistema TecnoCursos AI.\n\n")
            f.write("Slide 2: Funcionalidades\n")
            f.write("O sistema processa arquivos automaticamente.\n\n")
            f.write("Slide 3: Conclus√£o\n")
            f.write("Pipeline de v√≠deo implementado com sucesso!\n")
        print(f"‚úÖ Arquivo de texto criado: sample_test.txt")

def main():
    """
    Fun√ß√£o principal do teste
    """
    print("üéØ TESTE DO PIPELINE COMPLETO DE UPLOAD E GERA√á√ÉO DE V√çDEO")
    print("="*70)
    print(f"üìç Servidor: {BASE_URL}")
    print(f"üìÑ Arquivo de teste: {TEST_PDF_PATH}")
    print(f"üìÅ Projeto ID: {PROJECT_ID}")
    print()
    
    # Verificar se servidor est√° rodando
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Servidor est√° rodando")
        else:
            print("‚ö†Ô∏è Servidor retornou c√≥digo inesperado")
    except:
        print("‚ùå Servidor n√£o est√° rodando. Inicie com: python main.py")
        return
    
    # Executar teste
    success = test_upload_pipeline()
    
    print("\n" + "="*70)
    if success:
        print("üéâ TESTE CONCLU√çDO COM SUCESSO!")
        print("‚úÖ Pipeline completo de upload ‚Üí v√≠deo funcionando!")
    else:
        print("‚ùå TESTE FALHOU!")
        print("üîß Verifique os logs do servidor para mais detalhes.")
    print("="*70)

if __name__ == "__main__":
    main() 