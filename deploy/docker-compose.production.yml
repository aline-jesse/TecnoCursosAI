version: '3.8'

# ============================================================================
# DOCKER COMPOSE PRODUÇÃO - TECNOCURSOS AI
# ============================================================================
# 
# Configuração otimizada para ambiente de produção seguindo
# as melhores práticas de deployment FastAPI:
#
# - Container multi-stage builds
# - Health checks robustos
# - Resource limits
# - Security hardening
# - Load balancing
# - Monitoring integrado
# - Backup automatizado
# - SSL/TLS termination
#
# Autor: TecnoCursos AI System
# Data: 17/01/2025
# ============================================================================

services:
  # ============================================================================
  # NGINX - REVERSE PROXY E LOAD BALANCER
  # ============================================================================
  nginx:
    image: nginx:1.25-alpine
    container_name: tecnocursos-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
      - static_files:/var/www/static:ro
    depends_on:
      - fastapi-app-1
      - fastapi-app-2
    networks:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tecnocursos.rule=Host(`tecnocursos.ai`)"
      - "traefik.http.routers.tecnocursos.tls=true"

  # ============================================================================
  # FASTAPI APPLICATION - MÚLTIPLAS INSTÂNCIAS
  # ============================================================================
  fastapi-app-1:
    build:
      context: ..
      dockerfile: docker/Dockerfile.production
      target: production
    container_name: tecnocursos-app-1
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=mysql+pymysql://tecnocursos:${MYSQL_PASSWORD}@mysql:3306/tecnocursos_production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AZURE_SPEECH_KEY=${AZURE_SPEECH_KEY}
      - AZURE_SPEECH_REGION=${AZURE_SPEECH_REGION}
      - D_ID_API_KEY=${D_ID_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
      - WORKER_COUNT=4
      - MAX_WORKERS=8
    volumes:
      - static_files:/app/app/static
      - upload_files:/app/uploads
      - video_files:/app/app/static/videos
      - logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  fastapi-app-2:
    build:
      context: ..
      dockerfile: docker/Dockerfile.production
      target: production
    container_name: tecnocursos-app-2
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=mysql+pymysql://tecnocursos:${MYSQL_PASSWORD}@mysql:3306/tecnocursos_production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AZURE_SPEECH_KEY=${AZURE_SPEECH_KEY}
      - AZURE_SPEECH_REGION=${AZURE_SPEECH_REGION}
      - D_ID_API_KEY=${D_ID_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
      - WORKER_COUNT=4
      - MAX_WORKERS=8
    volumes:
      - static_files:/app/app/static
      - upload_files:/app/uploads
      - video_files:/app/app/static/videos
      - logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # ============================================================================
  # MYSQL DATABASE - PRIMARY
  # ============================================================================
  mysql:
    image: mysql:8.0
    container_name: tecnocursos-mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=tecnocursos_production
      - MYSQL_USER=tecnocursos
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_CHARSET=utf8mb4
      - MYSQL_COLLATION=utf8mb4_unicode_ci
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/conf.d:/etc/mysql/conf.d:ro
      - ./mysql/init:/docker-entrypoint-initdb.d:ro
      - mysql_logs:/var/log/mysql
    ports:
      - "3306:3306"
    networks:
      - backend
    command: >
      --default-authentication-plugin=mysql_native_password
      --innodb-buffer-pool-size=2G
      --innodb-log-file-size=256M
      --innodb-flush-log-at-trx-commit=1
      --sync-binlog=1
      --max-connections=500
      --query-cache-type=1
      --query-cache-size=256M
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # ============================================================================
  # REDIS CACHE
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: tecnocursos-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # ============================================================================
  # CELERY WORKER - BACKGROUND TASKS
  # ============================================================================
  celery-worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile.production
      target: production
    container_name: tecnocursos-celery
    restart: unless-stopped
    command: celery -A app.celery_app worker --loglevel=info --concurrency=4
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=mysql+pymysql://tecnocursos:${MYSQL_PASSWORD}@mysql:3306/tecnocursos_production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AZURE_SPEECH_KEY=${AZURE_SPEECH_KEY}
      - D_ID_API_KEY=${D_ID_API_KEY}
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - static_files:/app/app/static
      - upload_files:/app/uploads
      - video_files:/app/app/static/videos
      - logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    healthcheck:
      test: ["CMD", "celery", "-A", "app.celery_app", "inspect", "ping"]
      interval: 60s
      timeout: 20s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # ============================================================================
  # FLOWER - CELERY MONITORING
  # ============================================================================
  flower:
    build:
      context: ..
      dockerfile: docker/Dockerfile.production
      target: production
    container_name: tecnocursos-flower
    restart: unless-stopped
    command: celery -A app.celery_app flower --port=5555
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - FLOWER_BASIC_AUTH=${FLOWER_USERNAME}:${FLOWER_PASSWORD}
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery-worker
    networks:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555"]
      interval: 60s
      timeout: 10s
      retries: 3

  # ============================================================================
  # MONITORING E OBSERVABILIDADE
  # ============================================================================
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: tecnocursos-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:10.0.0
    container_name: tecnocursos-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - backend
      - frontend
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/login || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # BACKUP E RECOVERY
  # ============================================================================
  mysql-backup:
    image: mysql:8.0
    container_name: tecnocursos-backup
    restart: "no"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    volumes:
      - mysql_backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - mysql
    networks:
      - backend
    command: |
      sh -c '
        while true; do
          sleep 86400  # 24 horas
          mysqldump -h mysql -u root -p$${MYSQL_ROOT_PASSWORD} tecnocursos_production > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          find /backups -name "backup_*.sql" -mtime +7 -delete
        done
      '

  # ============================================================================
  # PORTAINER - CONTAINER MANAGEMENT
  # ============================================================================
  portainer:
    image: portainer/portainer-ce:2.19.0
    container_name: tecnocursos-portainer
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - "9000:9000"
    networks:
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9000"]
      interval: 60s
      timeout: 10s
      retries: 3

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  mysql_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/tecnocursos/data/mysql
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/tecnocursos/data/redis
  
  static_files:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/tecnocursos/static
  
  upload_files:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/tecnocursos/uploads
  
  video_files:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/tecnocursos/videos
  
  logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/tecnocursos/logs
  
  mysql_logs:
    driver: local
  
  mysql_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/tecnocursos/backups
  
  prometheus_data:
    driver: local
  
  grafana_data:
    driver: local
  
  portainer_data:
    driver: local 