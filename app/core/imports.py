#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîó IMPORTS CENTRALIZADOS - TECNOCURSOS AI
========================================

M√≥dulo que centraliza e padroniza todas as importa√ß√µes do sistema,
garantindo consist√™ncia e facilitando o gerenciamento de depend√™ncias.

Funcionalidades:
- Imports condicionais com fallbacks
- Verifica√ß√£o de disponibilidade de bibliotecas
- Mensagens de erro padronizadas
- Imports organizados por categoria
- Aliases padronizados

Autor: TecnoCursos AI System
Data: 17/01/2025
"""

import sys
import logging
from typing import Dict, List, Optional, Any, Union, Tuple
from pathlib import Path

# === CONFIGURA√á√ÉO DE LOGGING ===
logger = logging.getLogger(__name__)

# === DICION√ÅRIO DE DISPONIBILIDADE ===
DEPENDENCIES_STATUS = {}

# === FUN√á√ÉO AUXILIAR PARA IMPORTS CONDICIONAIS ===

def safe_import(module_name: str, package_name: str = None, error_msg: str = None):
    """
    Importar m√≥dulo de forma segura com tratamento de erro
    
    Args:
        module_name: Nome do m√≥dulo a importar
        package_name: Nome do pacote para instala√ß√£o (se diferente do m√≥dulo)
        error_msg: Mensagem de erro personalizada
        
    Returns:
        tuple: (module_object, is_available)
    """
    try:
        if '.' in module_name:
            # Import de subm√≥dulo
            parts = module_name.split('.')
            module = __import__(module_name, fromlist=[parts[-1]])
        else:
            module = __import__(module_name)
        
        DEPENDENCIES_STATUS[module_name] = True
        return module, True
        
    except ImportError as e:
        DEPENDENCIES_STATUS[module_name] = False
        
        package_name = package_name or module_name
        default_msg = f"‚ö†Ô∏è {module_name} n√£o dispon√≠vel - instale: pip install {package_name}"
        logger.warning(error_msg or default_msg)
        
        return None, False

# === IMPORTS B√ÅSICOS DO SISTEMA ===

# Sistema e Path
import os
import uuid
import time
import json
import asyncio
import threading
from datetime import datetime, timedelta
from pathlib import Path
from dataclasses import dataclass, field
from enum import Enum
from typing import Dict, List, Optional, Any, Union, Tuple, Callable

# === IMPORTS DE WEB FRAMEWORK ===

# FastAPI e depend√™ncias
fastapi_module, FASTAPI_AVAILABLE = safe_import(
    'fastapi', 'fastapi', 
    "‚ö†Ô∏è FastAPI n√£o dispon√≠vel - instale: pip install fastapi uvicorn"
)

if FASTAPI_AVAILABLE:
    from fastapi import (
        FastAPI, APIRouter, HTTPException, Depends, Request, Response,
        BackgroundTasks, File, UploadFile, Form, Query, Body, Header,
        Cookie, Path as FastAPIPath, status
    )
    from fastapi.responses import (
        JSONResponse, HTMLResponse, FileResponse, RedirectResponse
    )
    from fastapi.staticfiles import StaticFiles
    from fastapi.middleware.cors import CORSMiddleware
    from fastapi.middleware.gzip import GZipMiddleware
    from fastapi.templating import Jinja2Templates
    from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
else:
    # Placeholders para quando FastAPI n√£o estiver dispon√≠vel
    FastAPI = None
    APIRouter = None
    HTTPException = None

# === IMPORTS DE BANCO DE DADOS ===

sqlalchemy_module, SQLALCHEMY_AVAILABLE = safe_import(
    'sqlalchemy', 'sqlalchemy',
    "‚ö†Ô∏è SQLAlchemy n√£o dispon√≠vel - instale: pip install sqlalchemy"
)

if SQLALCHEMY_AVAILABLE:
    from sqlalchemy import (
        create_engine, Column, Integer, String, Text, Boolean, DateTime,
        ForeignKey, Table, MetaData, func, and_, or_, desc, asc
    )
    from sqlalchemy.ext.declarative import declarative_base
    from sqlalchemy.orm import sessionmaker, Session, relationship
    from sqlalchemy.pool import StaticPool
else:
    # Placeholders
    Column = None
    Integer = None
    String = None

# === IMPORTS DE VALIDA√á√ÉO ===

pydantic_module, PYDANTIC_AVAILABLE = safe_import(
    'pydantic', 'pydantic',
    "‚ö†Ô∏è Pydantic n√£o dispon√≠vel - instale: pip install pydantic"
)

if PYDANTIC_AVAILABLE:
    from pydantic import BaseModel, Field, validator, root_validator
else:
    BaseModel = None

# === IMPORTS DE PROCESSAMENTO DE V√çDEO ===

moviepy_module, MOVIEPY_AVAILABLE = safe_import(
    'moviepy.editor', 'moviepy',
    "‚ö†Ô∏è MoviePy n√£o dispon√≠vel - instale: pip install moviepy"
)

if MOVIEPY_AVAILABLE:
    from moviepy.editor import (
        VideoFileClip, AudioFileClip, ImageClip, TextClip, ColorClip,
        CompositeVideoClip, concatenate_videoclips, fadein, fadeout, resize
    )
    from moviepy.config import check_moviepy
    from moviepy.video.fx import resize as fx_resize
    from moviepy.audio.fx import audio_fadein, audio_fadeout
else:
    # Placeholders
    VideoFileClip = None
    AudioFileClip = None
    ImageClip = None

# === IMPORTS DE PROCESSAMENTO DE IMAGEM ===

pil_module, PIL_AVAILABLE = safe_import(
    'PIL', 'pillow',
    "‚ö†Ô∏è PIL n√£o dispon√≠vel - instale: pip install pillow"
)

if PIL_AVAILABLE:
    from PIL import Image, ImageDraw, ImageFont, ImageFilter, ImageEnhance
    from PIL.ExifTags import TAGS as EXIF_TAGS
else:
    # Placeholders
    Image = None
    ImageDraw = None

# === IMPORTS CIENT√çFICOS ===

numpy_module, NUMPY_AVAILABLE = safe_import(
    'numpy', 'numpy',
    "‚ö†Ô∏è NumPy n√£o dispon√≠vel - instale: pip install numpy"
)

if NUMPY_AVAILABLE:
    import numpy as np
else:
    np = None

pandas_module, PANDAS_AVAILABLE = safe_import(
    'pandas', 'pandas',
    "‚ö†Ô∏è Pandas n√£o dispon√≠vel - instale: pip install pandas"
)

if PANDAS_AVAILABLE:
    import pandas as pd
else:
    pd = None

# === IMPORTS DE PROCESSAMENTO DE DOCUMENTOS ===

# PyPDF2
pypdf2_module, PYPDF2_AVAILABLE = safe_import(
    'PyPDF2', 'PyPDF2',
    "‚ö†Ô∏è PyPDF2 n√£o dispon√≠vel - instale: pip install PyPDF2"
)

if PYPDF2_AVAILABLE:
    from PyPDF2 import PdfReader, PdfWriter
else:
    PdfReader = None

# Python-PPTX
python_pptx_module, PYTHON_PPTX_AVAILABLE = safe_import(
    'pptx', 'python-pptx',
    "‚ö†Ô∏è python-pptx n√£o dispon√≠vel - instale: pip install python-pptx"
)

if PYTHON_PPTX_AVAILABLE:
    from pptx import Presentation
    from pptx.util import Inches, Pt
else:
    Presentation = None

# Python-DOCX
python_docx_module, PYTHON_DOCX_AVAILABLE = safe_import(
    'docx', 'python-docx',
    "‚ö†Ô∏è python-docx n√£o dispon√≠vel - instale: pip install python-docx"
)

if PYTHON_DOCX_AVAILABLE:
    from docx import Document as DocxDocument
else:
    DocxDocument = None

# PyMuPDF (fitz)
fitz_module, FITZ_AVAILABLE = safe_import(
    'fitz', 'pymupdf',
    "‚ö†Ô∏è PyMuPDF n√£o dispon√≠vel - instale: pip install pymupdf"
)

if FITZ_AVAILABLE:
    import fitz
else:
    fitz = None

# === IMPORTS DE TTS (TEXT-TO-SPEECH) ===

# Google TTS
gtts_module, GTTS_AVAILABLE = safe_import(
    'gtts', 'gtts',
    "‚ö†Ô∏è gTTS n√£o dispon√≠vel - instale: pip install gtts"
)

if GTTS_AVAILABLE:
    from gtts import gTTS
else:
    gTTS = None

# === IMPORTS DE IA ===

# OpenAI
openai_module, OPENAI_AVAILABLE = safe_import(
    'openai', 'openai',
    "‚ö†Ô∏è OpenAI n√£o dispon√≠vel - instale: pip install openai"
)

if OPENAI_AVAILABLE:
    import openai
    from openai import AsyncOpenAI
else:
    openai = None
    AsyncOpenAI = None

# Transformers (Hugging Face)
transformers_module, TRANSFORMERS_AVAILABLE = safe_import(
    'transformers', 'transformers',
    "‚ö†Ô∏è Transformers n√£o dispon√≠vel - instale: pip install transformers"
)

if TRANSFORMERS_AVAILABLE:
    from transformers import pipeline, AutoModel, AutoTokenizer
else:
    pipeline = None

# === IMPORTS DE AUTENTICA√á√ÉO E SEGURAN√áA ===

# PyJWT
jwt_module, JWT_AVAILABLE = safe_import(
    'jwt', 'pyjwt',
    "‚ö†Ô∏è PyJWT n√£o dispon√≠vel - instale: pip install pyjwt"
)

if JWT_AVAILABLE:
    import jwt
else:
    jwt = None

# Passlib
passlib_module, PASSLIB_AVAILABLE = safe_import(
    'passlib.context', 'passlib',
    "‚ö†Ô∏è Passlib n√£o dispon√≠vel - instale: pip install passlib"
)

if PASSLIB_AVAILABLE:
    from passlib.context import CryptContext
    from passlib.hash import bcrypt
else:
    CryptContext = None

# Cryptography
cryptography_module, CRYPTOGRAPHY_AVAILABLE = safe_import(
    'cryptography.fernet', 'cryptography',
    "‚ö†Ô∏è Cryptography n√£o dispon√≠vel - instale: pip install cryptography"
)

if CRYPTOGRAPHY_AVAILABLE:
    from cryptography.fernet import Fernet
    from cryptography.hazmat.primitives import hashes, serialization
else:
    Fernet = None

# === IMPORTS DE CACHE E REDIS ===

redis_module, REDIS_AVAILABLE = safe_import(
    'redis', 'redis',
    "‚ö†Ô∏è Redis n√£o dispon√≠vel - instale: pip install redis"
)

if REDIS_AVAILABLE:
    import redis
    redis_async_module, REDIS_ASYNC_AVAILABLE = safe_import(
        'redis.asyncio', 'redis[asyncio]',
        "‚ö†Ô∏è Redis async n√£o dispon√≠vel"
    )
    if REDIS_ASYNC_AVAILABLE:
        import redis.asyncio as redis_async
    else:
        redis_async = None
else:
    redis = None
    redis_async = None

# === IMPORTS DE HTTP ===

# Requests
requests_module, REQUESTS_AVAILABLE = safe_import(
    'requests', 'requests',
    "‚ö†Ô∏è Requests n√£o dispon√≠vel - instale: pip install requests"
)

if REQUESTS_AVAILABLE:
    import requests
else:
    requests = None

# HTTPX
httpx_module, HTTPX_AVAILABLE = safe_import(
    'httpx', 'httpx',
    "‚ö†Ô∏è HTTPX n√£o dispon√≠vel - instale: pip install httpx"
)

if HTTPX_AVAILABLE:
    import httpx
else:
    httpx = None

# AioHTTP
aiohttp_module, AIOHTTP_AVAILABLE = safe_import(
    'aiohttp', 'aiohttp',
    "‚ö†Ô∏è AioHTTP n√£o dispon√≠vel - instale: pip install aiohttp"
)

if AIOHTTP_AVAILABLE:
    import aiohttp
else:
    aiohttp = None

# === IMPORTS DE EMAIL ===

# SendGrid
sendgrid_module, SENDGRID_AVAILABLE = safe_import(
    'sendgrid', 'sendgrid',
    "‚ö†Ô∏è SendGrid n√£o dispon√≠vel - instale: pip install sendgrid"
)

if SENDGRID_AVAILABLE:
    import sendgrid
    from sendgrid.helpers.mail import Mail
else:
    sendgrid = None

# === IMPORTS DE MONITORAMENTO ===

# PSUtil
psutil_module, PSUTIL_AVAILABLE = safe_import(
    'psutil', 'psutil',
    "‚ö†Ô∏è PSUtil n√£o dispon√≠vel - instale: pip install psutil"
)

if PSUTIL_AVAILABLE:
    import psutil
else:
    psutil = None

# === IMPORTS DE TESTES ===

pytest_module, PYTEST_AVAILABLE = safe_import(
    'pytest', 'pytest',
    "‚ö†Ô∏è Pytest n√£o dispon√≠vel - instale: pip install pytest"
)

if PYTEST_AVAILABLE:
    import pytest
else:
    pytest = None

# === DICION√ÅRIO DE DISPONIBILIDADE CONSOLIDADO ===

AVAILABLE_MODULES = {
    # Web Framework
    'fastapi': FASTAPI_AVAILABLE,
    
    # Banco de Dados
    'sqlalchemy': SQLALCHEMY_AVAILABLE,
    'pydantic': PYDANTIC_AVAILABLE,
    
    # Processamento de M√≠dia
    'moviepy': MOVIEPY_AVAILABLE,
    'pil': PIL_AVAILABLE,
    'numpy': NUMPY_AVAILABLE,
    'pandas': PANDAS_AVAILABLE,
    
    # Processamento de Documentos
    'pypdf2': PYPDF2_AVAILABLE,
    'python_pptx': PYTHON_PPTX_AVAILABLE,
    'python_docx': PYTHON_DOCX_AVAILABLE,
    'fitz': FITZ_AVAILABLE,
    
    # TTS e IA
    'gtts': GTTS_AVAILABLE,
    'openai': OPENAI_AVAILABLE,
    'transformers': TRANSFORMERS_AVAILABLE,
    
    # Seguran√ßa
    'jwt': JWT_AVAILABLE,
    'passlib': PASSLIB_AVAILABLE,
    'cryptography': CRYPTOGRAPHY_AVAILABLE,
    
    # Cache e HTTP
    'redis': REDIS_AVAILABLE,
    'requests': REQUESTS_AVAILABLE,
    'httpx': HTTPX_AVAILABLE,
    'aiohttp': AIOHTTP_AVAILABLE,
    
    # Email e Monitoramento
    'sendgrid': SENDGRID_AVAILABLE,
    'psutil': PSUTIL_AVAILABLE,
    
    # Testes
    'pytest': PYTEST_AVAILABLE
}

# === FUN√á√ïES DE VERIFICA√á√ÉO ===

def check_dependencies() -> Dict[str, bool]:
    """Verificar status de todas as depend√™ncias"""
    return AVAILABLE_MODULES.copy()

def check_required_dependencies(required: List[str]) -> Dict[str, bool]:
    """Verificar depend√™ncias obrigat√≥rias"""
    return {dep: AVAILABLE_MODULES.get(dep, False) for dep in required}

def get_missing_dependencies(required: List[str]) -> List[str]:
    """Obter lista de depend√™ncias faltantes"""
    return [dep for dep in required if not AVAILABLE_MODULES.get(dep, False)]

def check_video_dependencies() -> bool:
    """Verificar se depend√™ncias de v√≠deo est√£o dispon√≠veis"""
    return MOVIEPY_AVAILABLE and PIL_AVAILABLE and NUMPY_AVAILABLE

def check_ai_dependencies() -> bool:
    """Verificar se depend√™ncias de IA est√£o dispon√≠veis"""
    return OPENAI_AVAILABLE or TRANSFORMERS_AVAILABLE

def check_database_dependencies() -> bool:
    """Verificar se depend√™ncias de banco est√£o dispon√≠veis"""
    return SQLALCHEMY_AVAILABLE and PYDANTIC_AVAILABLE

def check_web_dependencies() -> bool:
    """Verificar se depend√™ncias web est√£o dispon√≠veis"""
    return FASTAPI_AVAILABLE and PYDANTIC_AVAILABLE

def get_dependency_report() -> str:
    """Gerar relat√≥rio de depend√™ncias"""
    report = ["üìä RELAT√ìRIO DE DEPEND√äNCIAS - TECNOCURSOS AI", "=" * 50]
    
    categories = {
        "üåê Web Framework": ['fastapi'],
        "üóÑÔ∏è Banco de Dados": ['sqlalchemy', 'pydantic'],
        "üé¨ Processamento de M√≠dia": ['moviepy', 'pil', 'numpy', 'pandas'],
        "üìÑ Documentos": ['pypdf2', 'python_pptx', 'python_docx', 'fitz'],
        "ü§ñ IA e TTS": ['gtts', 'openai', 'transformers'],
        "üîê Seguran√ßa": ['jwt', 'passlib', 'cryptography'],
        "üåê HTTP e Cache": ['redis', 'requests', 'httpx', 'aiohttp'],
        "üìß Email e Monitoramento": ['sendgrid', 'psutil'],
        "üß™ Testes": ['pytest']
    }
    
    for category, deps in categories.items():
        report.append(f"\n{category}:")
        for dep in deps:
            status = "‚úÖ" if AVAILABLE_MODULES.get(dep, False) else "‚ùå"
            report.append(f"  {status} {dep}")
    
    # Resumo
    total_deps = len(AVAILABLE_MODULES)
    available_deps = sum(AVAILABLE_MODULES.values())
    report.append(f"\nüìà RESUMO:")
    report.append(f"  Dispon√≠veis: {available_deps}/{total_deps} ({available_deps/total_deps*100:.1f}%)")
    
    return "\n".join(report)

# === ALIASES PADRONIZADOS ===

# Aliases comuns para compatibilidade
FastAPI_Router = APIRouter if FASTAPI_AVAILABLE else None
DB_Session = Session if SQLALCHEMY_AVAILABLE else None
PDF_Reader = PdfReader if PYPDF2_AVAILABLE else None
PPTX_Presentation = Presentation if PYTHON_PPTX_AVAILABLE else None
TTS_Engine = gTTS if GTTS_AVAILABLE else None

# === FUN√á√ïES DE CONVENI√äNCIA ===

def require_dependency(dependency: str, error_msg: str = None):
    """
    Decorator para verificar depend√™ncia obrigat√≥ria
    
    Args:
        dependency: Nome da depend√™ncia
        error_msg: Mensagem de erro personalizada
    """
    def decorator(func):
        def wrapper(*args, **kwargs):
            if not AVAILABLE_MODULES.get(dependency, False):
                error = error_msg or f"Depend√™ncia {dependency} √© obrigat√≥ria para esta fun√ß√£o"
                raise ImportError(error)
            return func(*args, **kwargs)
        return wrapper
    return decorator

def safe_import_function(module_name: str, function_name: str):
    """
    Importar fun√ß√£o espec√≠fica de forma segura
    
    Args:
        module_name: Nome do m√≥dulo
        function_name: Nome da fun√ß√£o
        
    Returns:
        function or None
    """
    try:
        module = __import__(module_name, fromlist=[function_name])
        return getattr(module, function_name)
    except (ImportError, AttributeError):
        return None

# === INICIALIZA√á√ÉO ===

def initialize_imports():
    """Inicializar sistema de imports"""
    logger.info("üîó Sistema de imports centralizado inicializado")
    
    # Log de depend√™ncias cr√≠ticas faltantes
    critical_deps = ['fastapi', 'sqlalchemy', 'pydantic']
    missing_critical = get_missing_dependencies(critical_deps)
    
    if missing_critical:
        logger.error(f"‚ùå Depend√™ncias cr√≠ticas faltantes: {missing_critical}")
    
    # Log de depend√™ncias opcionais faltantes
    optional_deps = ['moviepy', 'openai', 'redis']
    missing_optional = get_missing_dependencies(optional_deps)
    
    if missing_optional:
        logger.warning(f"‚ö†Ô∏è Depend√™ncias opcionais faltantes: {missing_optional}")

# Inicializar automaticamente
initialize_imports()

# === EXPORT ALL ===

__all__ = [
    # Status
    'AVAILABLE_MODULES', 'DEPENDENCIES_STATUS',
    
    # Verifica√ß√£o
    'check_dependencies', 'check_required_dependencies', 'get_missing_dependencies',
    'check_video_dependencies', 'check_ai_dependencies', 'check_database_dependencies',
    'check_web_dependencies', 'get_dependency_report',
    
    # FastAPI
    'FastAPI', 'APIRouter', 'HTTPException', 'Depends', 'Request', 'Response',
    'BackgroundTasks', 'File', 'UploadFile', 'Form', 'Query', 'Body',
    'JSONResponse', 'HTMLResponse', 'FileResponse',
    'CORSMiddleware', 'StaticFiles', 'Jinja2Templates',
    
    # SQLAlchemy
    'create_engine', 'Column', 'Integer', 'String', 'Text', 'Boolean',
    'DateTime', 'ForeignKey', 'declarative_base', 'sessionmaker', 'Session',
    'relationship', 'func', 'and_', 'or_',
    
    # Pydantic
    'BaseModel', 'Field', 'validator',
    
    # MoviePy
    'VideoFileClip', 'AudioFileClip', 'ImageClip', 'TextClip', 'ColorClip',
    'CompositeVideoClip', 'concatenate_videoclips', 'fadein', 'fadeout',
    
    # PIL
    'Image', 'ImageDraw', 'ImageFont', 'ImageFilter',
    
    # Cient√≠ficos
    'np', 'pd',
    
    # Documentos
    'PdfReader', 'Presentation', 'DocxDocument', 'fitz',
    
    # TTS e IA
    'gTTS', 'openai', 'pipeline',
    
    # Seguran√ßa
    'jwt', 'CryptContext', 'Fernet',
    
    # HTTP
    'requests', 'httpx', 'aiohttp',
    
    # Cache
    'redis', 'redis_async',
    
    # Sistema
    'psutil',
    
    # Utilit√°rios
    'require_dependency', 'safe_import_function'
] 