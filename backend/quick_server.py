#!/usr/bin/env python3
"""
Servidor r√°pido em porta 8001 para teste

============================================
Acesso √† documenta√ß√£o autom√°tica da API:
- Swagger UI:  http://localhost:8001/docs
  (Interface interativa para testar e explorar os endpoints da API)
- ReDoc:       http://localhost:8001/redoc
  (Documenta√ß√£o detalhada, ideal para leitura e refer√™ncia)

Essas rotas s√£o geradas automaticamente pelo FastAPI e refletem todos os endpoints dispon√≠veis.
Utilize /docs para testes r√°pidos e /redoc para navega√ß√£o e leitura aprofundada.
============================================
"""
import os
import pathlib
import platform
import socket
import datetime
import traceback
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
import uvicorn
from starlette.status import HTTP_500_INTERNAL_SERVER_ERROR

# Criar app
app = FastAPI(title="TecnoCursos AI - Teste R√°pido")

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configura√ß√£o dos templates Jinja2
PROJECT_ROOT = pathlib.Path(__file__).parent.resolve()
templates = Jinja2Templates(directory=str(PROJECT_ROOT / "templates"))

# Montar arquivos est√°ticos
app.mount("/static", StaticFiles(directory=str(PROJECT_ROOT / "static")), name="static")

# Vari√°vel de ambiente para nome do sistema (permite customiza√ß√£o sem alterar c√≥digo)
SYSTEM_NAME = os.getenv("SYSTEM_NAME", "TecnoCursos AI")
SYSTEM_VERSION = os.getenv("SYSTEM_VERSION", "2.0.0")
SYSTEM_ENV = os.getenv("SYSTEM_ENV", "dev")
SYSTEM_SUBTITLE = os.getenv("SYSTEM_SUBTITLE", "Monitoramento Inteligente de V√≠deos e IA")
SYSTEM_AUTHOR = os.getenv("SYSTEM_AUTHOR", "Equipe TecnoCursos")

# Fun√ß√£o utilit√°ria para montar o contexto do dashboard
# Para adicionar novos dados din√¢micos, basta incluir no dicion√°rio abaixo
# Exemplo: para adicionar um novo componente, adicione no array component_status

def get_dashboard_context(request: Request):
    """Monta o contexto din√¢mico para o dashboard."""
    server_info = {
        "platform": platform.platform(),
        "python_version": platform.python_version(),
        "hostname": socket.gethostname()
    }
    system_info = {
        "name": SYSTEM_NAME,  # Nome do sistema vindo de vari√°vel de ambiente
        "version": SYSTEM_VERSION,
        "status": "online",
        "description": "Dashboard de Controle do Sistema TecnoCursos AI",
        "author": SYSTEM_AUTHOR,
        "subtitle": SYSTEM_SUBTITLE,
        "environment": SYSTEM_ENV,
        "server_info": server_info,
        "last_updated": datetime.datetime.now().isoformat()
    }
    overall_status = "online"
    status_message = "Todos os sistemas operando normalmente."
    stats = {
        "online": 8,
        "warning": 0,
        "error": 0
    }
    component_status = [
        {
            "name": "API Principal",
            "status": "online",
            "icon": "üîó",
            "description": "Backend FastAPI",
            "details": "Responde em <100ms"
        },
        {
            "name": "Banco de Dados",
            "status": "online",
            "icon": "üóÑÔ∏è",
            "description": "PostgreSQL",
            "details": "Conex√£o est√°vel"
        },
        {
            "name": "Processador de V√≠deo",
            "status": "online",
            "icon": "üé¨",
            "description": "MoviePy Engine",
            "details": "Sem filas"
        },
        {
            "name": "TTS (Narra√ß√£o)",
            "status": "warning",
            "icon": "üó£Ô∏è",
            "description": "Text-to-Speech",
            "details": "Depend√™ncias opcionais ausentes"
        },
        {
            "name": "Cache",
            "status": "online",
            "icon": "‚ö°",
            "description": "Redis",
            "details": "Cache L2 ativo"
        },
        {
            "name": "Monitoramento",
            "status": "online",
            "icon": "üìà",
            "description": "Prometheus",
            "details": "M√©tricas em tempo real"
        },
        {
            "name": "Backup",
            "status": "online",
            "icon": "üíæ",
            "description": "Backup Autom√°tico",
            "details": "√öltimo: 1h atr√°s"
        },
        {
            "name": "Frontend",
            "status": "online",
            "icon": "üñ•Ô∏è",
            "description": "React App",
            "details": "Build atualizado"
        }
    ]
    system_metrics = {
        "cpu_usage": 12.5,
        "memory_usage": 48.2,
        "uptime": "3d 4h 12m",
        "active_processes": 7
    }
    quick_actions = [
        {
            "title": "Abrir Editor",
            "description": "Acesse o editor de v√≠deos",
            "url": "/editor_integrated.html",
            "icon": "üìù",
            "color": "blue"
        },
        {
            "title": "Painel de Projetos",
            "description": "Gerencie seus projetos",
            "url": "/frontend_complete.html",
            "icon": "üìÅ",
            "color": "green"
        },
        {
            "title": "Upload de Arquivos",
            "description": "Envie PDFs, PPTX ou imagens",
            "url": "/files.html",
            "icon": "‚¨ÜÔ∏è",
            "color": "orange"
        },
        {
            "title": "Dashboard Admin",
            "description": "Acesse o painel administrativo",
            "url": "/admin.html",
            "icon": "üîí",
            "color": "purple"
        }
    ]
    return {
        "request": request,
        "system_info": system_info,
        "overall_status": overall_status,
        "status_message": status_message,
        "stats": stats,
        "component_status": component_status,
        "system_metrics": system_metrics,
        "quick_actions": quick_actions
    }

@app.get("/", response_class=HTMLResponse)
def root(request: Request):
    """Endpoint raiz que renderiza o dashboard.html com contexto completo."""
    try:
        context = get_dashboard_context(request)
        return templates.TemplateResponse("dashboard.html", context)
    except Exception as exc:  # pylint: disable=broad-exception-caught
        print(f"[ERRO 500] Falha ao renderizar dashboard: {exc}")
        print(f"[TRACEBACK] {traceback.format_exc()}")
        
        context = {
            "request": request,
            "error_message": "Erro interno ao carregar o dashboard.",
            "error_details": str(exc),
            "error_code": 500,
            "system_info": {  # Adicionando um fallback para system_info
                "name": SYSTEM_NAME,
                "version": SYSTEM_VERSION,
                "environment": SYSTEM_ENV
            }
        }
        
        return templates.TemplateResponse(
            "500.html",
            context,
            status_code=HTTP_500_INTERNAL_SERVER_ERROR
        )


@app.get("/api/health")
def health(request: Request):
    """Endpoint de health check simples."""
    return {"status": "ok", "service": "TecnoCursos AI", "port": request.scope['server'][1]}

def find_free_port(start_port=8001, max_retries=10):
    """Encontra uma porta TCP livre, come√ßando de `start_port`."""
    port = start_port
    for attempt in range(max_retries):
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(('127.0.0.1', port))
                print(f"‚úÖ Porta {port} est√° dispon√≠vel")
                return port
        except OSError:
            if attempt == 0:
                print(f"‚ö†Ô∏è  Porta {port} est√° ocupada, buscando porta livre...")
            port += 1
    raise ConnectionError(f"‚ùå N√£o foi poss√≠vel encontrar uma porta livre ap√≥s {max_retries} tentativas (testadas: {start_port}-{start_port + max_retries - 1})")

if __name__ == "__main__":
    try:
        PORT = find_free_port()
        print(f"üöÄ Servidor r√°pido na porta {PORT}")
        print(f"üíö Health: http://localhost:{PORT}/api/health")
        print(f"üìö Docs: http://localhost:{PORT}/docs")
        print(f"üè† Dashboard: http://localhost:{PORT}/")
        print(f"")
        print(f"üî• Pressione Ctrl+C para parar o servidor")
        print(f"" + "="*50)

        uvicorn.run(
            app,
            host="127.0.0.1",
            port=PORT,
            log_level="info"
        )
    except ConnectionError as e:
        print(f"‚ùå Erro de porta: {e}")
        print(f"üí° Dica: Verifique se algum processo est√° usando as portas 8001-8010")
        print(f"üí° Para verificar: netstat -ano | findstr :8001")
    except KeyboardInterrupt:
        print(f"\nüëã Servidor interrompido pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        print(f"üìù Traceback completo:")
        print(traceback.format_exc()) 