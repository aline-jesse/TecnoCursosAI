---
# Service para FastAPI
apiVersion: v1
kind: Service
metadata:
  name: tecnocursos-fastapi-service
  namespace: tecnocursos-production
  labels:
    app: tecnocursos-fastapi
    component: backend
    environment: production
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 8000
    targetPort: 8000
    protocol: TCP
  selector:
    app: tecnocursos-fastapi
    component: backend
  sessionAffinity: None

---
# Service para Redis
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: tecnocursos-production
  labels:
    app: redis
    component: cache
    environment: production
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP
  selector:
    app: redis
    component: cache

---
# Service para MySQL
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: tecnocursos-production
  labels:
    app: mysql
    component: database
    environment: production
spec:
  type: ClusterIP
  ports:
  - name: mysql
    port: 3306
    targetPort: 3306
    protocol: TCP
  selector:
    app: mysql
    component: database

---
# Headless Service para StatefulSet (se necessário)
apiVersion: v1
kind: Service
metadata:
  name: mysql-headless
  namespace: tecnocursos-production
  labels:
    app: mysql
    component: database
    environment: production
spec:
  clusterIP: None
  ports:
  - name: mysql
    port: 3306
    targetPort: 3306
    protocol: TCP
  selector:
    app: mysql
    component: database

---
# Ingress para exposição externa
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tecnocursos-ingress
  namespace: tecnocursos-production
  labels:
    app: tecnocursos-ai
    environment: production
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Permissions-Policy: camera=(), microphone=(), geolocation=()";
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/limit-connections: "20"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://tecnocursos.ai,https://www.tecnocursos.ai"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
spec:
  tls:
  - hosts:
    - tecnocursos.ai
    - www.tecnocursos.ai
    - api.tecnocursos.ai
    secretName: tecnocursos-tls-secret
  rules:
  - host: tecnocursos.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: tecnocursos-fastapi-service
            port:
              number: 80
  - host: www.tecnocursos.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: tecnocursos-fastapi-service
            port:
              number: 80
  - host: api.tecnocursos.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: tecnocursos-fastapi-service
            port:
              number: 80

---
# Service Monitor para Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: tecnocursos-fastapi-monitor
  namespace: tecnocursos-production
  labels:
    app: tecnocursos-fastapi
    component: monitoring
spec:
  selector:
    matchLabels:
      app: tecnocursos-fastapi
      component: backend
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
    honorLabels: true

---
# Service para Prometheus (se deployado no cluster)
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: tecnocursos-production
  labels:
    app: prometheus
    component: monitoring
spec:
  type: ClusterIP
  ports:
  - name: web
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: prometheus
    component: monitoring

---
# Service para Grafana
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: tecnocursos-production
  labels:
    app: grafana
    component: monitoring
spec:
  type: ClusterIP
  ports:
  - name: web
    port: 3000
    targetPort: 3000
    protocol: TCP
  selector:
    app: grafana
    component: monitoring

---
# Ingress para Grafana (subdomínio separado)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: tecnocursos-production
  labels:
    app: grafana
    component: monitoring
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: grafana-basic-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - Grafana'
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - monitoring.tecnocursos.ai
    secretName: grafana-tls-secret
  rules:
  - host: monitoring.tecnocursos.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 3000

---
# Network Policy para controle de tráfego
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: tecnocursos-fastapi-netpol
  namespace: tecnocursos-production
  labels:
    app: tecnocursos-fastapi
spec:
  podSelector:
    matchLabels:
      app: tecnocursos-fastapi
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: mysql
    ports:
    - protocol: TCP
      port: 3306
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: [] # Allow external API calls (OpenAI, etc.)
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80 