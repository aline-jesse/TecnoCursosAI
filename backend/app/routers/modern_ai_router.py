#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ Modern AI Router - TecnoCursos AI Enterprise Edition 2025
===========================================================

Router REST para exposi√ß√£o das capacidades de IA de √∫ltima gera√ß√£o:
- Endpoints para gera√ß√£o inteligente de conte√∫do
- Processamento multimodal
- RAG (Retrieval-Augmented Generation)
- Orquestra√ß√£o de agentes
- An√°lise de performance de IA

Autor: TecnoCursos AI Team
Data: 2025-01-17
"""

from fastapi import APIRouter, HTTPException, Depends, BackgroundTasks, UploadFile, File, Form
from fastapi.responses import JSONResponse
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any, Union
from datetime import datetime
import asyncio
import json

try:
    from app.services.modern_ai_service import (
        get_modern_ai_service,
        initialize_modern_ai,
        AIPrompt,
        MultimodalInput,
        ReasoningMode,
        SafetyLevel,
        AIModelType
    )
    MODERN_AI_AVAILABLE = True
except ImportError:
    MODERN_AI_AVAILABLE = False

try:
    from app.auth import get_current_user, get_current_admin_user
    from app.models import User
    AUTH_AVAILABLE = True
except ImportError:
    AUTH_AVAILABLE = False

from app.logger import get_logger

logger = get_logger("modern_ai_router")

# ============================================================================
# CONFIGURA√á√ÉO DO ROUTER
# ============================================================================

router = APIRouter(
    prefix="/api/ai",
    tags=["ü§ñ Modern AI"],
    responses={
        500: {"description": "Erro interno do servidor"},
        503: {"description": "Servi√ßo de IA indispon√≠vel"}
    }
)

# ============================================================================
# SCHEMAS DE REQUEST/RESPONSE
# ============================================================================

class IntelligentContentRequest(BaseModel):
    """Request para gera√ß√£o inteligente de conte√∫do"""
    topic: str = Field(..., min_length=3, max_length=500, description="T√≥pico para o conte√∫do")
    content_type: str = Field("explica√ß√£o did√°tica", description="Tipo de conte√∫do a gerar")
    target_audience: str = Field("estudantes universit√°rios", description="P√∫blico-alvo")
    reasoning_mode: str = Field("chain_of_thought", description="Modo de racioc√≠nio")
    use_rag: bool = Field(True, description="Usar Retrieval-Augmented Generation")
    safety_level: str = Field("moderate", description="N√≠vel de seguran√ßa")
    additional_context: Optional[str] = Field(None, description="Contexto adicional")
    examples: List[str] = Field(default_factory=list, description="Exemplos para few-shot learning")
    constraints: List[str] = Field(default_factory=list, description="Restri√ß√µes para o conte√∫do")

class MultimodalAnalysisRequest(BaseModel):
    """Request para an√°lise multimodal"""
    text: Optional[str] = Field(None, description="Texto para an√°lise")
    image_urls: List[str] = Field(default_factory=list, description="URLs das imagens")
    audio_urls: List[str] = Field(default_factory=list, description="URLs dos √°udios") 
    video_urls: List[str] = Field(default_factory=list, description="URLs dos v√≠deos")
    analysis_type: str = Field("comprehensive", description="Tipo de an√°lise")

class VideoOptimizationRequest(BaseModel):
    """Request para otimiza√ß√£o de v√≠deo"""
    video_metadata: Dict[str, Any] = Field(..., description="Metadados do v√≠deo")
    target_platform: str = Field("youtube", description="Plataforma alvo")
    optimization_goals: List[str] = Field(default_factory=list, description="Objetivos de otimiza√ß√£o")

class AIResponse(BaseModel):
    """Response padr√£o da IA"""
    id: str
    content: str
    confidence: float
    reasoning_trace: List[str]
    sources: List[str]
    metadata: Dict[str, Any]
    safety_flags: List[str]
    processing_time: float

class PerformanceReport(BaseModel):
    """Relat√≥rio de performance da IA"""
    service: str
    status: str
    metrics: Dict[str, Any]
    capabilities: Dict[str, Any]
    knowledge_base: Dict[str, Any]
    active_agents: int
    cache_stats: Dict[str, Any]

# ============================================================================
# ENDPOINTS DE GERA√á√ÉO DE CONTE√öDO
# ============================================================================

@router.post("/generate/content", response_model=AIResponse)
async def generate_intelligent_content(
    request: IntelligentContentRequest,
    current_user: User = Depends(get_current_user) if AUTH_AVAILABLE else None
):
    """
    Gerar conte√∫do educacional inteligente usando IA avan√ßada.
    
    Utiliza t√©cnicas de prompt engineering, chain-of-thought reasoning
    e RAG para criar conte√∫do de alta qualidade.
    """
    if not MODERN_AI_AVAILABLE:
        raise HTTPException(
            status_code=503,
            detail="Servi√ßo de IA moderna n√£o dispon√≠vel"
        )
    
    try:
        ai_service = get_modern_ai_service()
        
        # Criar prompt estruturado
        prompt = AIPrompt(
            id=f"content_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            content=f"Crie um {request.content_type} sobre {request.topic} para {request.target_audience}",
            type="educational_content",
            reasoning_mode=ReasoningMode(request.reasoning_mode),
            context=request.additional_context,
            examples=request.examples,
            constraints=request.constraints,
            safety_level=SafetyLevel(request.safety_level),
            metadata={
                "topic": request.topic,
                "content_type": request.content_type,
                "target_audience": request.target_audience
            }
        )
        
        # Gerar resposta inteligente
        response = await ai_service.generate_intelligent_response(
            prompt=prompt,
            use_rag=request.use_rag
        )
        
        logger.info(f"Conte√∫do gerado para t√≥pico: {request.topic}")
        
        return AIResponse(
            id=response.id,
            content=response.content,
            confidence=response.confidence,
            reasoning_trace=response.reasoning_trace,
            sources=response.sources,
            metadata=response.metadata,
            safety_flags=response.safety_flags,
            processing_time=response.processing_time
        )
        
    except Exception as e:
        logger.error(f"Erro ao gerar conte√∫do: {e}")
        raise HTTPException(status_code=500, detail=f"Erro na gera√ß√£o: {str(e)}")

@router.post("/analyze/multimodal")
async def analyze_multimodal_content(
    request: MultimodalAnalysisRequest,
    current_user: User = Depends(get_current_user) if AUTH_AVAILABLE else None
):
    """
    An√°lise multimodal avan√ßada de conte√∫do.
    
    Processa texto, imagens, √°udios e v√≠deos simultaneamente
    para extrair insights cross-modais.
    """
    if not MODERN_AI_AVAILABLE:
        raise HTTPException(status_code=503, detail="Servi√ßo de IA n√£o dispon√≠vel")
    
    try:
        ai_service = get_modern_ai_service()
        
        # Criar entrada multimodal
        multimodal_input = MultimodalInput(
            text=request.text,
            image_urls=request.image_urls,
            audio_urls=request.audio_urls,
            video_urls=request.video_urls,
            metadata={"analysis_type": request.analysis_type}
        )
        
        # Processar conte√∫do multimodal
        analysis_result = await ai_service.multimodal_processor.analyze_multimodal_content(
            multimodal_input
        )
        
        return {
            "analysis_id": f"multimodal_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            "input_summary": {
                "has_text": bool(request.text),
                "image_count": len(request.image_urls),
                "audio_count": len(request.audio_urls),
                "video_count": len(request.video_urls)
            },
            "analysis_results": analysis_result,
            "processing_timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Erro na an√°lise multimodal: {e}")
        raise HTTPException(status_code=500, detail=f"Erro na an√°lise: {str(e)}")

@router.post("/optimize/video", response_model=AIResponse)
async def optimize_video_with_ai(
    request: VideoOptimizationRequest,
    current_user: User = Depends(get_current_user) if AUTH_AVAILABLE else None
):
    """
    Otimiza√ß√£o inteligente de v√≠deo usando IA.
    
    Analisa metadados do v√≠deo e fornece recomenda√ß√µes
    espec√≠ficas para melhorar engajamento e performance.
    """
    if not MODERN_AI_AVAILABLE:
        raise HTTPException(status_code=503, detail="Servi√ßo de IA n√£o dispon√≠vel")
    
    try:
        ai_service = get_modern_ai_service()
        
        # Atribuir tarefa ao agente especializado
        task_id = await ai_service.agent_orchestrator.assign_task(
            "video_analysis",
            {
                "metadata": request.video_metadata,
                "platform": request.target_platform,
                "goals": request.optimization_goals
            }
        )
        
        # Otimizar usando IA
        response = await ai_service.optimize_video_content(request.video_metadata)
        
        # Adicionar informa√ß√µes espec√≠ficas da tarefa
        response.metadata.update({
            "task_id": task_id,
            "target_platform": request.target_platform,
            "optimization_goals": request.optimization_goals
        })
        
        logger.info(f"V√≠deo otimizado - Task ID: {task_id}")
        
        return AIResponse(
            id=response.id,
            content=response.content,
            confidence=response.confidence,
            reasoning_trace=response.reasoning_trace,
            sources=response.sources,
            metadata=response.metadata,
            safety_flags=response.safety_flags,
            processing_time=response.processing_time
        )
        
    except Exception as e:
        logger.error(f"Erro na otimiza√ß√£o de v√≠deo: {e}")
        raise HTTPException(status_code=500, detail=f"Erro na otimiza√ß√£o: {str(e)}")

# ============================================================================
# ENDPOINTS DE EDUCATIONAL CONTENT
# ============================================================================

@router.post("/educational/course-outline")
async def generate_course_outline(
    topic: str = Form(...),
    duration_hours: int = Form(8),
    difficulty_level: str = Form("intermediate"),
    current_user: User = Depends(get_current_user) if AUTH_AVAILABLE else None
):
    """Gerar esbo√ßo de curso educacional completo"""
    if not MODERN_AI_AVAILABLE:
        raise HTTPException(status_code=503, detail="Servi√ßo de IA n√£o dispon√≠vel")
    
    try:
        ai_service = get_modern_ai_service()
        
        response = await ai_service.create_educational_content(
            topic=f"Estrutura de curso sobre {topic}",
            target_audience=f"estudantes de n√≠vel {difficulty_level}",
            content_type=f"esbo√ßo de curso de {duration_hours} horas"
        )
        
        return {
            "course_outline": response.content,
            "metadata": {
                "topic": topic,
                "duration_hours": duration_hours,
                "difficulty_level": difficulty_level,
                "generated_at": datetime.now().isoformat()
            },
            "confidence": response.confidence,
            "processing_time": response.processing_time
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro: {str(e)}")

@router.post("/educational/quiz-generation")
async def generate_quiz(
    content: str = Form(...),
    question_count: int = Form(5),
    question_type: str = Form("multiple_choice"),
    current_user: User = Depends(get_current_user) if AUTH_AVAILABLE else None
):
    """Gerar quiz baseado em conte√∫do fornecido"""
    if not MODERN_AI_AVAILABLE:
        raise HTTPException(status_code=503, detail="Servi√ßo de IA n√£o dispon√≠vel")
    
    try:
        ai_service = get_modern_ai_service()
        
        prompt = AIPrompt(
            id=f"quiz_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            content=f"Crie um quiz com {question_count} quest√µes do tipo {question_type}",
            type="quiz_generation",
            reasoning_mode=ReasoningMode.CHAIN_OF_THOUGHT,
            context=f"Conte√∫do base: {content[:500]}...",
            constraints=[
                f"Exatamente {question_count} quest√µes",
                f"Formato: {question_type}",
                "Quest√µes variadas em dificuldade",
                "Inclua explica√ß√µes para as respostas"
            ]
        )
        
        response = await ai_service.generate_intelligent_response(prompt)
        
        return {
            "quiz": response.content,
            "question_count": question_count,
            "question_type": question_type,
            "confidence": response.confidence,
            "processing_time": response.processing_time
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro: {str(e)}")

# ============================================================================
# ENDPOINTS DE KNOWLEDGE BASE
# ============================================================================

@router.post("/knowledge/add-document")
async def add_knowledge_document(
    content: str = Form(...),
    title: str = Form(...),
    category: str = Form("general"),
    importance: str = Form("medium"),
    current_user: User = Depends(get_current_admin_user) if AUTH_AVAILABLE else None
):
    """Adicionar documento √† base de conhecimento (Admin only)"""
    if not MODERN_AI_AVAILABLE:
        raise HTTPException(status_code=503, detail="Servi√ßo de IA n√£o dispon√≠vel")
    
    try:
        ai_service = get_modern_ai_service()
        
        from app.services.modern_ai_service import KnowledgeDocument
        
        document = KnowledgeDocument(
            id=f"doc_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            content=content,
            metadata={
                "title": title,
                "category": category,
                "importance": importance,
                "added_by": current_user.email if current_user else "system"
            }
        )
        
        success = await ai_service.knowledge_base.add_document(document)
        
        if success:
            return {
                "message": "Documento adicionado com sucesso",
                "document_id": document.id,
                "knowledge_base_size": len(ai_service.knowledge_base.documents)
            }
        else:
            raise HTTPException(status_code=500, detail="Falha ao adicionar documento")
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro: {str(e)}")

@router.get("/knowledge/search")
async def search_knowledge(
    query: str,
    top_k: int = 5,
    current_user: User = Depends(get_current_user) if AUTH_AVAILABLE else None
):
    """Buscar na base de conhecimento usando similarity search"""
    if not MODERN_AI_AVAILABLE:
        raise HTTPException(status_code=503, detail="Servi√ßo de IA n√£o dispon√≠vel")
    
    try:
        ai_service = get_modern_ai_service()
        
        documents = await ai_service.knowledge_base.search_similar(query, top_k)
        
        return {
            "query": query,
            "results": [
                {
                    "id": doc.id,
                    "content": doc.content[:200] + "..." if len(doc.content) > 200 else doc.content,
                    "metadata": doc.metadata,
                    "created_at": doc.created_at.isoformat()
                }
                for doc in documents
            ],
            "total_found": len(documents)
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro: {str(e)}")

# ============================================================================
# ENDPOINTS DE MONITORAMENTO
# ============================================================================

@router.get("/performance", response_model=PerformanceReport)
async def get_ai_performance():
    """Obter relat√≥rio de performance do sistema de IA"""
    if not MODERN_AI_AVAILABLE:
        raise HTTPException(status_code=503, detail="Servi√ßo de IA n√£o dispon√≠vel")
    
    try:
        ai_service = get_modern_ai_service()
        report = ai_service.get_performance_report()
        
        return PerformanceReport(
            service=report["service"],
            status=report["status"],
            metrics=report["metrics"],
            capabilities=report["capabilities"],
            knowledge_base=report["knowledge_base"],
            active_agents=report["active_agents"],
            cache_stats=report["cache_stats"]
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro: {str(e)}")

@router.get("/capabilities")
async def get_ai_capabilities():
    """Listar todas as capacidades de IA dispon√≠veis"""
    if not MODERN_AI_AVAILABLE:
        return {
            "status": "unavailable",
            "message": "Servi√ßo de IA moderna n√£o configurado"
        }
    
    return {
        "status": "available",
        "capabilities": {
            "content_generation": {
                "description": "Gera√ß√£o inteligente de conte√∫do educacional",
                "endpoints": ["/api/ai/generate/content", "/api/ai/educational/course-outline"]
            },
            "multimodal_analysis": {
                "description": "An√°lise de m√∫ltiplos tipos de m√≠dia",
                "endpoints": ["/api/ai/analyze/multimodal"]
            },
            "video_optimization": {
                "description": "Otimiza√ß√£o autom√°tica de v√≠deos",
                "endpoints": ["/api/ai/optimize/video"]
            },
            "knowledge_management": {
                "description": "Gest√£o inteligente de base de conhecimento",
                "endpoints": ["/api/ai/knowledge/add-document", "/api/ai/knowledge/search"]
            },
            "educational_tools": {
                "description": "Ferramentas espec√≠ficas para educa√ß√£o",
                "endpoints": ["/api/ai/educational/quiz-generation"]
            }
        },
        "reasoning_modes": [mode.value for mode in ReasoningMode],
        "safety_levels": [level.value for level in SafetyLevel],
        "model_types": [model.value for model in AIModelType]
    }

# ============================================================================
# ENDPOINTS DE INICIALIZA√á√ÉO
# ============================================================================

@router.post("/initialize")
async def initialize_ai_service(
    background_tasks: BackgroundTasks,
    current_user: User = Depends(get_current_admin_user) if AUTH_AVAILABLE else None
):
    """Inicializar servi√ßo de IA com base de conhecimento (Admin only)"""
    if not MODERN_AI_AVAILABLE:
        raise HTTPException(status_code=503, detail="Servi√ßo de IA n√£o dispon√≠vel")
    
    try:
        # Executar inicializa√ß√£o em background
        background_tasks.add_task(initialize_modern_ai)
        
        return {
            "message": "Inicializa√ß√£o do servi√ßo de IA iniciada",
            "status": "in_progress",
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro na inicializa√ß√£o: {str(e)}")

# ============================================================================
# ENDPOINT DE INFO
# ============================================================================

@router.get("/info")
async def get_ai_service_info():
    """Informa√ß√µes gerais sobre o servi√ßo de IA"""
    return {
        "service": "Modern AI Service - TecnoCursos AI",
        "version": "2.0.0",
        "description": "Sistema de IA de √∫ltima gera√ß√£o com capacidades multimodais, RAG e orquestra√ß√£o de agentes",
        "features": [
            "Gera√ß√£o inteligente de conte√∫do educacional",
            "An√°lise multimodal (texto, imagem, √°udio, v√≠deo)",
            "Retrieval-Augmented Generation (RAG)",
            "Chain-of-Thought Reasoning",
            "AI Agent Orchestration",
            "Knowledge Base vetorial",
            "Prompt Engineering avan√ßado",
            "Safety e compliance autom√°tica"
        ],
        "status": "operational" if MODERN_AI_AVAILABLE else "unavailable",
        "documentation": "/docs#/ü§ñ Modern AI",
        "support": "support@tecnocursos.ai"
    } 