"""
Aplica√ß√£o principal FastAPI - TecnoCursos AI
Sistema SaaS para upload de arquivos e gera√ß√£o de v√≠deos
"""

from __future__ import annotations

from fastapi import FastAPI, HTTPException, Depends, Request, status
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, HTMLResponse, FileResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session
from sqlalchemy import func
import uvicorn
import logging
import time
import os
from pathlib import Path
from datetime import datetime
from typing import Optional
from fastapi.exception_handlers import RequestValidationError
from fastapi.exceptions import RequestValidationError as FastAPIRequestValidationError
from starlette.exceptions import HTTPException as StarletteHTTPException

# Importa√ß√µes locais - usando imports absolutos
from app.config import get_settings
from app.database import get_db, create_database, check_database_health_async, engine, Base
from app.models import User, Project, FileUpload, Video
from app.auth import get_current_user_optional, auth_manager
from app.schemas import HealthCheck, SystemStats
from quick_server import get_dashboard_context

def create_directories():
    """Cria diret√≥rios necess√°rios para a aplica√ß√£o"""
    directories = [
        "uploads",
        "uploads/pdf",
        "uploads/pptx",
        "static/videos",
        "static/audios",
        "static/thumbnails",
        "cache",
        "logs"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)

# Importar routers principais
try:
    from app.routers import auth_router, users_router, projects_router, files_router, admin_router, stats_router
    _core_routers_available = True
except ImportError as e:
    print(f"‚ö†Ô∏è Erro ao importar routers principais: {e}")
    _core_routers_available = False

# Tentar importar router do editor de v√≠deo
try:
    from app.routers.video_editor_advanced import router as video_editor_router
    _video_editor_available = True
except ImportError:
    video_editor_router = None
    _video_editor_available = False
    print("‚ö†Ô∏è Video Editor Router n√£o dispon√≠vel")

# Tentar importar router do avatar
try:
    from app.routers import avatar_router
    _avatar_available = True
    if avatar_router is None:
        _avatar_available = False
        print("‚ö†Ô∏è Avatar router √© None")
except ImportError as e:
    avatar_router = None
    _avatar_available = False
    print(f"‚ö†Ô∏è Avatar router n√£o dispon√≠vel: {e}")

# Tentar importar routers TTS
try:
    from app.routers import tts
    from app.routers import tts_advanced
    _tts_available = True
except ImportError:
    tts = None
    tts_advanced = None
    _tts_available = False
    print("‚ö†Ô∏è Routers TTS n√£o dispon√≠veis")

# Tentar importar router de admin de √°udios
try:
    from app.routers import audio_admin
    _audio_admin_available = True
except ImportError:
    audio_admin = None
    _audio_admin_available = False
    print("‚ö†Ô∏è Router de admin de √°udios n√£o dispon√≠vel")

# Tentar importar router de notifica√ß√µes
try:
    from app.routers.notifications import router as notifications_router
    _notifications_available = True
    print("‚úÖ Router de notifica√ß√µes dispon√≠vel")
except ImportError:
    notifications_router = None
    _notifications_available = False
    print("‚ö†Ô∏è Router de notifica√ß√µes n√£o dispon√≠vel")

# Tentar importar routers avan√ßados
try:
    from app.routers import batch_upload, websocket_router, analytics
    _advanced_routers_available = True
except ImportError:
    batch_upload = None
    websocket_router = None
    analytics = None
    _advanced_routers_available = False
    print("‚ö†Ô∏è Routers avan√ßados n√£o dispon√≠veis")

# Tentar importar router de cenas e assets
try:
    from app.routers import scenes_router
    _scenes_available = True
except ImportError:
    scenes_router = None
    _scenes_available = False
    print("‚ö†Ô∏è Router de cenas n√£o dispon√≠vel")

# Tentar importar routers enterprise
try:
    from app.routers import enterprise_router, system_control
    _enterprise_available = True
except ImportError:
    enterprise_router = None
    system_control = None
    _enterprise_available = False
    print("‚ö†Ô∏è Routers enterprise n√£o dispon√≠veis")

# Tentar importar routers de v√≠deo
try:
    from app.routers import video_generation, advanced_video_processing, video_export
    _video_routers_available = True
except ImportError:
    video_generation = None
    advanced_video_processing = None
    video_export = None
    _video_routers_available = False
    print("‚ö†Ô∏è Routers de v√≠deo n√£o dispon√≠veis")

# Importar novos routers
try:
    from app.routers.analytics import router as analytics_router
    from app.routers.export import router as export_router
    _new_routers_available = True
    print("‚úÖ Novos routers (analytics, export) dispon√≠veis")
except ImportError:
    analytics_router = None
    export_router = None
    _new_routers_available = False
    print("‚ö†Ô∏è Novos routers n√£o dispon√≠veis")

# üÜï NOVOS SERVI√áOS 2025 - Tecnologias de Vanguarda
# Tentar importar routers dos novos servi√ßos de √∫ltima gera√ß√£o
try:
    from app.routers.modern_ai_router import router as modern_ai_router
    _modern_ai_available = True
    print("‚úÖ Modern AI Router dispon√≠vel")
except ImportError:
    modern_ai_router = None
    _modern_ai_available = False
    print("‚ö†Ô∏è Modern AI Router n√£o dispon√≠vel")

try:
    from app.routers.quantum_router import router as quantum_router
    _quantum_available = True
    print("‚úÖ Quantum Optimization Router dispon√≠vel")
except ImportError:
    quantum_router = None
    _quantum_available = False
    print("‚ö†Ô∏è Quantum Router n√£o dispon√≠vel")

try:
    from app.services.edge_computing_service import get_edge_computing_service, initialize_edge_computing
    _edge_computing_available = True
    print("‚úÖ Edge Computing Service dispon√≠vel")
except ImportError:
    get_edge_computing_service = None
    initialize_edge_computing = None
    _edge_computing_available = False
    print("‚ö†Ô∏è Edge Computing Service n√£o dispon√≠vel")

# Configura√ß√£o de logging
try:
    from app.logger import get_logger
    logger = get_logger("main")
except ImportError:
    # Fallback para logging b√°sico
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger("main")

# Configura√ß√µes
settings = get_settings()

# Criar diret√≥rios necess√°rios
create_directories()

# Configurar templates (melhor pr√°tica: sempre procurar na raiz e em app/templates)
templates_path = Path(__file__).parent / "templates"
if templates_path.exists():
    templates = Jinja2Templates(directory=str(templates_path))
else:
    fallback_templates = Path.cwd() / "templates"
    if fallback_templates.exists():
        templates = Jinja2Templates(directory=str(fallback_templates))
    else:
        templates = Jinja2Templates(directory="templates")

# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title="TecnoCursos AI - Enterprise Edition 2025",
    description="""
    üöÄ **Plataforma SaaS Enterprise para Cria√ß√£o de Conte√∫do Educacional com IA**
    
    ## üéØ Funcionalidades Core
    - Upload e processamento inteligente de arquivos (PDF, PPTX, DOCX)
    - Gera√ß√£o autom√°tica de narra√ß√£o com TTS avan√ßado (Bark + gTTS)
    - Cria√ß√£o de v√≠deos com avatar e templates profissionais
    - Sistema de autentica√ß√£o JWT robusto
    - API REST completa com documenta√ß√£o autom√°tica
    
    ## üß† Intelig√™ncia Artificial Avan√ßada (2025)
    - **Modern AI Service**: Multimodal AI, RAG, Chain-of-Thought Reasoning
    - **Quantum Optimization**: Algoritmos qu√¢nticos para otimiza√ß√£o
    - **Edge Computing**: Processamento distribu√≠do em tempo real
    - **AI Guardrails**: Supervis√£o √©tica e compliance autom√°tica
    
    ## üè¢ Funcionalidades Enterprise
    - Monitoramento inteligente com machine learning
    - Seguran√ßa avan√ßada multicamada
    - Analytics em tempo real com dashboards
    - Sistema de backup automatizado
    - WebSocket para notifica√ß√µes em tempo real
    - Pipeline CI/CD completo
    
    ## üìä APIs Dispon√≠veis
    - **60+ endpoints** documentados e testados
    - **WebSocket** para comunica√ß√£o em tempo real
    - **Batch processing** para opera√ß√µes em lote
    - **Advanced video processing** com templates profissionais
    - **Modern AI** com capacidades multimodais
    - **Quantum optimization** para problemas complexos
    
    ## üîó Links √öteis
    - **Documenta√ß√£o Interativa**: `/docs` (Swagger UI)
    - **Documenta√ß√£o Alternativa**: `/redoc` (ReDoc)
    - **Health Check**: `/api/health`
    - **Dashboard**: `/dashboard`
    - **Login**: `/login`
    
    ---
    **TecnoCursos AI Enterprise Edition 2025** - Revolucionando a educa√ß√£o com IA de vanguarda!
    """,
    version="2.0.0",
    contact={
        "name": "TecnoCursos AI Support Team",
        "email": "support@tecnocursos.ai",
        "url": "https://tecnocursos.ai"
    },
    license_info={
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT"
    },
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json"
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins,
    allow_credentials=settings.cors_allow_credentials,
    allow_methods=settings.cors_allow_methods,
    allow_headers=settings.cors_allow_headers,
)

# Configurar arquivos est√°ticos
static_path = Path(__file__).parent.parent / "static"
if static_path.exists():
    app.mount("/static", StaticFiles(directory=str(static_path)), name="static")
else:
    # Fallback para o diret√≥rio static na raiz
    fallback_static = Path.cwd() / "static"
    if fallback_static.exists():
        app.mount("/static", StaticFiles(directory=str(fallback_static)), name="static")
    else:
        print("‚ö†Ô∏è Diret√≥rio static n√£o encontrado")

# Configurar tempo de in√≠cio
app.state.start_time = time.time()

# ============================================================================
# INCLUS√ÉO DE ROUTERS
# ============================================================================

# Routers principais (obrigat√≥rios)
if _core_routers_available:
    try:
        app.include_router(auth_router, prefix="/api/auth", tags=["Autentica√ß√£o"])
        app.include_router(users_router, prefix="/api/users", tags=["Usu√°rios"])
        app.include_router(projects_router, prefix="/api/projects", tags=["Projetos"])
        app.include_router(files_router, prefix="/api/files", tags=["Arquivos"])
        app.include_router(admin_router, prefix="/admin", tags=["Administra√ß√£o"])
        app.include_router(stats_router, prefix="/api/stats", tags=["Estat√≠sticas"])
        logger.info("‚úÖ Routers principais inclu√≠dos com sucesso")
    except Exception as e:
        logger.error(f"‚ùå Erro ao incluir routers principais: {e}")

# Router do editor de v√≠deo
if _video_editor_available and video_editor_router:
    try:
        app.include_router(video_editor_router, prefix="/api/editor", tags=["Editor de V√≠deo"])
        logger.info("‚úÖ Video Editor Router inclu√≠do")
    except Exception as e:
        logger.error(f"‚ùå Erro ao incluir Video Editor router: {e}")

# Router de avatar
if _avatar_available and avatar_router:
    try:
        app.include_router(avatar_router, prefix="/api/avatar", tags=["Avatar"])
        logger.info("‚úÖ Avatar Router inclu√≠do")
    except Exception as e:
        logger.error(f"‚ùå Erro ao incluir Avatar router: {e}")

# Routers TTS
if _tts_available:
    try:
        if tts:
            app.include_router(tts.router, prefix="/api/tts", tags=["TTS"])
        if tts_advanced:
            app.include_router(tts_advanced.router, prefix="/api/tts/advanced", tags=["TTS Avan√ßado"])
        logger.info("‚úÖ Routers TTS inclu√≠dos")
    except Exception as e:
        logger.error(f"‚ùå Erro ao incluir routers TTS: {e}")

# Router de admin de √°udios
if _audio_admin_available and audio_admin:
    try:
        app.include_router(audio_admin.router, prefix="/api/audio", tags=["Admin de √Åudios"])
        logger.info("‚úÖ Audio Admin Router inclu√≠do")
    except Exception as e:
        logger.error(f"‚ùå Erro ao incluir Audio Admin router: {e}")

# Router de notifica√ß√µes
if _notifications_available and notifications_router:
    try:
        app.include_router(notifications_router, prefix="/api", tags=["Notifica√ß√µes"])
        logger.info("‚úÖ Router de notifica√ß√µes inclu√≠do")
    except Exception as e:
        logger.error(f"‚ùå Erro ao incluir router de notifica√ß√µes: {e}")

# Routers avan√ßados
if _advanced_routers_available:
    try:
        if batch_upload:
            app.include_router(batch_upload, prefix="/api/batch", tags=["Upload em Lote"])
        if websocket_router:
            app.include_router(websocket_router, prefix="/api/websocket", tags=["WebSocket"])
        if analytics:
            app.include_router(analytics, prefix="/api/analytics", tags=["Analytics"])
        logger.info("‚úÖ Routers avan√ßados inclu√≠dos")
    except Exception as e:
        logger.error(f"‚ùå Erro ao incluir routers avan√ßados: {e}")

# Router de cenas
if _scenes_available and scenes_router:
    try:
        app.include_router(scenes_router, prefix="/api/scenes", tags=["Cenas"])
        logger.info("‚úÖ Scenes Router inclu√≠do")
    except Exception as e:
        logger.error(f"‚ùå Erro ao incluir Scenes router: {e}")

# Routers enterprise
if _enterprise_available:
    try:
        if enterprise_router:
            app.include_router(enterprise_router, prefix="/enterprise", tags=["Enterprise"])
        if system_control:
            app.include_router(system_control, prefix="/api/system", tags=["Controle do Sistema"])
        logger.info("‚úÖ Routers enterprise inclu√≠dos")
    except Exception as e:
        logger.error(f"‚ùå Erro ao incluir routers enterprise: {e}")

# Routers de v√≠deo
if _video_routers_available:
    try:
        if video_generation:
            app.include_router(video_generation, prefix="/api/video/generation", tags=["Gera√ß√£o de V√≠deo"])
        if advanced_video_processing:
            app.include_router(advanced_video_processing, prefix="/api/video/processing", tags=["Processamento Avan√ßado"])
        if video_export:
            app.include_router(video_export, prefix="/api/video/export", tags=["Exporta√ß√£o de V√≠deo"])
        logger.info("‚úÖ Routers de v√≠deo inclu√≠dos")
    except Exception as e:
        logger.error(f"‚ùå Erro ao incluir routers de v√≠deo: {e}")

# Novos routers (analytics e export)
if _new_routers_available:
    try:
        if analytics_router:
            app.include_router(analytics_router, prefix="/api/analytics", tags=["Analytics"])
        if export_router:
            app.include_router(export_router, prefix="/api/export", tags=["Export"])
        logger.info("‚úÖ Novos routers (analytics, export) inclu√≠dos")
    except Exception as e:
        logger.error(f"‚ùå Erro ao incluir novos routers: {e}")

# üÜï NOVOS SERVI√áOS 2025
# Modern AI Router
if _modern_ai_available and modern_ai_router:
    try:
        app.include_router(modern_ai_router, prefix="/api/modern-ai", tags=["Modern AI"])
        logger.info("ü§ñ Modern AI Router inclu√≠do - Multimodal AI")
    except Exception as e:
        logger.error(f"‚ùå Erro ao incluir Modern AI router: {e}")

# Quantum Optimization Router
if _quantum_available and quantum_router:
    try:
        app.include_router(quantum_router, prefix="/api/quantum", tags=["Quantum Optimization"])
        logger.info("üî¨ Quantum Optimization Router inclu√≠do - Quantum Algorithms")
    except Exception as e:
        logger.error(f"‚ùå Erro ao incluir Quantum router: {e}")

# ============================================================================
# EVENTOS DE INICIALIZA√á√ÉO
# ============================================================================

async def initialize_services():
    """Inicializa todos os servi√ßos principais da aplica√ß√£o."""
    if _modern_ai_available:
        try:
            from app.services.modern_ai_service import initialize_modern_ai
            await initialize_modern_ai()
            logger.info("ü§ñ Modern AI Service inicializado com sucesso")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao inicializar Modern AI: {e}")

    if _edge_computing_available:
        try:
            await initialize_edge_computing()
            logger.info("üåê Edge Computing Service inicializado com sucesso")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao inicializar Edge Computing: {e}")

    if _quantum_available:
        try:
            from app.services.quantum_optimization_service import get_quantum_optimization_service
            quantum_service = get_quantum_optimization_service()
            logger.info("üî¨ Quantum Optimization Service inicializado com sucesso")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao inicializar Quantum Service: {e}")

    # Inicializar outros servi√ßos enterprise se dispon√≠veis
    try:
        from app.services.intelligent_monitoring_service import monitoring_service
        logger.info("üß† Intelligent Monitoring ativo")
    except ImportError:
        pass

    try:
        from app.services.performance_optimization_service import performance_service
        logger.info("‚ö° Performance Optimization ativo")
    except ImportError:
        pass

@app.on_event("startup")
async def startup_event():
    """Evento de inicializa√ß√£o da aplica√ß√£o"""
    try:
        # Criar diret√≥rios necess√°rios
        create_directories()
        
        # Inicializar banco de dados (vers√£o s√≠ncrona)
        from app.database import create_database_sync
        create_database_sync()
        
        # Verificar sa√∫de do banco
        await check_database_health_async()
        
        # Inicializar servi√ßos
        await initialize_services()
        
        logger.info("‚úÖ Sistema inicializado com sucesso")
        
    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico na inicializa√ß√£o: {e}")
        raise

@app.on_event("shutdown")
async def shutdown_event():
    """Eventos executados no encerramento da aplica√ß√£o"""
    logger.info("üîÑ Encerrando TecnoCursos AI Enterprise Edition 2025...")
    
    # Fechar conex√µes de banco
    try:
        engine.dispose()
        logger.info("‚úÖ Conex√µes de banco fechadas")
    except:
        pass
    
    logger.info("üëã TecnoCursos AI encerrado com sucesso")

# ============================================================================
# ENDPOINTS PRINCIPAIS
# ============================================================================

@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    """P√°gina inicial: redireciona para login se n√£o autenticado, sen√£o dashboard"""
    token = request.cookies.get("access_token") or request.headers.get("Authorization")
    if not token:
        return RedirectResponse(url="/login")
    # Aqui pode-se adicionar l√≥gica para validar o token se necess√°rio
    return templates.TemplateResponse("index.html", {"request": request})

@app.get("/dashboard", response_class=HTMLResponse)
async def dashboard(request: Request):
    """Dashboard principal da aplica√ß√£o"""
    context = get_dashboard_context(request)
    return templates.TemplateResponse("dashboard.html", context)

@app.get("/login", response_class=HTMLResponse)
async def login_page(request: Request):
    """P√°gina de login"""
    return templates.TemplateResponse("login.html", {"request": request})

@app.get("/login.html", response_class=HTMLResponse)
async def login_page_html(request: Request):
    """P√°gina de login (com extens√£o .html)"""
    return templates.TemplateResponse("login.html", {"request": request})

@app.get("/favicon.ico")
async def favicon():
    """Favicon da aplica√ß√£o"""
    return FileResponse("static/favicon.ico")

@app.get("/dashboard.html", response_class=HTMLResponse)
async def dashboard_html(request: Request):
    """Dashboard (com extens√£o .html)"""
    context = get_dashboard_context(request)
    return templates.TemplateResponse("dashboard.html", context)

@app.get("/files.html", response_class=HTMLResponse)
async def files_html(request: Request):
    """P√°gina de arquivos (com extens√£o .html)"""
    return templates.TemplateResponse("files.html", {"request": request})

@app.get("/admin.html", response_class=HTMLResponse)
async def admin_html(request: Request):
    """P√°gina de administra√ß√£o (com extens√£o .html)"""
    return templates.TemplateResponse("admin.html", {"request": request})

@app.get("/audios.html", response_class=HTMLResponse)
async def audios_html(request: Request):
    """P√°gina de √°udios (com extens√£o .html)"""
    return templates.TemplateResponse("audios.html", {"request": request})

@app.exception_handler(404)
async def not_found_handler(request: Request, exc):
    """Retorna p√°gina 404 customizada"""
    return templates.TemplateResponse("404.html", {"request": request}, status_code=404)

# ============================================================================
# API HEALTH CHECK E STATUS
# ============================================================================

@app.get("/api/health", response_model=HealthCheck)
async def health_check():
    """
    Verifica√ß√£o de sa√∫de da aplica√ß√£o
    
    Retorna status detalhado de todos os componentes cr√≠ticos:
    - Database connectivity
    - Services availability  
    - System resources
    - AI capabilities
    """
    try:
        # Verificar banco de dados
        db_healthy = await check_database_health_async()
        
        # Verificar servi√ßos dispon√≠veis
        services_status = {
            "database": "connected" if db_healthy else "disconnected",
            "avatar_service": "available" if _avatar_available else "unavailable",
            "tts_service": "available" if _tts_available else "unavailable",
            "audio_admin": "available" if _audio_admin_available else "unavailable",
            "advanced_features": "available" if _advanced_routers_available else "unavailable",
            "enterprise_features": "available" if _enterprise_available else "unavailable",
            "video_processing": "available" if _video_routers_available else "unavailable",
            "modern_ai": "available" if _modern_ai_available else "unavailable",
            "quantum_optimization": "available" if _quantum_available else "unavailable",
            "edge_computing": "available" if _edge_computing_available else "unavailable"
        }
        
        # Calcular score de sa√∫de geral
        healthy_services = sum(1 for status in services_status.values() if "available" in status or "connected" in status)
        total_services = len(services_status)
        health_score = (healthy_services / total_services) * 100
        
        # Determinar status geral
        if health_score >= 90:
            overall_status = "excellent"
        elif health_score >= 70:
            overall_status = "good"
        elif health_score >= 50:
            overall_status = "fair"
        else:
            overall_status = "poor"
        
        return HealthCheck(
            status=overall_status,
            timestamp=datetime.now(),
            version="2.0.0",
            uptime_seconds=time.time() - app.state.start_time if hasattr(app.state, 'start_time') else 0,
            database_status="connected" if db_healthy else "disconnected",
            services_status=services_status
        )
        
    except Exception as e:
        logger.error(f"Erro no health check: {e}")
        return HealthCheck(
            status="error",
            timestamp=datetime.now(),
            version="2.0.0",
            uptime_seconds=time.time() - app.state.start_time if hasattr(app.state, 'start_time') else 0,
            database_status="error",
            services_status={}
        )

@app.get("/api/status", response_model=SystemStats)
async def system_status(db: Session = Depends(get_db)):
    """
    Estat√≠sticas detalhadas do sistema
    
    Inclui m√©tricas de uso, performance e recursos.
    """
    try:
        # Consultar estat√≠sticas do banco
        total_users = db.query(func.count(User.id)).scalar() or 0
        total_projects = db.query(func.count(Project.id)).scalar() or 0
        total_files = db.query(func.count(FileUpload.id)).scalar() or 0
        total_videos = db.query(func.count(Video.id)).scalar() or 0
        
        # M√©tricas de sistema (se psutil dispon√≠vel)
        try:
            import psutil
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            system_metrics = {
                "cpu_usage_percent": cpu_percent,
                "memory_usage_percent": memory.percent,
                "disk_usage_percent": (disk.used / disk.total) * 100,
                "available_memory_gb": memory.available / (1024**3),
                "free_disk_gb": disk.free / (1024**3)
            }
        except ImportError:
            system_metrics = {
                "cpu_usage_percent": 0,
                "memory_usage_percent": 0,
                "disk_usage_percent": 0,
                "available_memory_gb": 0,
                "free_disk_gb": 0
            }
        
        return SystemStats(
            total_users=total_users,
            total_projects=total_projects,
            total_files=total_files,
            total_videos=total_videos,
            system_metrics=system_metrics,
            timestamp=datetime.now()
        )
        
    except Exception as e:
        logger.error(f"Erro ao obter estat√≠sticas: {e}")
        raise HTTPException(status_code=500, detail="Erro interno do servidor")

@app.get("/api/info")
async def system_info():
    """
    Informa√ß√µes gerais do sistema
    
    Retorna informa√ß√µes sobre vers√£o, ambiente e funcionalidades dispon√≠veis.
    """
    return {
        "name": "TecnoCursos AI Enterprise Edition 2025",
        "version": "2.0.0",
        "environment": settings.environment,
        "description": "Plataforma SaaS para cria√ß√£o de conte√∫do educacional com IA",
        "features": {
            "authentication": True,
            "file_upload": True,
            "video_generation": _video_routers_available,
            "tts": _tts_available,
            "avatar": _avatar_available,
            "enterprise": _enterprise_available,
            "modern_ai": _modern_ai_available,
            "quantum": _quantum_available,
            "edge_computing": _edge_computing_available
        },
        "endpoints": {
            "health": "/api/health",
            "status": "/api/status",
            "docs": "/docs",
            "redoc": "/redoc"
        },
        "timestamp": datetime.now().isoformat()
    }

# ============================================================================
# INICIALIZA√á√ÉO DO SERVIDOR
# ============================================================================

if __name__ == "__main__":
    import uvicorn
    
    # Configurar logging
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    
    # Iniciar servidor
    uvicorn.run(
        "app.main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.reload,
        log_level=settings.log_level.lower()
    ) 