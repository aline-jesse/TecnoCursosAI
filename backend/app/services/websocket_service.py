#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Servi√ßo de WebSocket para Notifica√ß√µes em Tempo Real - TecnoCursos AI

Este m√≥dulo implementa um sistema completo de WebSocket para comunica√ß√£o
em tempo real entre o servidor e clientes, incluindo notifica√ß√µes,
atualiza√ß√µes de progresso, chat em tempo real e broadcasting.

Funcionalidades:
- Notifica√ß√µes push em tempo real
- Atualiza√ß√µes de progresso de uploads/processamento
- Chat ao vivo para suporte
- Broadcasting de eventos do sistema
- Salas de usu√°rios por projeto
- Autentica√ß√£o de conex√µes WebSocket

Autor: TecnoCursos AI System
Data: 17/01/2025
"""

import asyncio
import json
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Set, Any, Callable
from dataclasses import dataclass, asdict
from enum import Enum
import uuid
import logging
from contextlib import asynccontextmanager

try:
    from fastapi import WebSocket, WebSocketDisconnect, status
    from fastapi.websockets import WebSocketState
    FASTAPI_AVAILABLE = True
except ImportError:
    FASTAPI_AVAILABLE = False

try:
    from app.logger import get_logger
    from app.auth import decode_jwt_token
    logger = get_logger("websocket_service")
except ImportError:
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger("websocket_service")

# ============================================================================
# ENUMS E ESTRUTURAS DE DADOS
# ============================================================================

class NotificationType(Enum):
    """Tipos de notifica√ß√µes suportadas."""
    INFO = "info"
    SUCCESS = "success"
    WARNING = "warning"
    ERROR = "error"
    PROGRESS = "progress"
    SYSTEM = "system"
    CHAT = "chat"
    UPLOAD = "upload"
    PROCESSING = "processing"

class ConnectionStatus(Enum):
    """Status de conex√£o WebSocket."""
    CONNECTING = "connecting"
    CONNECTED = "connected"
    DISCONNECTED = "disconnected"
    ERROR = "error"

@dataclass
class WebSocketMessage:
    """Estrutura padronizada de mensagem WebSocket."""
    id: str
    type: NotificationType
    title: str
    message: str
    data: Dict[str, Any]
    timestamp: datetime
    user_id: Optional[int] = None
    room: Optional[str] = None
    priority: int = 1  # 1=baixa, 2=m√©dia, 3=alta, 4=cr√≠tica

@dataclass
class ConnectionInfo:
    """Informa√ß√µes sobre uma conex√£o WebSocket."""
    websocket: Any
    user_id: Optional[int]
    username: Optional[str]
    connected_at: datetime
    last_activity: datetime
    rooms: Set[str]
    session_id: str
    ip_address: str
    user_agent: str

# ============================================================================
# GERENCIADOR DE CONEX√ïES WEBSOCKET
# ============================================================================

class WebSocketConnectionManager:
    """Gerenciador central de conex√µes WebSocket."""
    
    def __init__(self):
        # Conex√µes ativas: session_id -> ConnectionInfo
        self.active_connections: Dict[str, ConnectionInfo] = {}
        
        # Conex√µes por usu√°rio: user_id -> Set[session_id]
        self.user_connections: Dict[int, Set[str]] = {}
        
        # Salas de usu√°rios: room_name -> Set[session_id]
        self.rooms: Dict[str, Set[str]] = {}
        
        # Hist√≥rico de mensagens por sala (√∫ltimas 50)
        self.room_history: Dict[str, List[WebSocketMessage]] = {}
        
        # Callbacks para eventos
        self.event_callbacks: Dict[str, List[Callable]] = {}
        
        # Estat√≠sticas
        self.stats = {
            'total_connections': 0,
            'total_messages': 0,
            'total_disconnections': 0,
            'start_time': datetime.now()
        }
    
    async def connect(
        self, 
        websocket: WebSocket, 
        token: Optional[str] = None,
        ip_address: str = "unknown",
        user_agent: str = "unknown"
    ) -> str:
        """Conectar um novo cliente WebSocket."""
        session_id = str(uuid.uuid4())
        
        try:
            await websocket.accept()
            
            # Autentica√ß√£o opcional
            user_id = None
            username = None
            if token:
                try:
                    user_data = decode_jwt_token(token)
                    user_id = user_data.get('sub')
                    username = user_data.get('username')
                except Exception as e:
                    logger.warning(f"Token WebSocket inv√°lido: {e}")
            
            # Criar informa√ß√µes da conex√£o
            connection_info = ConnectionInfo(
                websocket=websocket,
                user_id=user_id,
                username=username,
                connected_at=datetime.now(),
                last_activity=datetime.now(),
                rooms=set(),
                session_id=session_id,
                ip_address=ip_address,
                user_agent=user_agent
            )
            
            # Registrar conex√£o
            self.active_connections[session_id] = connection_info
            
            if user_id:
                if user_id not in self.user_connections:
                    self.user_connections[user_id] = set()
                self.user_connections[user_id].add(session_id)
            
            # Atualizar estat√≠sticas
            self.stats['total_connections'] += 1
            
            # Enviar mensagem de boas-vindas
            welcome_message = WebSocketMessage(
                id=str(uuid.uuid4()),
                type=NotificationType.SUCCESS,
                title="Conectado",
                message=f"WebSocket conectado com sucesso! Session: {session_id[:8]}",
                data={
                    'session_id': session_id,
                    'server_time': datetime.now().isoformat(),
                    'user_id': user_id,
                    'username': username
                },
                timestamp=datetime.now(),
                user_id=user_id
            )
            
            await self._send_to_connection(session_id, welcome_message)
            
            # Disparar evento de conex√£o
            await self._trigger_event('user_connected', {
                'session_id': session_id,
                'user_id': user_id,
                'username': username
            })
            
            logger.info(f"‚úÖ WebSocket conectado: {session_id[:8]} (user: {user_id})")
            return session_id
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao conectar WebSocket: {e}")
            raise
    
    async def disconnect(self, session_id: str):
        """Desconectar um cliente WebSocket."""
        if session_id not in self.active_connections:
            return
        
        connection_info = self.active_connections[session_id]
        
        try:
            # Remover das salas
            for room in list(connection_info.rooms):
                await self.leave_room(session_id, room)
            
            # Remover das conex√µes de usu√°rio
            if connection_info.user_id:
                user_sessions = self.user_connections.get(connection_info.user_id, set())
                user_sessions.discard(session_id)
                if not user_sessions:
                    del self.user_connections[connection_info.user_id]
            
            # Remover conex√£o
            del self.active_connections[session_id]
            
            # Atualizar estat√≠sticas
            self.stats['total_disconnections'] += 1
            
            # Disparar evento de desconex√£o
            await self._trigger_event('user_disconnected', {
                'session_id': session_id,
                'user_id': connection_info.user_id,
                'username': connection_info.username
            })
            
            logger.info(f"üîå WebSocket desconectado: {session_id[:8]}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao desconectar WebSocket: {e}")
    
    async def join_room(self, session_id: str, room_name: str):
        """Adicionar usu√°rio a uma sala."""
        if session_id not in self.active_connections:
            return False
        
        connection_info = self.active_connections[session_id]
        connection_info.rooms.add(room_name)
        
        if room_name not in self.rooms:
            self.rooms[room_name] = set()
        self.rooms[room_name].add(session_id)
        
        # Enviar hist√≥rico da sala
        if room_name in self.room_history:
            for message in self.room_history[room_name][-10:]:  # √öltimas 10
                await self._send_to_connection(session_id, message)
        
        # Notificar entrada na sala
        join_message = WebSocketMessage(
            id=str(uuid.uuid4()),
            type=NotificationType.INFO,
            title="Sala",
            message=f"Entrou na sala: {room_name}",
            data={'room': room_name, 'action': 'joined'},
            timestamp=datetime.now(),
            user_id=connection_info.user_id,
            room=room_name
        )
        
        await self._send_to_connection(session_id, join_message)
        
        logger.info(f"üè† {session_id[:8]} entrou na sala: {room_name}")
        return True
    
    async def leave_room(self, session_id: str, room_name: str):
        """Remover usu√°rio de uma sala."""
        if session_id not in self.active_connections:
            return False
        
        connection_info = self.active_connections[session_id]
        connection_info.rooms.discard(room_name)
        
        if room_name in self.rooms:
            self.rooms[room_name].discard(session_id)
            if not self.rooms[room_name]:
                del self.rooms[room_name]
        
        logger.info(f"üö™ {session_id[:8]} saiu da sala: {room_name}")
        return True
    
    async def send_to_user(self, user_id: int, message: WebSocketMessage):
        """Enviar mensagem para todas as conex√µes de um usu√°rio."""
        if user_id not in self.user_connections:
            return False
        
        message.user_id = user_id
        sent_count = 0
        
        for session_id in list(self.user_connections[user_id]):
            if await self._send_to_connection(session_id, message):
                sent_count += 1
        
        return sent_count > 0
    
    async def send_to_room(self, room_name: str, message: WebSocketMessage):
        """Enviar mensagem para todos os usu√°rios em uma sala."""
        if room_name not in self.rooms:
            return False
        
        message.room = room_name
        
        # Adicionar ao hist√≥rico da sala
        if room_name not in self.room_history:
            self.room_history[room_name] = []
        self.room_history[room_name].append(message)
        
        # Manter apenas √∫ltimas 50 mensagens
        if len(self.room_history[room_name]) > 50:
            self.room_history[room_name] = self.room_history[room_name][-50:]
        
        sent_count = 0
        for session_id in list(self.rooms[room_name]):
            if await self._send_to_connection(session_id, message):
                sent_count += 1
        
        return sent_count > 0
    
    async def broadcast(self, message: WebSocketMessage):
        """Enviar mensagem para todas as conex√µes ativas."""
        sent_count = 0
        
        for session_id in list(self.active_connections.keys()):
            if await self._send_to_connection(session_id, message):
                sent_count += 1
        
        return sent_count > 0
    
    async def _send_to_connection(self, session_id: str, message: WebSocketMessage) -> bool:
        """Enviar mensagem para uma conex√£o espec√≠fica."""
        if session_id not in self.active_connections:
            return False
        
        connection_info = self.active_connections[session_id]
        
        try:
            # Verificar se a conex√£o ainda est√° ativa
            if connection_info.websocket.client_state == WebSocketState.DISCONNECTED:
                await self.disconnect(session_id)
                return False
            
            # Preparar dados da mensagem
            message_data = {
                'id': message.id,
                'type': message.type.value,
                'title': message.title,
                'message': message.message,
                'data': message.data,
                'timestamp': message.timestamp.isoformat(),
                'priority': message.priority
            }
            
            if message.user_id:
                message_data['user_id'] = message.user_id
            if message.room:
                message_data['room'] = message.room
            
            # Enviar mensagem
            await connection_info.websocket.send_text(json.dumps(message_data))
            
            # Atualizar atividade
            connection_info.last_activity = datetime.now()
            
            # Atualizar estat√≠sticas
            self.stats['total_messages'] += 1
            
            return True
            
        except WebSocketDisconnect:
            await self.disconnect(session_id)
            return False
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar mensagem WebSocket: {e}")
            await self.disconnect(session_id)
            return False
    
    async def _trigger_event(self, event_name: str, data: Dict[str, Any]):
        """Disparar evento para callbacks registrados."""
        if event_name in self.event_callbacks:
            for callback in self.event_callbacks[event_name]:
                try:
                    await callback(data)
                except Exception as e:
                    logger.error(f"Erro em callback de evento {event_name}: {e}")
    
    def add_event_callback(self, event_name: str, callback: Callable):
        """Adicionar callback para evento."""
        if event_name not in self.event_callbacks:
            self.event_callbacks[event_name] = []
        self.event_callbacks[event_name].append(callback)
    
    def get_connection_stats(self) -> Dict[str, Any]:
        """Obter estat√≠sticas das conex√µes."""
        active_count = len(self.active_connections)
        authenticated_count = sum(1 for conn in self.active_connections.values() if conn.user_id)
        
        return {
            'active_connections': active_count,
            'authenticated_connections': authenticated_count,
            'total_rooms': len(self.rooms),
            'total_connections_ever': self.stats['total_connections'],
            'total_messages_sent': self.stats['total_messages'],
            'total_disconnections': self.stats['total_disconnections'],
            'uptime_seconds': (datetime.now() - self.stats['start_time']).total_seconds(),
            'users_by_room': {room: len(sessions) for room, sessions in self.rooms.items()}
        }

# ============================================================================
# SERVI√áO DE NOTIFICA√á√ïES
# ============================================================================

class NotificationService:
    """Servi√ßo de notifica√ß√µes em tempo real."""
    
    def __init__(self, connection_manager: WebSocketConnectionManager):
        self.connection_manager = connection_manager
        self.notification_queue = asyncio.Queue()
        self.processing = False
    
    async def start_processing(self):
        """Iniciar processamento de notifica√ß√µes."""
        if self.processing:
            return
        
        self.processing = True
        asyncio.create_task(self._process_notifications())
        logger.info("üöÄ Servi√ßo de notifica√ß√µes iniciado")
    
    async def stop_processing(self):
        """Parar processamento de notifica√ß√µes."""
        self.processing = False
        logger.info("‚èπÔ∏è Servi√ßo de notifica√ß√µes parado")
    
    async def _process_notifications(self):
        """Loop de processamento de notifica√ß√µes."""
        while self.processing:
            try:
                # Aguardar notifica√ß√£o na fila
                notification = await asyncio.wait_for(
                    self.notification_queue.get(), 
                    timeout=1.0
                )
                
                # Processar notifica√ß√£o
                await self._handle_notification(notification)
                
            except asyncio.TimeoutError:
                continue
            except Exception as e:
                logger.error(f"Erro no processamento de notifica√ß√µes: {e}")
                await asyncio.sleep(1)
    
    async def _handle_notification(self, notification: Dict[str, Any]):
        """Processar uma notifica√ß√£o."""
        try:
            # Criar mensagem WebSocket
            message = WebSocketMessage(
                id=notification.get('id', str(uuid.uuid4())),
                type=NotificationType(notification.get('type', 'info')),
                title=notification.get('title', 'Notifica√ß√£o'),
                message=notification.get('message', ''),
                data=notification.get('data', {}),
                timestamp=datetime.now(),
                user_id=notification.get('user_id'),
                room=notification.get('room'),
                priority=notification.get('priority', 1)
            )
            
            # Determinar destino e enviar
            if notification.get('user_id'):
                await self.connection_manager.send_to_user(notification['user_id'], message)
            elif notification.get('room'):
                await self.connection_manager.send_to_room(notification['room'], message)
            elif notification.get('broadcast'):
                await self.connection_manager.broadcast(message)
            
        except Exception as e:
            logger.error(f"Erro ao processar notifica√ß√£o: {e}")
    
    async def notify_user(
        self, 
        user_id: int, 
        title: str, 
        message: str, 
        type: NotificationType = NotificationType.INFO,
        data: Dict[str, Any] = None,
        priority: int = 1
    ):
        """Enviar notifica√ß√£o para um usu√°rio espec√≠fico."""
        notification = {
            'user_id': user_id,
            'title': title,
            'message': message,
            'type': type.value,
            'data': data or {},
            'priority': priority
        }
        
        await self.notification_queue.put(notification)
    
    async def notify_room(
        self, 
        room: str, 
        title: str, 
        message: str, 
        type: NotificationType = NotificationType.INFO,
        data: Dict[str, Any] = None,
        priority: int = 1
    ):
        """Enviar notifica√ß√£o para uma sala."""
        notification = {
            'room': room,
            'title': title,
            'message': message,
            'type': type.value,
            'data': data or {},
            'priority': priority
        }
        
        await self.notification_queue.put(notification)
    
    async def broadcast_notification(
        self, 
        title: str, 
        message: str, 
        type: NotificationType = NotificationType.SYSTEM,
        data: Dict[str, Any] = None,
        priority: int = 2
    ):
        """Enviar notifica√ß√£o para todos os usu√°rios conectados."""
        notification = {
            'broadcast': True,
            'title': title,
            'message': message,
            'type': type.value,
            'data': data or {},
            'priority': priority
        }
        
        await self.notification_queue.put(notification)

# ============================================================================
# SERVI√áO DE PROGRESSO EM TEMPO REAL
# ============================================================================

class ProgressTrackingService:
    """Servi√ßo para rastreamento de progresso em tempo real."""
    
    def __init__(self, notification_service: NotificationService):
        self.notification_service = notification_service
        self.active_tasks: Dict[str, Dict[str, Any]] = {}
    
    async def start_task(
        self, 
        task_id: str, 
        user_id: int, 
        title: str, 
        total_steps: int = 100,
        description: str = ""
    ):
        """Iniciar rastreamento de uma tarefa."""
        self.active_tasks[task_id] = {
            'user_id': user_id,
            'title': title,
            'description': description,
            'total_steps': total_steps,
            'current_step': 0,
            'status': 'started',
            'start_time': datetime.now(),
            'last_update': datetime.now()
        }
        
        await self.notification_service.notify_user(
            user_id=user_id,
            title=f"üöÄ {title}",
            message=f"Iniciado: {description}",
            type=NotificationType.PROGRESS,
            data={
                'task_id': task_id,
                'progress': 0,
                'status': 'started',
                'total_steps': total_steps
            },
            priority=2
        )
    
    async def update_progress(
        self, 
        task_id: str, 
        current_step: int, 
        status_message: str = "",
        data: Dict[str, Any] = None
    ):
        """Atualizar progresso de uma tarefa."""
        if task_id not in self.active_tasks:
            return False
        
        task = self.active_tasks[task_id]
        task['current_step'] = current_step
        task['last_update'] = datetime.now()
        
        progress_percentage = min(100, (current_step / task['total_steps']) * 100)
        
        await self.notification_service.notify_user(
            user_id=task['user_id'],
            title=f"‚è≥ {task['title']}",
            message=status_message or f"Progresso: {progress_percentage:.1f}%",
            type=NotificationType.PROGRESS,
            data={
                'task_id': task_id,
                'progress': progress_percentage,
                'current_step': current_step,
                'total_steps': task['total_steps'],
                'status': 'in_progress',
                **(data or {})
            },
            priority=2
        )
        
        return True
    
    async def complete_task(
        self, 
        task_id: str, 
        success: bool = True, 
        final_message: str = "",
        result_data: Dict[str, Any] = None
    ):
        """Finalizar uma tarefa."""
        if task_id not in self.active_tasks:
            return False
        
        task = self.active_tasks[task_id]
        
        status = 'completed' if success else 'failed'
        notification_type = NotificationType.SUCCESS if success else NotificationType.ERROR
        icon = "‚úÖ" if success else "‚ùå"
        
        await self.notification_service.notify_user(
            user_id=task['user_id'],
            title=f"{icon} {task['title']}",
            message=final_message or f"Tarefa {'conclu√≠da' if success else 'falhada'}!",
            type=notification_type,
            data={
                'task_id': task_id,
                'progress': 100,
                'status': status,
                'duration_seconds': (datetime.now() - task['start_time']).total_seconds(),
                **(result_data or {})
            },
            priority=3
        )
        
        # Remover da lista de tarefas ativas
        del self.active_tasks[task_id]
        return True

# ============================================================================
# INST√ÇNCIAS GLOBAIS
# ============================================================================

# Inst√¢ncias globais dos servi√ßos
connection_manager = WebSocketConnectionManager()
notification_service = NotificationService(connection_manager)
progress_service = ProgressTrackingService(notification_service)

def get_websocket_services():
    """Obter inst√¢ncias dos servi√ßos WebSocket."""
    return {
        'connection_manager': connection_manager,
        'notification_service': notification_service,
        'progress_service': progress_service
    }

# Fun√ß√£o de compatibilidade - exportar como websocket_service
websocket_service = {
    'connection_manager': connection_manager,
    'notification_service': notification_service,
    'progress_service': progress_service,
    'get_services': get_websocket_services
}

async def start_websocket_services():
    """Iniciar todos os servi√ßos WebSocket."""
    try:
        await notification_service.start_processing()
        logger.info("‚úÖ Servi√ßos WebSocket iniciados com sucesso!")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erro ao iniciar servi√ßos WebSocket: {e}")
        return False

async def stop_websocket_services():
    """Parar todos os servi√ßos WebSocket."""
    try:
        await notification_service.stop_processing()
        logger.info("‚èπÔ∏è Servi√ßos WebSocket parados")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erro ao parar servi√ßos WebSocket: {e}")
        return False

# ============================================================================
# DEMONSTRA√á√ÉO DO SISTEMA
# ============================================================================

def demonstrate_websocket_system():
    """Demonstrar funcionamento do sistema WebSocket."""
    print("\n" + "="*80)
    print("üåê SISTEMA WEBSOCKET EM TEMPO REAL - TECNOCURSOS AI")
    print("="*80)
    
    print("\nüì° FUNCIONALIDADES IMPLEMENTADAS:")
    funcionalidades = [
        "Gerenciamento de conex√µes WebSocket",
        "Notifica√ß√µes push em tempo real",
        "Salas de usu√°rios por projeto",
        "Chat ao vivo para suporte",
        "Atualiza√ß√µes de progresso",
        "Broadcasting de eventos",
        "Autentica√ß√£o de conex√µes",
        "Hist√≥rico de mensagens",
        "Estat√≠sticas de conex√µes",
        "Sistema de callbacks de eventos"
    ]
    
    for i, func in enumerate(funcionalidades, 1):
        print(f"   ‚úÖ {i:2d}. {func}")
    
    print("\nüõ†Ô∏è COMPONENTES PRINCIPAIS:")
    print("   üîå WebSocketConnectionManager - Gerencia conex√µes")
    print("   üì¢ NotificationService - Servi√ßo de notifica√ß√µes") 
    print("   ‚è≥ ProgressTrackingService - Rastreamento de progresso")
    print("   üìä Analytics Integration - M√©tricas em tempo real")
    
    print("\nüéØ TIPOS DE NOTIFICA√á√ÉO:")
    tipos = [
        "INFO - Informa√ß√µes gerais",
        "SUCCESS - Opera√ß√µes bem-sucedidas",
        "WARNING - Avisos importantes",
        "ERROR - Erros e falhas",
        "PROGRESS - Atualiza√ß√µes de progresso",
        "SYSTEM - Notifica√ß√µes do sistema",
        "CHAT - Mensagens de chat",
        "UPLOAD - Status de uploads"
    ]
    
    for tipo in tipos:
        print(f"   üìã {tipo}")
    
    print("\nüöÄ CASOS DE USO:")
    print("   üì§ Upload de arquivos com progresso em tempo real")
    print("   üé¨ Gera√ß√£o de v√≠deos com status em tempo real")
    print("   üí¨ Chat de suporte ao vivo")
    print("   üîî Notifica√ß√µes de sistema importantes")
    print("   üìä Atualiza√ß√µes de m√©tricas em tempo real")
    print("   üë• Colabora√ß√£o em projetos")
    
    print("\n" + "="*80)
    print("‚ú® SISTEMA WEBSOCKET IMPLEMENTADO COM SUCESSO!")
    print("="*80)

if __name__ == "__main__":
    demonstrate_websocket_system() 