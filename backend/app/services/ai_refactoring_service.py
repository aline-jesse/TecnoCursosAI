#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AI-Powered Refactoring Service - TecnoCursos AI

Este m√≥dulo implementa um sistema avan√ßado de refactoring automatizado
usando t√©cnicas de IA generativa, seguindo as melhores pr√°ticas da ind√∫stria.

Baseado nas tend√™ncias atuais de refactoring com IA:
- Extract Method Automation
- Code Smell Detection
- Performance Optimization
- Security Enhancement
- Automated Testing

Refer√™ncias:
- Tabnine AI Refactoring Guide
- GitHub Copilot Best Practices
- AWS CodeWhisperer Patterns

Autor: TecnoCursos AI Team
Data: 2025-01-17
"""

import ast
import inspect
import logging
import re
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from enum import Enum
import hashlib

logger = logging.getLogger(__name__)

class RefactoringType(Enum):
    """Tipos de refactoring dispon√≠veis"""
    EXTRACT_METHOD = "extract_method"
    EXTRACT_CLASS = "extract_class"
    INLINE_METHOD = "inline_method"
    RENAME_VARIABLE = "rename_variable"
    OPTIMIZE_IMPORTS = "optimize_imports"
    REMOVE_DUPLICATION = "remove_duplication"
    IMPROVE_READABILITY = "improve_readability"
    ENHANCE_SECURITY = "enhance_security"
    BOOST_PERFORMANCE = "boost_performance"

class RefactoringSeverity(Enum):
    """Severidade das sugest√µes de refactoring"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"

@dataclass
class RefactoringSuggestion:
    """Sugest√£o de refactoring"""
    type: RefactoringType
    severity: RefactoringSeverity
    file_path: str
    line_start: int
    line_end: int
    description: str
    original_code: str
    suggested_code: str
    reasoning: str
    confidence: float
    estimated_impact: str
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'type': self.type.value,
            'severity': self.severity.value,
            'file_path': self.file_path,
            'line_start': self.line_start,
            'line_end': self.line_end,
            'description': self.description,
            'original_code': self.original_code,
            'suggested_code': self.suggested_code,
            'reasoning': self.reasoning,
            'confidence': self.confidence,
            'estimated_impact': self.estimated_impact
        }

@dataclass
class CodeSmell:
    """Detec√ß√£o de code smell"""
    name: str
    severity: RefactoringSeverity
    description: str
    file_path: str
    line_number: int
    suggestion: str

class AIRefactoringService:
    """Servi√ßo de refactoring com IA"""
    
    def __init__(self):
        self.suggestions_cache = {}
        self.refactoring_history = []
        self.performance_metrics = {}
        
        # Configura√ß√µes de thresholds
        self.complexity_threshold = 10
        self.line_count_threshold = 50
        self.parameter_count_threshold = 5
        
        logger.info("‚úÖ AI Refactoring Service inicializado")
    
    def analyze_codebase(self, directory: str) -> List[RefactoringSuggestion]:
        """Analisar codebase completo e gerar sugest√µes"""
        suggestions = []
        
        try:
            for py_file in Path(directory).rglob("*.py"):
                if self._should_skip_file(py_file):
                    continue
                    
                file_suggestions = self.analyze_file(str(py_file))
                suggestions.extend(file_suggestions)
                
        except Exception as e:
            logger.error(f"Erro na an√°lise do codebase: {e}")
        
        # Priorizar sugest√µes
        suggestions.sort(key=lambda x: (
            x.severity.value,
            -x.confidence,
            x.estimated_impact
        ))
        
        logger.info(f"üìä An√°lise completa: {len(suggestions)} sugest√µes geradas")
        return suggestions
    
    def analyze_file(self, file_path: str) -> List[RefactoringSuggestion]:
        """Analisar arquivo espec√≠fico"""
        suggestions = []
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Gerar hash para cache
            content_hash = hashlib.md5(content.encode()).hexdigest()
            if content_hash in self.suggestions_cache:
                return self.suggestions_cache[content_hash]
            
            # Parse AST
            tree = ast.parse(content)
            
            # Detectar diferentes tipos de problemas
            suggestions.extend(self._detect_long_methods(tree, file_path, content))
            suggestions.extend(self._detect_complex_methods(tree, file_path, content))
            suggestions.extend(self._detect_duplicate_code(content, file_path))
            suggestions.extend(self._detect_security_issues(content, file_path))
            suggestions.extend(self._detect_performance_issues(tree, file_path, content))
            suggestions.extend(self._detect_readability_issues(tree, file_path, content))
            
            # Cache results
            self.suggestions_cache[content_hash] = suggestions
            
        except Exception as e:
            logger.error(f"Erro na an√°lise do arquivo {file_path}: {e}")
        
        return suggestions
    
    def _detect_long_methods(self, tree: ast.AST, file_path: str, content: str) -> List[RefactoringSuggestion]:
        """Detectar m√©todos muito longos"""
        suggestions = []
        lines = content.split('\n')
        
        for node in ast.walk(tree):
            if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)):
                start_line = node.lineno
                end_line = node.end_lineno or start_line
                method_lines = end_line - start_line + 1
                
                if method_lines > self.line_count_threshold:
                    original_code = '\n'.join(lines[start_line-1:end_line])
                    
                    # Sugerir divis√£o em m√©todos menores
                    suggested_code = self._suggest_method_extraction(node, original_code)
                    
                    suggestions.append(RefactoringSuggestion(
                        type=RefactoringType.EXTRACT_METHOD,
                        severity=RefactoringSeverity.MEDIUM,
                        file_path=file_path,
                        line_start=start_line,
                        line_end=end_line,
                        description=f"M√©todo '{node.name}' muito longo ({method_lines} linhas)",
                        original_code=original_code,
                        suggested_code=suggested_code,
                        reasoning=f"M√©todos com mais de {self.line_count_threshold} linhas s√£o dif√≠ceis de manter e testar",
                        confidence=0.8,
                        estimated_impact="Melhora na manutenibilidade e testabilidade"
                    ))
        
        return suggestions
    
    def _detect_complex_methods(self, tree: ast.AST, file_path: str, content: str) -> List[RefactoringSuggestion]:
        """Detectar m√©todos com alta complexidade ciclom√°tica"""
        suggestions = []
        
        for node in ast.walk(tree):
            if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)):
                complexity = self._calculate_cyclomatic_complexity(node)
                
                if complexity > self.complexity_threshold:
                    lines = content.split('\n')
                    start_line = node.lineno
                    end_line = node.end_lineno or start_line
                    original_code = '\n'.join(lines[start_line-1:end_line])
                    
                    suggestions.append(RefactoringSuggestion(
                        type=RefactoringType.EXTRACT_METHOD,
                        severity=RefactoringSeverity.HIGH,
                        file_path=file_path,
                        line_start=start_line,
                        line_end=end_line,
                        description=f"M√©todo '{node.name}' com alta complexidade ciclom√°tica ({complexity})",
                        original_code=original_code,
                        suggested_code=self._suggest_complexity_reduction(node, original_code),
                        reasoning=f"Complexidade ciclom√°tica de {complexity} excede o limite recomendado de {self.complexity_threshold}",
                        confidence=0.9,
                        estimated_impact="Redu√ß√£o significativa na complexidade e melhora na manutenibilidade"
                    ))
        
        return suggestions
    
    def _detect_duplicate_code(self, content: str, file_path: str) -> List[RefactoringSuggestion]:
        """Detectar c√≥digo duplicado"""
        suggestions = []
        lines = content.split('\n')
        
        # Procurar por blocos similares (simplificado)
        for i in range(len(lines) - 5):
            block1 = lines[i:i+5]
            for j in range(i+10, len(lines) - 5):
                block2 = lines[j:j+5]
                
                # Comparar similaridade
                similarity = self._calculate_similarity(block1, block2)
                if similarity > 0.8:
                    suggestions.append(RefactoringSuggestion(
                        type=RefactoringType.REMOVE_DUPLICATION,
                        severity=RefactoringSeverity.MEDIUM,
                        file_path=file_path,
                        line_start=i+1,
                        line_end=i+5,
                        description="C√≥digo duplicado detectado",
                        original_code='\n'.join(block1),
                        suggested_code=self._suggest_duplication_removal(block1, block2),
                        reasoning="C√≥digo duplicado aumenta o custo de manuten√ß√£o",
                        confidence=similarity,
                        estimated_impact="Redu√ß√£o na duplica√ß√£o e melhora na manutenibilidade"
                    ))
                    break
        
        return suggestions
    
    def _detect_security_issues(self, content: str, file_path: str) -> List[RefactoringSuggestion]:
        """Detectar problemas de seguran√ßa"""
        suggestions = []
        lines = content.split('\n')
        
        # Padr√µes de seguran√ßa conhecidos
        security_patterns = [
            (r'eval\s*\(', "Uso de eval() √© perigoso", RefactoringSeverity.CRITICAL),
            (r'exec\s*\(', "Uso de exec() √© perigoso", RefactoringSeverity.CRITICAL),
            (r'subprocess\.call\([^)]*shell=True', "subprocess com shell=True √© arriscado", RefactoringSeverity.HIGH),
            (r'pickle\.loads?\(', "pickle.load pode ser inseguro", RefactoringSeverity.MEDIUM),
            (r'os\.system\(', "os.system √© vulner√°vel a command injection", RefactoringSeverity.HIGH),
        ]
        
        for i, line in enumerate(lines):
            for pattern, description, severity in security_patterns:
                if re.search(pattern, line, re.IGNORECASE):
                    suggestions.append(RefactoringSuggestion(
                        type=RefactoringType.ENHANCE_SECURITY,
                        severity=severity,
                        file_path=file_path,
                        line_start=i+1,
                        line_end=i+1,
                        description=description,
                        original_code=line.strip(),
                        suggested_code=self._suggest_security_fix(line, pattern),
                        reasoning="Potencial vulnerabilidade de seguran√ßa detectada",
                        confidence=0.85,
                        estimated_impact="Melhora significativa na seguran√ßa"
                    ))
        
        return suggestions
    
    def _detect_performance_issues(self, tree: ast.AST, file_path: str, content: str) -> List[RefactoringSuggestion]:
        """Detectar problemas de performance"""
        suggestions = []
        lines = content.split('\n')
        
        for node in ast.walk(tree):
            # Detectar loops ineficientes
            if isinstance(node, (ast.For, ast.While)):
                # Verificar se h√° opera√ß√µes custosas dentro de loops
                for child in ast.walk(node):
                    if isinstance(child, ast.Call):
                        if self._is_expensive_operation(child):
                            start_line = node.lineno
                            end_line = node.end_lineno or start_line
                            original_code = '\n'.join(lines[start_line-1:end_line])
                            
                            suggestions.append(RefactoringSuggestion(
                                type=RefactoringType.BOOST_PERFORMANCE,
                                severity=RefactoringSeverity.MEDIUM,
                                file_path=file_path,
                                line_start=start_line,
                                line_end=end_line,
                                description="Opera√ß√£o custosa dentro de loop",
                                original_code=original_code,
                                suggested_code=self._suggest_performance_optimization(original_code),
                                reasoning="Opera√ß√µes custosas em loops podem impactar performance",
                                confidence=0.7,
                                estimated_impact="Melhora na performance do loop"
                            ))
                            break
        
        return suggestions
    
    def _detect_readability_issues(self, tree: ast.AST, file_path: str, content: str) -> List[RefactoringSuggestion]:
        """Detectar problemas de legibilidade"""
        suggestions = []
        lines = content.split('\n')
        
        for node in ast.walk(tree):
            # Detectar nomes de vari√°veis pouco descritivos
            if isinstance(node, ast.Name):
                if len(node.id) <= 2 and node.id not in ['i', 'j', 'k', 'x', 'y', 'z']:
                    suggestions.append(RefactoringSuggestion(
                        type=RefactoringType.RENAME_VARIABLE,
                        severity=RefactoringSeverity.LOW,
                        file_path=file_path,
                        line_start=node.lineno,
                        line_end=node.lineno,
                        description=f"Nome de vari√°vel pouco descritivo: '{node.id}'",
                        original_code=lines[node.lineno-1].strip(),
                        suggested_code=self._suggest_better_variable_name(node.id, lines[node.lineno-1]),
                        reasoning="Nomes descritivos melhoram a legibilidade do c√≥digo",
                        confidence=0.6,
                        estimated_impact="Melhora na legibilidade"
                    ))
        
        return suggestions
    
    def apply_refactoring(self, suggestion: RefactoringSuggestion) -> bool:
        """Aplicar uma sugest√£o de refactoring"""
        try:
            with open(suggestion.file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            lines = content.split('\n')
            
            # Substituir o c√≥digo
            new_lines = (
                lines[:suggestion.line_start-1] + 
                suggestion.suggested_code.split('\n') + 
                lines[suggestion.line_end:]
            )
            
            # Backup do arquivo original
            backup_path = f"{suggestion.file_path}.backup.{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            with open(backup_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            # Escrever c√≥digo refatorado
            with open(suggestion.file_path, 'w', encoding='utf-8') as f:
                f.write('\n'.join(new_lines))
            
            # Adicionar ao hist√≥rico
            self.refactoring_history.append({
                'timestamp': datetime.now(),
                'suggestion': suggestion.to_dict(),
                'backup_path': backup_path,
                'status': 'applied'
            })
            
            logger.info(f"‚úÖ Refactoring aplicado: {suggestion.description}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao aplicar refactoring: {e}")
            return False
    
    # M√©todos auxiliares
    def _should_skip_file(self, file_path: Path) -> bool:
        """Verificar se arquivo deve ser ignorado"""
        skip_patterns = [
            '__pycache__',
            '.git',
            'migrations',
            'tests',
            'venv',
            '.pytest_cache'
        ]
        return any(pattern in str(file_path) for pattern in skip_patterns)
    
    def _calculate_cyclomatic_complexity(self, node: ast.AST) -> int:
        """Calcular complexidade ciclom√°tica"""
        complexity = 1
        for child in ast.walk(node):
            if isinstance(child, (ast.If, ast.While, ast.For, ast.Try, ast.With, ast.ExceptHandler)):
                complexity += 1
            elif isinstance(child, ast.BoolOp):
                complexity += len(child.values) - 1
        return complexity
    
    def _calculate_similarity(self, block1: List[str], block2: List[str]) -> float:
        """Calcular similaridade entre blocos de c√≥digo"""
        if len(block1) != len(block2):
            return 0.0
        
        matches = sum(1 for a, b in zip(block1, block2) if a.strip() == b.strip())
        return matches / len(block1)
    
    def _is_expensive_operation(self, node: ast.Call) -> bool:
        """Verificar se √© uma opera√ß√£o custosa"""
        expensive_ops = ['len', 'sorted', 'max', 'min', 'sum']
        if isinstance(node.func, ast.Name):
            return node.func.id in expensive_ops
        return False
    
    def _suggest_method_extraction(self, node: ast.AST, original_code: str) -> str:
        """Sugerir extra√ß√£o de m√©todo"""
        return f"""# M√©todo extra√≠do para melhor legibilidade
def extracted_method_{node.name}(self):
    # TODO: Extrair l√≥gica complexa aqui
    pass

def {node.name}(self):
    # C√≥digo simplificado
    self.extracted_method_{node.name}()
    # Resto da implementa√ß√£o
"""
    
    def _suggest_complexity_reduction(self, node: ast.AST, original_code: str) -> str:
        """Sugerir redu√ß√£o de complexidade"""
        return f"""# C√≥digo refatorado para reduzir complexidade
def {node.name}(self):
    # Quebrar em m√©todos menores
    if self._validate_preconditions():
        return self._execute_main_logic()
    return self._handle_alternative_path()

def _validate_preconditions(self):
    # L√≥gica de valida√ß√£o
    pass

def _execute_main_logic(self):
    # L√≥gica principal
    pass

def _handle_alternative_path(self):
    # Caminho alternativo
    pass
"""
    
    def _suggest_duplication_removal(self, block1: List[str], block2: List[str]) -> str:
        """Sugerir remo√ß√£o de duplica√ß√£o"""
        return f"""# Extrair c√≥digo comum em m√©todo reutiliz√°vel
def common_logic(self, param1, param2):
    # L√≥gica comum extra√≠da
    {chr(10).join(block1)}

# Usar o m√©todo comum nos locais duplicados
self.common_logic(arg1, arg2)
"""
    
    def _suggest_security_fix(self, line: str, pattern: str) -> str:
        """Sugerir corre√ß√£o de seguran√ßa"""
        if 'eval' in pattern:
            return "# Use ast.literal_eval ou json.loads para seguran√ßa"
        elif 'subprocess' in pattern:
            return line.replace('shell=True', 'shell=False') + " # Removido shell=True"
        elif 'pickle' in pattern:
            return "# Use json ao inv√©s de pickle para dados n√£o confi√°veis"
        return f"# TODO: Revisar seguran√ßa desta linha\n{line}"
    
    def _suggest_performance_optimization(self, original_code: str) -> str:
        """Sugerir otimiza√ß√£o de performance"""
        return f"""# Otimiza√ß√£o: mover opera√ß√µes custosas para fora do loop
cached_result = expensive_operation()  # Calcular uma vez
{original_code.replace('expensive_operation()', 'cached_result')}
"""
    
    def _suggest_better_variable_name(self, old_name: str, line: str) -> str:
        """Sugerir nome melhor para vari√°vel"""
        suggestions = {
            'n': 'count',
            'd': 'data',
            'r': 'result',
            'f': 'file_handle',
            's': 'text_string'
        }
        new_name = suggestions.get(old_name, f"descriptive_{old_name}")
        return line.replace(old_name, new_name)
    
    def get_refactoring_stats(self) -> Dict[str, Any]:
        """Obter estat√≠sticas de refactoring"""
        return {
            'total_suggestions': len(self.suggestions_cache),
            'refactorings_applied': len(self.refactoring_history),
            'success_rate': len([r for r in self.refactoring_history if r['status'] == 'applied']) / max(len(self.refactoring_history), 1),
            'most_common_type': max([r['suggestion']['type'] for r in self.refactoring_history], default='None'),
            'performance_metrics': self.performance_metrics
        }

# Inst√¢ncia global do servi√ßo
ai_refactoring_service = AIRefactoringService()

def get_ai_refactoring_service() -> AIRefactoringService:
    """Obter inst√¢ncia do servi√ßo de refactoring"""
    return ai_refactoring_service 