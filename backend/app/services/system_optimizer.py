#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Servi√ßo de Otimiza√ß√£o Autom√°tica do Sistema - TecnoCursos AI

Sistema inteligente de otimiza√ß√£o autom√°tica que:
- Monitora recursos do sistema em tempo real
- Executa otimiza√ß√µes autom√°ticas quando necess√°rio
- Libera mem√≥ria e espa√ßo em disco automaticamente
- Otimiza cache e performance
- Realiza limpeza de arquivos tempor√°rios
- Compacta bancos de dados
- Gerencia processes √≥rf√£os

Autor: TecnoCursos AI System
Data: 17/01/2025
"""

import gc
import os
import shutil
import sqlite3
import tempfile
import threading
import time
import asyncio
import psutil
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Any
import logging

try:
    from app.logger import get_logger
    from app.config import get_settings
    from app.database import engine
    logger = get_logger("system_optimizer")
    settings = get_settings()
except ImportError:
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger("system_optimizer")
    settings = None

class SystemOptimizer:
    """Otimizador autom√°tico do sistema"""
    
    def __init__(self):
        self.is_running = False
        self.optimization_thread = None
        self.last_optimization = None
        
        # Thresholds para otimiza√ß√£o autom√°tica
        self.memory_threshold = 85.0  # %
        self.disk_threshold = 80.0    # %
        self.cpu_threshold = 90.0     # %
        
        # Configura√ß√µes
        self.optimization_interval = 300  # 5 minutos
        self.aggressive_cleanup = False
        
        # Contadores
        self.stats = {
            "optimizations_run": 0,
            "memory_freed_mb": 0,
            "disk_freed_mb": 0,
            "files_cleaned": 0,
            "cache_hits": 0
        }
        
        logger.info("üöÄ System Optimizer inicializado")
    
    def start_optimization(self):
        """Iniciar otimiza√ß√£o autom√°tica"""
        if self.is_running:
            logger.warning("Otimizador j√° est√° rodando")
            return
        
        self.is_running = True
        self.optimization_thread = threading.Thread(
            target=self._optimization_loop,
            daemon=True
        )
        self.optimization_thread.start()
        logger.info("‚úÖ Otimiza√ß√£o autom√°tica iniciada")
    
    def stop_optimization(self):
        """Parar otimiza√ß√£o autom√°tica"""
        self.is_running = False
        if self.optimization_thread:
            self.optimization_thread.join(timeout=5)
        logger.info("‚èπÔ∏è Otimiza√ß√£o autom√°tica parada")
    
    def _optimization_loop(self):
        """Loop principal de otimiza√ß√£o"""
        while self.is_running:
            try:
                # Verificar se otimiza√ß√£o √© necess√°ria
                if self._should_optimize():
                    self._run_optimization()
                
                time.sleep(self.optimization_interval)
                
            except Exception as e:
                logger.error(f"Erro no loop de otimiza√ß√£o: {e}")
                time.sleep(60)  # Wait longer on error
    
    def _should_optimize(self) -> bool:
        """Verificar se otimiza√ß√£o √© necess√°ria"""
        try:
            # Verificar mem√≥ria
            memory = psutil.virtual_memory()
            if memory.percent > self.memory_threshold:
                logger.warning(f"üö® Mem√≥ria alta: {memory.percent:.1f}%")
                return True
            
            # Verificar disco
            disk = psutil.disk_usage('/')
            disk_percent = (disk.used / disk.total) * 100
            if disk_percent > self.disk_threshold:
                logger.warning(f"üö® Disco alto: {disk_percent:.1f}%")
                return True
            
            # Verificar CPU
            cpu = psutil.cpu_percent(interval=1)
            if cpu > self.cpu_threshold:
                logger.warning(f"üö® CPU alta: {cpu:.1f}%")
                return True
            
            # Otimiza√ß√£o peri√≥dica (a cada 30 minutos)
            if (self.last_optimization is None or 
                datetime.now() - self.last_optimization > timedelta(minutes=30)):
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"Erro ao verificar recursos: {e}")
            return False
    
    def _run_optimization(self):
        """Executar otimiza√ß√£o completa"""
        start_time = time.time()
        logger.info("üîß Iniciando otimiza√ß√£o do sistema...")
        
        try:
            # 1. Limpeza de mem√≥ria
            memory_freed = self._optimize_memory()
            
            # 2. Limpeza de disco
            disk_freed = self._optimize_disk()
            
            # 3. Otimiza√ß√£o de cache
            self._optimize_cache()
            
            # 4. Otimiza√ß√£o de banco de dados
            self._optimize_database()
            
            # 5. Limpeza de processos
            self._cleanup_processes()
            
            # Atualizar estat√≠sticas
            self.stats["optimizations_run"] += 1
            self.stats["memory_freed_mb"] += memory_freed
            self.stats["disk_freed_mb"] += disk_freed
            self.last_optimization = datetime.now()
            
            duration = time.time() - start_time
            logger.info(f"‚úÖ Otimiza√ß√£o conclu√≠da em {duration:.2f}s")
            logger.info(f"üìä Mem√≥ria liberada: {memory_freed:.1f}MB")
            logger.info(f"üìä Disco liberado: {disk_freed:.1f}MB")
            
        except Exception as e:
            logger.error(f"‚ùå Erro na otimiza√ß√£o: {e}")
    
    def _optimize_memory(self) -> float:
        """Otimizar uso de mem√≥ria"""
        memory_before = psutil.virtual_memory().used / 1024 / 1024  # MB
        
        try:
            # Force garbage collection
            collected = gc.collect()
            logger.info(f"üóëÔ∏è Garbage collection: {collected} objetos coletados")
            
            # Clear Python caches
            import sys
            if hasattr(sys, '_clear_type_cache'):
                sys._clear_type_cache()
            
            # Clear import caches
            import importlib
            if hasattr(importlib, 'invalidate_caches'):
                importlib.invalidate_caches()
            
        except Exception as e:
            logger.error(f"Erro na otimiza√ß√£o de mem√≥ria: {e}")
        
        memory_after = psutil.virtual_memory().used / 1024 / 1024  # MB
        memory_freed = max(0, memory_before - memory_after)
        
        return memory_freed
    
    def _optimize_disk(self) -> float:
        """Otimizar uso de disco"""
        disk_freed = 0.0
        
        try:
            # Limpeza de arquivos tempor√°rios
            disk_freed += self._cleanup_temp_files()
            
            # Limpeza de logs antigos
            disk_freed += self._cleanup_old_logs()
            
            # Limpeza de cache antigo
            disk_freed += self._cleanup_old_cache()
            
            # Limpeza de uploads √≥rf√£os
            disk_freed += self._cleanup_orphaned_uploads()
            
        except Exception as e:
            logger.error(f"Erro na otimiza√ß√£o de disco: {e}")
        
        return disk_freed
    
    def _cleanup_temp_files(self) -> float:
        """Limpeza de arquivos tempor√°rios"""
        disk_freed = 0.0
        
        try:
            # Limpar /tmp
            temp_dir = Path(tempfile.gettempdir())
            cutoff = datetime.now() - timedelta(hours=24)
            
            for file_path in temp_dir.glob("*"):
                try:
                    if file_path.is_file():
                        stat = file_path.stat()
                        if datetime.fromtimestamp(stat.st_mtime) < cutoff:
                            size_mb = stat.st_size / 1024 / 1024
                            file_path.unlink()
                            disk_freed += size_mb
                            self.stats["files_cleaned"] += 1
                except (OSError, PermissionError):
                    continue
            
            # Limpar temp do projeto
            if settings:
                project_temp = Path("temp")
                if project_temp.exists():
                    for file_path in project_temp.rglob("*"):
                        try:
                            if file_path.is_file():
                                size_mb = file_path.stat().st_size / 1024 / 1024
                                file_path.unlink()
                                disk_freed += size_mb
                                self.stats["files_cleaned"] += 1
                        except (OSError, PermissionError):
                            continue
            
        except Exception as e:
            logger.error(f"Erro na limpeza de tempor√°rios: {e}")
        
        return disk_freed
    
    def _cleanup_old_logs(self) -> float:
        """Limpeza de logs antigos"""
        disk_freed = 0.0
        
        try:
            logs_dir = Path("logs")
            if logs_dir.exists():
                cutoff = datetime.now() - timedelta(days=7)  # Logs > 7 dias
                
                for log_file in logs_dir.glob("*.log*"):
                    try:
                        stat = log_file.stat()
                        if datetime.fromtimestamp(stat.st_mtime) < cutoff:
                            size_mb = stat.st_size / 1024 / 1024
                            log_file.unlink()
                            disk_freed += size_mb
                            self.stats["files_cleaned"] += 1
                    except (OSError, PermissionError):
                        continue
            
        except Exception as e:
            logger.error(f"Erro na limpeza de logs: {e}")
        
        return disk_freed
    
    def _cleanup_old_cache(self) -> float:
        """Limpeza de cache antigo"""
        disk_freed = 0.0
        
        try:
            cache_dir = Path("cache")
            if cache_dir.exists():
                cutoff = datetime.now() - timedelta(days=3)  # Cache > 3 dias
                
                for cache_file in cache_dir.rglob("*"):
                    try:
                        if cache_file.is_file():
                            stat = cache_file.stat()
                            if datetime.fromtimestamp(stat.st_atime) < cutoff:
                                size_mb = stat.st_size / 1024 / 1024
                                cache_file.unlink()
                                disk_freed += size_mb
                                self.stats["files_cleaned"] += 1
                    except (OSError, PermissionError):
                        continue
            
        except Exception as e:
            logger.error(f"Erro na limpeza de cache: {e}")
        
        return disk_freed
    
    def _cleanup_orphaned_uploads(self) -> float:
        """Limpeza de uploads √≥rf√£os"""
        disk_freed = 0.0
        
        try:
            uploads_dir = Path("uploads")
            if uploads_dir.exists():
                # Buscar arquivos sem refer√™ncia no banco (simplificado)
                cutoff = datetime.now() - timedelta(hours=48)  # > 48h sem uso
                
                for upload_file in uploads_dir.rglob("*"):
                    try:
                        if upload_file.is_file():
                            stat = upload_file.stat()
                            if datetime.fromtimestamp(stat.st_atime) < cutoff:
                                size_mb = stat.st_size / 1024 / 1024
                                # Verificar se arquivo tem mais de 100MB
                                if size_mb > 100:
                                    upload_file.unlink()
                                    disk_freed += size_mb
                                    self.stats["files_cleaned"] += 1
                    except (OSError, PermissionError):
                        continue
            
        except Exception as e:
            logger.error(f"Erro na limpeza de uploads: {e}")
        
        return disk_freed
    
    def _optimize_cache(self):
        """Otimiza√ß√£o de cache"""
        try:
            # Limpar caches em mem√≥ria se dispon√≠vel
            try:
                from app.services.cache_service import get_default_cache
                cache = get_default_cache()
                if hasattr(cache, 'clear_expired'):
                    cache.clear_expired()
                    logger.info("üßπ Cache expirado limpo")
            except ImportError:
                pass
            
        except Exception as e:
            logger.error(f"Erro na otimiza√ß√£o de cache: {e}")
    
    def _optimize_database(self):
        """Otimiza√ß√£o de banco de dados"""
        try:
            # VACUUM no SQLite para compactar
            if engine and "sqlite" in str(engine.url):
                with engine.connect() as conn:
                    conn.execute("VACUUM")
                    conn.execute("ANALYZE")
                logger.info("üóÉÔ∏è Banco de dados otimizado (VACUUM + ANALYZE)")
            
        except Exception as e:
            logger.error(f"Erro na otimiza√ß√£o do banco: {e}")
    
    def _cleanup_processes(self):
        """Limpeza de processos √≥rf√£os"""
        try:
            # Verificar processos com alta mem√≥ria
            current_pid = os.getpid()
            current_process = psutil.Process(current_pid)
            
            # Log uso atual
            memory_info = current_process.memory_info()
            memory_mb = memory_info.rss / 1024 / 1024
            
            if memory_mb > 500:  # > 500MB
                logger.warning(f"‚ö†Ô∏è Processo usando {memory_mb:.1f}MB de mem√≥ria")
            
        except Exception as e:
            logger.error(f"Erro na verifica√ß√£o de processos: {e}")
    
    def force_optimization(self):
        """For√ßar otimiza√ß√£o imediata"""
        logger.info("üîß For√ßando otimiza√ß√£o imediata...")
        self.aggressive_cleanup = True
        self._run_optimization()
        self.aggressive_cleanup = False
    
    def get_optimization_stats(self) -> Dict[str, Any]:
        """Obter estat√≠sticas de otimiza√ß√£o"""
        return {
            "running": self.is_running,
            "last_optimization": self.last_optimization.isoformat() if self.last_optimization else None,
            "stats": self.stats.copy(),
            "thresholds": {
                "memory": self.memory_threshold,
                "disk": self.disk_threshold,
                "cpu": self.cpu_threshold
            },
            "current_usage": self._get_current_usage()
        }
    
    def _get_current_usage(self) -> Dict[str, float]:
        """Obter uso atual dos recursos"""
        try:
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            cpu = psutil.cpu_percent(interval=1)
            
            return {
                "memory_percent": memory.percent,
                "disk_percent": (disk.used / disk.total) * 100,
                "cpu_percent": cpu,
                "memory_available_mb": memory.available / 1024 / 1024,
                "disk_free_gb": disk.free / 1024 / 1024 / 1024
            }
        except Exception as e:
            logger.error(f"Erro ao obter uso atual: {e}")
            return {}

# ============================================================================
# INST√ÇNCIA GLOBAL E FUN√á√ïES DE CONVENI√äNCIA
# ============================================================================

system_optimizer = SystemOptimizer()

def start_system_optimizer():
    """Iniciar otimizador do sistema"""
    system_optimizer.start_optimization()
    logger.info("‚úÖ System Optimizer iniciado")

def stop_system_optimizer():
    """Parar otimizador do sistema"""
    system_optimizer.stop_optimization()
    logger.info("‚èπÔ∏è System Optimizer parado")

def force_system_optimization():
    """For√ßar otimiza√ß√£o imediata"""
    system_optimizer.force_optimization()

def get_system_optimizer():
    """Obter inst√¢ncia do otimizador"""
    return system_optimizer

# ============================================================================
# DEMONSTRA√á√ÉO DO SISTEMA
# ============================================================================

def demonstrate_system_optimizer():
    """Demonstrar funcionamento do otimizador"""
    print("\n" + "="*80)
    print("üöÄ SYSTEM OPTIMIZER - TECNOCURSOS AI")
    print("="*80)
    
    print("\nüõ†Ô∏è FUNCIONALIDADES IMPLEMENTADAS:")
    funcionalidades = [
        "Monitoramento autom√°tico de recursos",
        "Otimiza√ß√£o autom√°tica de mem√≥ria",
        "Limpeza inteligente de disco",
        "Otimiza√ß√£o de cache e banco",
        "Limpeza de arquivos tempor√°rios",
        "Remo√ß√£o de logs antigos",
        "Compacta√ß√£o de banco SQLite",
        "Monitoramento de processos",
        "Estat√≠sticas detalhadas",
        "Otimiza√ß√£o for√ßada sob demanda"
    ]
    
    for i, func in enumerate(funcionalidades, 1):
        print(f"   ‚úÖ {i:2d}. {func}")
    
    print("\n‚öôÔ∏è THRESHOLDS DE OTIMIZA√á√ÉO:")
    print(f"   üß† Mem√≥ria: {system_optimizer.memory_threshold}%")
    print(f"   üíæ Disco: {system_optimizer.disk_threshold}%")
    print(f"   üèÉ CPU: {system_optimizer.cpu_threshold}%")
    
    print("\nüìä OTIMIZA√á√ïES AUTOM√ÅTICAS:")
    otimizacoes = [
        "Garbage collection Python",
        "Limpeza de caches internos",
        "Remo√ß√£o de arquivos tempor√°rios",
        "Limpeza de logs antigos",
        "Remo√ß√£o de cache expirado",
        "Limpeza de uploads √≥rf√£os",
        "VACUUM em banco SQLite",
        "An√°lise de uso de processos"
    ]
    
    for otim in otimizacoes:
        print(f"   üîß {otim}")
    
    print("\nüéØ USO RECOMENDADO:")
    print("   1. ‚úÖ Sistema j√° est√° otimizado automaticamente")
    print("   2. üîÑ Executa a cada 5 minutos se necess√°rio")
    print("   3. üö® Ativa automaticamente em alta utiliza√ß√£o")
    print("   4. üìà Monitora estat√≠sticas continuamente")
    
    print("\n" + "="*80)

if __name__ == "__main__":
    demonstrate_system_optimizer() 