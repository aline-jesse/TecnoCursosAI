"""
Sistema completo de notifica√ß√µes para TecnoCursos AI
Inclui emails, WebSocket em tempo real, alertas do sistema e templates customizados
"""

import asyncio
import json
import smtplib
import ssl
from datetime import datetime, timedelta
from email.mime.text import MimeText
from email.mime.multipart import MimeMultipart
from email.mime.base import MimeBase
from email import encoders
from pathlib import Path
from typing import Dict, List, Optional, Any, Union
from dataclasses import dataclass, asdict
from enum import Enum
import jinja2
import aioredis
import websockets
from sqlalchemy.orm import Session

from app.config import get_settings
from app.logger import get_logger, log_business_event, log_performance_metric
from app.database import get_db
from app.models import User, FileUpload, Project

settings = get_settings()
logger = get_logger("notification_service")

class NotificationType(Enum):
    """Tipos de notifica√ß√£o"""
    INFO = "info"
    SUCCESS = "success"
    WARNING = "warning"
    ERROR = "error"
    UPLOAD_COMPLETE = "upload_complete"
    PROCESSING_COMPLETE = "processing_complete"
    PROCESSING_ERROR = "processing_error"
    SYSTEM_ALERT = "system_alert"
    SECURITY_ALERT = "security_alert"
    QUOTA_WARNING = "quota_warning"
    WELCOME = "welcome"

class NotificationChannel(Enum):
    """Canais de notifica√ß√£o"""
    EMAIL = "email"
    WEBSOCKET = "websocket"
    DATABASE = "database"
    PUSH = "push"
    SMS = "sms"

@dataclass
class NotificationTemplate:
    """Template de notifica√ß√£o"""
    subject: str
    html_template: str
    text_template: str
    variables: Dict[str, Any]

@dataclass
class Notification:
    """Estrutura de notifica√ß√£o"""
    id: str
    user_id: int
    type: NotificationType
    channel: NotificationChannel
    title: str
    message: str
    data: Optional[Dict[str, Any]] = None
    template: Optional[str] = None
    priority: int = 1  # 1=baixa, 2=m√©dia, 3=alta, 4=cr√≠tica
    retry_count: int = 0
    max_retries: int = 3
    created_at: datetime = None
    sent_at: Optional[datetime] = None
    read_at: Optional[datetime] = None
    expires_at: Optional[datetime] = None

    def __post_init__(self):
        if self.created_at is None:
            self.created_at = datetime.now()
        if self.expires_at is None:
            self.expires_at = self.created_at + timedelta(days=30)

class NotificationService:
    """Servi√ßo principal de notifica√ß√µes"""
    
    def __init__(self):
        self.templates_dir = Path("templates/notifications")
        self.templates_dir.mkdir(parents=True, exist_ok=True)
        self.jinja_env = jinja2.Environment(
            loader=jinja2.FileSystemLoader(str(self.templates_dir)),
            autoescape=jinja2.select_autoescape(['html', 'xml'])
        )
        
        # WebSocket connections
        self.websocket_connections: Dict[int, set] = {}
        
        # Queue de notifica√ß√µes
        self.notification_queue = asyncio.Queue()
        
        # Redis para cache e pub/sub
        self.redis = None
        
        # Workers de processamento
        self.workers_running = False
        
        # Statistics
        self.stats = {
            'total_sent': 0,
            'email_sent': 0,
            'websocket_sent': 0,
            'failed_deliveries': 0,
            'retry_count': 0
        }
    
    async def initialize(self):
        """Inicializar servi√ßo"""
        try:
            # Conectar ao Redis se dispon√≠vel
            try:
                self.redis = await aioredis.from_url("redis://localhost:6379")
                logger.info("Conectado ao Redis para notifica√ß√µes")
            except Exception as e:
                logger.warning(f"Redis n√£o dispon√≠vel: {e}")
            
            # Criar templates padr√£o
            await self.create_default_templates()
            
            # Iniciar workers
            await self.start_workers()
            
            logger.info("Servi√ßo de notifica√ß√µes inicializado")
            
        except Exception as e:
            logger.error(f"Erro ao inicializar servi√ßo de notifica√ß√µes: {e}")
    
    async def create_default_templates(self):
        """Criar templates padr√£o"""
        templates = {
            "welcome.html": """
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Bem-vindo ao TecnoCursos AI</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
        .content { background: white; padding: 30px; border: 1px solid #ddd; }
        .footer { background: #f8f9fa; padding: 20px; text-align: center; border-radius: 0 0 10px 10px; font-size: 12px; color: #666; }
        .button { display: inline-block; background: #667eea; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }
        .stats { background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöÄ Bem-vindo ao TecnoCursos AI!</h1>
        </div>
        <div class="content">
            <h2>Ol√°, {{ user_name }}!</h2>
            <p>Ficamos felizes em t√™-lo conosco. Sua conta foi criada com sucesso e voc√™ j√° pode come√ßar a usar nossa plataforma.</p>
            
            <h3>O que voc√™ pode fazer:</h3>
            <ul>
                <li>üìÅ Fazer upload de arquivos PDF, PowerPoint e Word</li>
                <li>üîç Buscar conte√∫do dentro dos seus documentos</li>
                <li>üìä Visualizar estat√≠sticas dos seus arquivos</li>
                <li>‚ö° Processamento autom√°tico com IA</li>
            </ul>
            
            <div class="stats">
                <strong>Limites da sua conta:</strong><br>
                ‚Ä¢ M√°ximo de {{ max_files }} arquivos<br>
                ‚Ä¢ At√© {{ max_storage }} de armazenamento<br>
                ‚Ä¢ {{ max_uploads_per_day }} uploads por dia
            </div>
            
            <a href="{{ dashboard_url }}" class="button">Acessar Dashboard</a>
        </div>
        <div class="footer">
            <p>TecnoCursos AI - Processamento Inteligente de Documentos</p>
            <p>Se voc√™ n√£o criou esta conta, ignore este email.</p>
        </div>
    </div>
</body>
</html>""",

            "upload_complete.html": """
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Upload Conclu√≠do</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background: #27ae60; color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0; }
        .content { background: white; padding: 30px; border: 1px solid #ddd; }
        .footer { background: #f8f9fa; padding: 15px; text-align: center; border-radius: 0 0 10px 10px; font-size: 12px; color: #666; }
        .file-info { background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 15px 0; }
        .success { color: #27ae60; font-weight: bold; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>‚úÖ Upload Conclu√≠do!</h1>
        </div>
        <div class="content">
            <p>Ol√°, {{ user_name }}!</p>
            <p class="success">Seu arquivo foi enviado com sucesso!</p>
            
            <div class="file-info">
                <strong>Detalhes do arquivo:</strong><br>
                ‚Ä¢ Nome: {{ filename }}<br>
                ‚Ä¢ Tamanho: {{ file_size }}<br>
                ‚Ä¢ Tipo: {{ file_type }}<br>
                ‚Ä¢ Projeto: {{ project_name }}<br>
                ‚Ä¢ Data: {{ upload_date }}
            </div>
            
            {% if processing_started %}
            <p>üîÑ O processamento autom√°tico foi iniciado. Voc√™ receber√° uma notifica√ß√£o quando estiver conclu√≠do.</p>
            {% endif %}
        </div>
        <div class="footer">
            <p>TecnoCursos AI</p>
        </div>
    </div>
</body>
</html>""",

            "processing_complete.html": """
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Processamento Conclu√≠do</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background: #3498db; color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0; }
        .content { background: white; padding: 30px; border: 1px solid #ddd; }
        .footer { background: #f8f9fa; padding: 15px; text-align: center; border-radius: 0 0 10px 10px; font-size: 12px; color: #666; }
        .stats { background: #e8f4fd; padding: 15px; border-radius: 5px; margin: 15px 0; }
        .button { display: inline-block; background: #3498db; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; margin: 10px 0; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üéâ Processamento Conclu√≠do!</h1>
        </div>
        <div class="content">
            <p>Ol√°, {{ user_name }}!</p>
            <p>O processamento do arquivo <strong>{{ filename }}</strong> foi conclu√≠do com sucesso!</p>
            
            <div class="stats">
                <strong>Resultados do processamento:</strong><br>
                ‚Ä¢ P√°ginas processadas: {{ page_count }}<br>
                ‚Ä¢ Palavras extra√≠das: {{ word_count }}<br>
                ‚Ä¢ Caracteres: {{ character_count }}<br>
                ‚Ä¢ Tempo de processamento: {{ processing_time }}
                {% if thumbnail_created %}
                <br>‚Ä¢ Thumbnail criado ‚úÖ
                {% endif %}
            </div>
            
            <p>Agora voc√™ pode:</p>
            <ul>
                <li>üîç Buscar texto dentro do documento</li>
                <li>üìÑ Visualizar o conte√∫do extra√≠do</li>
                <li>üìä Ver estat√≠sticas detalhadas</li>
            </ul>
            
            <a href="{{ file_url }}" class="button">Ver Arquivo</a>
            <a href="{{ dashboard_url }}" class="button">Ir para Dashboard</a>
        </div>
        <div class="footer">
            <p>TecnoCursos AI</p>
        </div>
    </div>
</body>
</html>""",

            "processing_error.html": """
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Erro no Processamento</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background: #e74c3c; color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0; }
        .content { background: white; padding: 30px; border: 1px solid #ddd; }
        .footer { background: #f8f9fa; padding: 15px; text-align: center; border-radius: 0 0 10px 10px; font-size: 12px; color: #666; }
        .error-info { background: #fdf2f2; padding: 15px; border-left: 4px solid #e74c3c; margin: 15px 0; }
        .button { display: inline-block; background: #e74c3c; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; margin: 10px 0; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>‚ùå Erro no Processamento</h1>
        </div>
        <div class="content">
            <p>Ol√°, {{ user_name }}!</p>
            <p>Infelizmente ocorreu um erro durante o processamento do arquivo <strong>{{ filename }}</strong>.</p>
            
            <div class="error-info">
                <strong>Detalhes do erro:</strong><br>
                {{ error_message }}
            </div>
            
            <p><strong>O que fazer agora:</strong></p>
            <ul>
                <li>Verifique se o arquivo n√£o est√° corrompido</li>
                <li>Tente fazer o upload novamente</li>
                <li>Entre em contato conosco se o problema persistir</li>
            </ul>
            
            <a href="{{ dashboard_url }}" class="button">Voltar ao Dashboard</a>
        </div>
        <div class="footer">
            <p>TecnoCursos AI - Suporte: suporte@tecnocursos.ai</p>
        </div>
    </div>
</body>
</html>""",

            "system_alert.html": """
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Alerta do Sistema</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background: #f39c12; color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0; }
        .content { background: white; padding: 30px; border: 1px solid #ddd; }
        .footer { background: #f8f9fa; padding: 15px; text-align: center; border-radius: 0 0 10px 10px; font-size: 12px; color: #666; }
        .alert-info { background: #fef9e7; padding: 15px; border-left: 4px solid #f39c12; margin: 15px 0; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>‚ö†Ô∏è {{ alert_title }}</h1>
        </div>
        <div class="content">
            <p>Ol√°, {{ user_name }}!</p>
            
            <div class="alert-info">
                <strong>{{ alert_type }}</strong><br>
                {{ alert_message }}
            </div>
            
            {% if action_required %}
            <p><strong>A√ß√£o necess√°ria:</strong></p>
            <p>{{ action_message }}</p>
            {% endif %}
            
            <p><em>Data: {{ alert_date }}</em></p>
        </div>
        <div class="footer">
            <p>TecnoCursos AI</p>
        </div>
    </div>
</body>
</html>"""
        }
        
        # Criar arquivos de template
        for filename, content in templates.items():
            template_path = self.templates_dir / filename
            if not template_path.exists():
                template_path.write_text(content, encoding='utf-8')
                logger.info(f"Template criado: {filename}")
    
    async def start_workers(self):
        """Iniciar workers de processamento"""
        if self.workers_running:
            return
        
        self.workers_running = True
        
        # Worker principal de processamento
        asyncio.create_task(self._notification_worker())
        
        # Worker de limpeza (remover notifica√ß√µes expiradas)
        asyncio.create_task(self._cleanup_worker())
        
        logger.info("Workers de notifica√ß√£o iniciados")
    
    async def _notification_worker(self):
        """Worker principal de processamento de notifica√ß√µes"""
        while self.workers_running:
            try:
                # Processar notifica√ß√£o da queue
                notification = await asyncio.wait_for(
                    self.notification_queue.get(), 
                    timeout=5.0
                )
                
                await self._process_notification(notification)
                
            except asyncio.TimeoutError:
                continue
            except Exception as e:
                logger.error(f"Erro no worker de notifica√ß√µes: {e}")
                await asyncio.sleep(1)
    
    async def _cleanup_worker(self):
        """Worker de limpeza de notifica√ß√µes expiradas"""
        while self.workers_running:
            try:
                # Limpeza a cada hora
                await asyncio.sleep(3600)
                await self._cleanup_expired_notifications()
                
            except Exception as e:
                logger.error(f"Erro no worker de limpeza: {e}")
    
    async def _process_notification(self, notification: Notification):
        """Processar uma notifica√ß√£o"""
        try:
            success = False
            
            if notification.channel == NotificationChannel.EMAIL:
                success = await self._send_email(notification)
            elif notification.channel == NotificationChannel.WEBSOCKET:
                success = await self._send_websocket(notification)
            elif notification.channel == NotificationChannel.DATABASE:
                success = await self._save_to_database(notification)
            
            if success:
                notification.sent_at = datetime.now()
                self.stats['total_sent'] += 1
                
                if notification.channel == NotificationChannel.EMAIL:
                    self.stats['email_sent'] += 1
                elif notification.channel == NotificationChannel.WEBSOCKET:
                    self.stats['websocket_sent'] += 1
                
                log_business_event(
                    "notification_sent",
                    {
                        "notification_id": notification.id,
                        "user_id": notification.user_id,
                        "type": notification.type.value,
                        "channel": notification.channel.value
                    }
                )
            else:
                # Retry logic
                if notification.retry_count < notification.max_retries:
                    notification.retry_count += 1
                    await asyncio.sleep(2 ** notification.retry_count)  # Exponential backoff
                    await self.notification_queue.put(notification)
                    self.stats['retry_count'] += 1
                else:
                    self.stats['failed_deliveries'] += 1
                    logger.error(f"Falha definitiva na entrega da notifica√ß√£o {notification.id}")
                    
        except Exception as e:
            logger.error(f"Erro ao processar notifica√ß√£o {notification.id}: {e}")
    
    async def _send_email(self, notification: Notification) -> bool:
        """Enviar notifica√ß√£o por email"""
        try:
            # Carregar dados do usu√°rio
            with Session(get_db().bind) as db:
                user = db.query(User).filter(User.id == notification.user_id).first()
                if not user or not user.email:
                    logger.warning(f"Usu√°rio {notification.user_id} n√£o encontrado ou sem email")
                    return False
            
            # Preparar dados do template
            template_data = {
                'user_name': user.name or user.email.split('@')[0],
                'user_email': user.email,
                **notification.data or {}
            }
            
            # Renderizar template se especificado
            if notification.template:
                try:
                    template = self.jinja_env.get_template(notification.template)
                    html_content = template.render(**template_data)
                    subject = notification.title
                except Exception as e:
                    logger.error(f"Erro ao renderizar template {notification.template}: {e}")
                    html_content = notification.message
                    subject = notification.title
            else:
                html_content = notification.message
                subject = notification.title
            
            # Criar mensagem
            msg = MimeMultipart('alternative')
            msg['Subject'] = subject
            msg['From'] = settings.email_from
            msg['To'] = user.email
            
            # Adicionar conte√∫do
            text_part = MimeText(notification.message, 'plain', 'utf-8')
            html_part = MimeText(html_content, 'html', 'utf-8')
            
            msg.attach(text_part)
            msg.attach(html_part)
            
            # Enviar email
            if hasattr(settings, 'smtp_server') and settings.smtp_server:
                context = ssl.create_default_context()
                with smtplib.SMTP(settings.smtp_server, settings.smtp_port) as server:
                    if settings.smtp_use_tls:
                        server.starttls(context=context)
                    if settings.smtp_username:
                        server.login(settings.smtp_username, settings.smtp_password)
                    
                    server.send_message(msg)
                    
                logger.info(f"Email enviado para {user.email}")
                return True
            else:
                # Log do email para desenvolvimento
                logger.info(f"Email simulado para {user.email}: {subject}")
                return True
                
        except Exception as e:
            logger.error(f"Erro ao enviar email: {e}")
            return False
    
    async def _send_websocket(self, notification: Notification) -> bool:
        """Enviar notifica√ß√£o via WebSocket"""
        try:
            user_connections = self.websocket_connections.get(notification.user_id, set())
            
            if not user_connections:
                logger.debug(f"Usu√°rio {notification.user_id} n√£o possui conex√µes WebSocket ativas")
                return True  # N√£o √© erro, usu√°rio apenas n√£o est√° online
            
            message = {
                'id': notification.id,
                'type': notification.type.value,
                'title': notification.title,
                'message': notification.message,
                'data': notification.data or {},
                'priority': notification.priority,
                'timestamp': notification.created_at.isoformat()
            }
            
            message_json = json.dumps(message)
            
            # Enviar para todas as conex√µes do usu√°rio
            disconnected = set()
            for ws in user_connections:
                try:
                    await ws.send(message_json)
                except websockets.exceptions.ConnectionClosed:
                    disconnected.add(ws)
                except Exception as e:
                    logger.error(f"Erro ao enviar WebSocket: {e}")
                    disconnected.add(ws)
            
            # Remover conex√µes desconectadas
            user_connections -= disconnected
            
            if not user_connections:
                del self.websocket_connections[notification.user_id]
            
            logger.debug(f"Notifica√ß√£o WebSocket enviada para usu√°rio {notification.user_id}")
            return True
            
        except Exception as e:
            logger.error(f"Erro ao enviar notifica√ß√£o WebSocket: {e}")
            return False
    
    async def _save_to_database(self, notification: Notification) -> bool:
        """Salvar notifica√ß√£o no banco de dados"""
        try:
            # TODO: Implementar tabela de notifica√ß√µes
            # Por enquanto, apenas log
            logger.info(f"Notifica√ß√£o salva no DB: {notification.id}")
            return True
            
        except Exception as e:
            logger.error(f"Erro ao salvar notifica√ß√£o no DB: {e}")
            return False
    
    async def _cleanup_expired_notifications(self):
        """Limpar notifica√ß√µes expiradas"""
        try:
            # TODO: Implementar limpeza no banco de dados
            logger.info("Limpeza de notifica√ß√µes expiradas executada")
            
        except Exception as e:
            logger.error(f"Erro na limpeza de notifica√ß√µes: {e}")
    
    # M√©todos p√∫blicos de envio
    
    async def send_notification(
        self, 
        user_id: int,
        notification_type: NotificationType,
        channel: NotificationChannel,
        title: str,
        message: str,
        data: Optional[Dict[str, Any]] = None,
        template: Optional[str] = None,
        priority: int = 1
    ) -> str:
        """Enviar notifica√ß√£o"""
        notification_id = f"notif_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{user_id}_{notification_type.value}"
        
        notification = Notification(
            id=notification_id,
            user_id=user_id,
            type=notification_type,
            channel=channel,
            title=title,
            message=message,
            data=data,
            template=template,
            priority=priority
        )
        
        await self.notification_queue.put(notification)
        
        logger.info(f"Notifica√ß√£o enfileirada: {notification_id}")
        return notification_id
    
    async def send_welcome_notification(self, user_id: int, user_data: Dict[str, Any]):
        """Enviar notifica√ß√£o de boas-vindas"""
        await self.send_notification(
            user_id=user_id,
            notification_type=NotificationType.WELCOME,
            channel=NotificationChannel.EMAIL,
            title="Bem-vindo ao TecnoCursos AI!",
            message="Sua conta foi criada com sucesso.",
            data={
                **user_data,
                'max_files': 1000,
                'max_storage': '10GB',
                'max_uploads_per_day': 50,
                'dashboard_url': f"{settings.base_url}/dashboard"
            },
            template="welcome.html",
            priority=2
        )
    
    async def send_upload_complete(self, user_id: int, file_data: Dict[str, Any]):
        """Notificar upload conclu√≠do"""
        # Email
        await self.send_notification(
            user_id=user_id,
            notification_type=NotificationType.UPLOAD_COMPLETE,
            channel=NotificationChannel.EMAIL,
            title="Upload conclu√≠do com sucesso",
            message=f"O arquivo {file_data.get('filename')} foi enviado com sucesso.",
            data=file_data,
            template="upload_complete.html",
            priority=1
        )
        
        # WebSocket para atualiza√ß√£o em tempo real
        await self.send_notification(
            user_id=user_id,
            notification_type=NotificationType.UPLOAD_COMPLETE,
            channel=NotificationChannel.WEBSOCKET,
            title="Upload conclu√≠do",
            message=f"Arquivo {file_data.get('filename')} enviado com sucesso",
            data=file_data,
            priority=2
        )
    
    async def send_processing_complete(self, user_id: int, file_data: Dict[str, Any]):
        """Notificar processamento conclu√≠do"""
        await self.send_notification(
            user_id=user_id,
            notification_type=NotificationType.PROCESSING_COMPLETE,
            channel=NotificationChannel.EMAIL,
            title="Processamento conclu√≠do",
            message=f"O arquivo {file_data.get('filename')} foi processado com sucesso.",
            data={
                **file_data,
                'file_url': f"{settings.base_url}/files/{file_data.get('file_id')}",
                'dashboard_url': f"{settings.base_url}/dashboard"
            },
            template="processing_complete.html",
            priority=2
        )
        
        # WebSocket
        await self.send_notification(
            user_id=user_id,
            notification_type=NotificationType.PROCESSING_COMPLETE,
            channel=NotificationChannel.WEBSOCKET,
            title="Processamento conclu√≠do",
            message=f"Arquivo {file_data.get('filename')} processado",
            data=file_data,
            priority=3
        )
    
    async def send_processing_error(self, user_id: int, file_data: Dict[str, Any], error: str):
        """Notificar erro no processamento"""
        await self.send_notification(
            user_id=user_id,
            notification_type=NotificationType.PROCESSING_ERROR,
            channel=NotificationChannel.EMAIL,
            title="Erro no processamento",
            message=f"Ocorreu um erro ao processar {file_data.get('filename')}.",
            data={
                **file_data,
                'error_message': error,
                'dashboard_url': f"{settings.base_url}/dashboard"
            },
            template="processing_error.html",
            priority=3
        )
        
        # WebSocket
        await self.send_notification(
            user_id=user_id,
            notification_type=NotificationType.PROCESSING_ERROR,
            channel=NotificationChannel.WEBSOCKET,
            title="Erro no processamento",
            message=f"Erro ao processar {file_data.get('filename')}: {error}",
            data={'error': error, **file_data},
            priority=4
        )
    
    async def send_system_alert(self, user_id: int, alert_data: Dict[str, Any]):
        """Enviar alerta do sistema"""
        await self.send_notification(
            user_id=user_id,
            notification_type=NotificationType.SYSTEM_ALERT,
            channel=NotificationChannel.EMAIL,
            title=alert_data.get('title', 'Alerta do Sistema'),
            message=alert_data.get('message', ''),
            data={
                **alert_data,
                'alert_date': datetime.now().strftime('%d/%m/%Y %H:%M')
            },
            template="system_alert.html",
            priority=alert_data.get('priority', 3)
        )
    
    # WebSocket management
    
    async def add_websocket_connection(self, user_id: int, websocket):
        """Adicionar conex√£o WebSocket"""
        if user_id not in self.websocket_connections:
            self.websocket_connections[user_id] = set()
        
        self.websocket_connections[user_id].add(websocket)
        logger.info(f"Conex√£o WebSocket adicionada para usu√°rio {user_id}")
    
    async def remove_websocket_connection(self, user_id: int, websocket):
        """Remover conex√£o WebSocket"""
        if user_id in self.websocket_connections:
            self.websocket_connections[user_id].discard(websocket)
            
            if not self.websocket_connections[user_id]:
                del self.websocket_connections[user_id]
        
        logger.info(f"Conex√£o WebSocket removida para usu√°rio {user_id}")
    
    def get_stats(self) -> Dict[str, Any]:
        """Obter estat√≠sticas do servi√ßo"""
        return {
            **self.stats,
            'active_websocket_users': len(self.websocket_connections),
            'total_websocket_connections': sum(len(connections) for connections in self.websocket_connections.values()),
            'queue_size': self.notification_queue.qsize()
        }

# Inst√¢ncia global do servi√ßo
notification_service = NotificationService()

# Fun√ß√µes de conveni√™ncia
async def send_welcome_notification(user_id: int, user_data: Dict[str, Any]):
    """Fun√ß√£o de conveni√™ncia para notifica√ß√£o de boas-vindas"""
    await notification_service.send_welcome_notification(user_id, user_data)

async def send_upload_complete(user_id: int, file_data: Dict[str, Any]):
    """Fun√ß√£o de conveni√™ncia para upload conclu√≠do"""
    await notification_service.send_upload_complete(user_id, file_data)

async def send_processing_complete(user_id: int, file_data: Dict[str, Any]):
    """Fun√ß√£o de conveni√™ncia para processamento conclu√≠do"""
    await notification_service.send_processing_complete(user_id, file_data)

async def send_processing_error(user_id: int, file_data: Dict[str, Any], error: str):
    """Fun√ß√£o de conveni√™ncia para erro no processamento"""
    await notification_service.send_processing_error(user_id, file_data, error)

async def send_system_alert(user_id: int, alert_data: Dict[str, Any]):
    """Fun√ß√£o de conveni√™ncia para alerta do sistema"""
    await notification_service.send_system_alert(user_id, alert_data) 