#!/usr/bin/env python3
"""
INICIALIZADOR FINAL - TecnoCursos AI
Inicia backend e frontend automaticamente
"""

import subprocess
import sys
import time
import threading
import webbrowser
import os
from pathlib import Path

def start_backend():
    """Inicia o backend"""
    print("üöÄ Iniciando Backend...")
    
    try:
        # Instalar depend√™ncias se necess√°rio
        subprocess.run([
            sys.executable, "-m", "pip", "install", 
            "fastapi", "uvicorn", "python-multipart"
        ], check=False, capture_output=True)
        
        # Iniciar backend
        process = subprocess.Popen([
            sys.executable, "simple_backend.py"
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        print("‚úÖ Backend iniciado na porta 8000")
        return process
        
    except Exception as e:
        print(f"‚ùå Erro ao iniciar backend: {e}")
        return None

def start_frontend():
    """Inicia o frontend"""
    print("üé® Iniciando Frontend...")
    
    try:
        process = subprocess.Popen([
            sys.executable, "simple_frontend.py"
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        print("‚úÖ Frontend iniciado na porta 3000")
        return process
        
    except Exception as e:
        print(f"‚ùå Erro ao iniciar frontend: {e}")
        return None

def open_browser():
    """Abre o navegador"""
    time.sleep(3)  # Aguardar servi√ßos iniciarem
    
    try:
        print("üåê Abrindo navegador...")
        webbrowser.open("http://localhost:3000")
        time.sleep(1)
        webbrowser.open("http://localhost:8001")
        print("‚úÖ Navegador aberto!")
    except:
        print("‚ÑπÔ∏è Abra manualmente: http://localhost:3000")

def main():
    """Fun√ß√£o principal"""
    print("=" * 60)
    print("üéØ TECNOCURSOS AI - INICIALIZADOR AUTOM√ÅTICO")
    print("=" * 60)
    print()
    
    processes = []
    
    # Iniciar backend
    backend_process = start_backend()
    if backend_process:
        processes.append(("Backend", backend_process))
        time.sleep(2)
    
    # Iniciar frontend
    frontend_process = start_frontend()
    if frontend_process:
        processes.append(("Frontend", frontend_process))
        time.sleep(2)
    
    # Abrir navegador
    threading.Thread(target=open_browser, daemon=True).start()
    
    print()
    print("=" * 60)
    print("üéâ SISTEMA TECNOCURSOS AI INICIADO!")
    print("=" * 60)
    print("üåê Frontend: http://localhost:3000")
    print("‚ö° Backend:  http://localhost:8001")
    print("üìö API Docs: http://localhost:8001/docs")
    print("‚ù§Ô∏è Health:   http://localhost:8001/health")
    print()
    print("üí° Pressione Ctrl+C para parar todos os servi√ßos")
    print("=" * 60)
    
    try:
        # Manter rodando
        while True:
            time.sleep(1)
            
            # Verificar se processos ainda est√£o rodando
            for name, process in processes:
                if process.poll() is not None:
                    print(f"‚ö†Ô∏è {name} parou inesperadamente!")
                    
    except KeyboardInterrupt:
        print("\nüõë Parando todos os servi√ßos...")
        
        for name, process in processes:
            try:
                process.terminate()
                print(f"‚úÖ {name} parado")
            except:
                pass
        
        print("‚úÖ Todos os servi√ßos foram parados!")

if __name__ == "__main__":
    main()
