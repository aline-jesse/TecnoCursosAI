#!/usr/bin/env python3
"""
Exemplo de uso da fun√ß√£o generate_avatar_video com API Hunyuan3D-2.

Este script demonstra como gerar v√≠deos de avatar 3D usando a integra√ß√£o 
com o Hugging Face Space Hunyuan3D-2 da Tencent.

üîó API Externa: https://huggingface.co/spaces/tencent/Hunyuan3D-2

Uso:
    python test_avatar_hunyuan3d.py
"""

import os
import sys
from pathlib import Path

# Adicionar o diret√≥rio da aplica√ß√£o ao path
sys.path.append('app')

from utils import generate_avatar_video

def criar_audio_teste(texto: str, output_path: str) -> bool:
    """
    Cria um arquivo de √°udio de teste usando TTS.
    Em produ√ß√£o, voc√™ usaria o TTSService real.
    
    Args:
        texto (str): Texto para converter em √°udio
        output_path (str): Caminho onde salvar o √°udio
    
    Returns:
        bool: True se √°udio foi criado com sucesso
    """
    try:
        # Simula√ß√£o: criar um arquivo de √°udio vazio para teste
        # Em produ√ß√£o real, voc√™ faria:
        # from services.tts_service import TTSService
        # result = TTSService.generate_audio(texto, output_path)
        
        print(f"üéµ Criando √°udio de teste: {output_path}")
        
        # Verificar se j√° existe
        if os.path.exists(output_path):
            print(f"   ‚úÖ Arquivo j√° existe: {output_path}")
            return True
        
        # Para este exemplo, vamos usar um placeholder
        print("   ‚ö†Ô∏è Para funcionamento completo, instale e configure TTS:")
        print("   pip install gtts pydub")
        print("   ou use: from services.tts_service import TTSService")
        
        # Criar arquivo placeholder (em produ√ß√£o, seria √°udio real)
        os.makedirs(os.path.dirname(output_path) if os.path.dirname(output_path) else '.', exist_ok=True)
        with open(output_path, 'wb') as f:
            f.write(b'\x00' * 1024)  # 1KB de dados placeholder
        
        print(f"   ‚úÖ Arquivo placeholder criado: {output_path}")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erro ao criar √°udio: {e}")
        return False


def demonstrar_avatar_basico():
    """
    Demonstra uso b√°sico da gera√ß√£o de avatar.
    """
    print("=" * 60)
    print("üé≠ TESTE 1: AVATAR B√ÅSICO")
    print("=" * 60)
    
    # Configura√ß√µes do teste
    texto = """
    Ol√°! Bem-vindos ao curso de Python com Intelig√™ncia Artificial.
    Hoje vamos aprender sobre gera√ß√£o de avatares 3D e processamento
    de linguagem natural. Este √© um exemplo pr√°tico de como criar
    apresenta√ß√µes interativas usando modelos de IA avan√ßados.
    """
    
    audio_path = "./temp_audio_basico.mp3"
    video_path = "./output_avatar_basico.mp4"
    
    print(f"üìù Texto: {texto[:100]}...")
    print(f"üéµ √Åudio: {audio_path}")
    print(f"üìπ V√≠deo: {video_path}")
    
    # Criar √°udio de teste
    if not criar_audio_teste(texto, audio_path):
        print("‚ùå Falha ao criar √°udio de teste")
        return
    
    # Gerar avatar
    try:
        print("\nüöÄ Iniciando gera√ß√£o de avatar...")
        
        resultado = generate_avatar_video(
            text=texto.strip(),
            audio_path=audio_path,
            output_path=video_path,
            avatar_style="hunyuan3d",
            quality="medium",
            timeout=180
        )
        
        # Exibir resultado
        print("\nüìä RESULTADO:")
        if resultado['success']:
            print("‚úÖ SUCESSO!")
            print(f"   üìπ V√≠deo: {resultado['video_path']}")
            print(f"   ‚è±Ô∏è Dura√ß√£o: {resultado['duration']:.1f}s")
            print(f"   üíæ Tamanho: {resultado['file_size']/1024/1024:.2f}MB")
            print(f"   üìä Resolu√ß√£o: {resultado['resolution'][0]}x{resultado['resolution'][1]}")
            print(f"   üéØ API: {resultado['api_used']}")
            print(f"   ‚è≥ Tempo total: {resultado['processing_time']:.1f}s")
            print(f"   üìà Qualidade: {resultado['quality_score']:.2f}")
            
        else:
            print("‚ùå FALHA!")
            print(f"   Erro: {resultado['error']}")
            
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico: {e}")
    
    finally:
        # Limpeza
        if os.path.exists(audio_path):
            os.remove(audio_path)
            print(f"üßπ Arquivo tempor√°rio removido: {audio_path}")


def demonstrar_avatar_avancado():
    """
    Demonstra uso avan√ßado com configura√ß√µes personalizadas.
    """
    print("\n" + "=" * 60)
    print("üé≠ TESTE 2: AVATAR AVAN√áADO")
    print("=" * 60)
    
    # Configura√ß√µes avan√ßadas
    texto = """
    Welcome to our advanced AI presentation system. 
    Today we'll explore cutting-edge machine learning models 
    for 3D avatar generation and real-time facial animation.
    This technology represents the future of digital communication.
    """
    
    audio_path = "./temp_audio_avancado.mp3"
    video_path = "./output_avatar_avancado.mp4"
    
    print(f"üìù Texto (EN): {texto[:80]}...")
    print(f"üéµ √Åudio: {audio_path}")
    print(f"üìπ V√≠deo: {video_path}")
    
    # Criar √°udio de teste
    if not criar_audio_teste(texto, audio_path):
        print("‚ùå Falha ao criar √°udio de teste")
        return
    
    # Gerar avatar com configura√ß√µes avan√ßadas
    try:
        print("\nüöÄ Iniciando gera√ß√£o avan√ßada...")
        
        resultado = generate_avatar_video(
            text=texto.strip(),
            audio_path=audio_path,
            output_path=video_path,
            avatar_style="realistic",
            quality="high",
            timeout=300,
            # Par√¢metros adicionais (kwargs)
            background="office_modern",
            emotion="confident",
            pose="presenter",
            lighting="professional"
        )
        
        # Exibir resultado detalhado
        print("\nüìä RESULTADO AVAN√áADO:")
        if resultado['success']:
            print("‚úÖ SUCESSO!")
            print(f"   üìπ V√≠deo: {resultado['video_path']}")
            print(f"   ‚è±Ô∏è Dura√ß√£o: {resultado['duration']:.1f}s")
            print(f"   üíæ Tamanho: {resultado['file_size']/1024/1024:.2f}MB")
            print(f"   üìä Resolu√ß√£o: {resultado['resolution'][0]}x{resultado['resolution'][1]}")
            print(f"   üéØ API: {resultado['api_used']}")
            print(f"   ‚è≥ Tempo total: {resultado['processing_time']:.1f}s")
            
            # M√©tricas detalhadas
            if resultado['queue_time'] > 0:
                print(f"   ‚è∞ Tempo na fila: {resultado['queue_time']:.1f}s")
                print(f"   üîß Tempo gera√ß√£o: {resultado['generation_time']:.1f}s")
                print(f"   ‚¨áÔ∏è Tempo download: {resultado['download_time']:.1f}s")
            
            print(f"   üìà Score qualidade: {resultado['quality_score']:.3f}")
            
            # Metadados
            metadata = resultado.get('metadata', {})
            if metadata:
                print("   üìã Metadados:")
                for key, value in metadata.items():
                    print(f"      {key}: {value}")
            
        else:
            print("‚ùå FALHA!")
            print(f"   Erro: {resultado['error']}")
            
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico: {e}")
    
    finally:
        # Limpeza
        if os.path.exists(audio_path):
            os.remove(audio_path)
            print(f"üßπ Arquivo tempor√°rio removido: {audio_path}")


def demonstrar_configuracoes_multiplas():
    """
    Demonstra diferentes configura√ß√µes de avatar.
    """
    print("\n" + "=" * 60)
    print("üé≠ TESTE 3: CONFIGURA√á√ïES M√öLTIPLAS")
    print("=" * 60)
    
    # Diferentes configura√ß√µes para testar
    configuracoes = [
        {
            "nome": "Avatar Educacional",
            "avatar_style": "hunyuan3d",
            "quality": "medium",
            "background": "classroom",
            "emotion": "friendly"
        },
        {
            "nome": "Avatar Corporativo",
            "avatar_style": "realistic", 
            "quality": "high",
            "background": "office",
            "emotion": "professional"
        },
        {
            "nome": "Avatar Tecnol√≥gico",
            "avatar_style": "hunyuan3d",
            "quality": "ultra",
            "background": "tech_studio",
            "emotion": "enthusiastic"
        }
    ]
    
    texto_base = "Este √© um teste de gera√ß√£o de avatar com diferentes configura√ß√µes visuais."
    
    for i, config in enumerate(configuracoes, 1):
        print(f"\nüß™ Subconfigra√ß√£o {i}: {config['nome']}")
        print(f"   Estilo: {config['avatar_style']}")
        print(f"   Qualidade: {config['quality']}")
        print(f"   Background: {config.get('background', 'default')}")
        print(f"   Emo√ß√£o: {config.get('emotion', 'neutral')}")
        
        # Simular teste r√°pido (sem gerar arquivo real)
        audio_path = f"./temp_config_{i}.mp3"
        video_path = f"./output_config_{i}.mp4"
        
        if criar_audio_teste(texto_base, audio_path):
            try:
                # Para demonstra√ß√£o, usar timeout muito baixo
                resultado = generate_avatar_video(
                    text=texto_base,
                    audio_path=audio_path,
                    output_path=video_path,
                    timeout=5,  # Timeout baixo para demonstra√ß√£o
                    **{k: v for k, v in config.items() if k != 'nome'}
                )
                
                if resultado['success']:
                    print(f"   ‚úÖ Sucesso simulado")
                else:
                    print(f"   ‚ö†Ô∏è Como esperado: {resultado['error'][:50]}...")
                    
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erro esperado: {str(e)[:50]}...")
            
            # Limpeza
            if os.path.exists(audio_path):
                os.remove(audio_path)


def main():
    """
    Fun√ß√£o principal do exemplo.
    """
    print("üé≠ DEMONSTRA√á√ÉO: GERA√á√ÉO DE AVATAR COM HUNYUAN3D-2")
    print("="*70)
    print("üîó API Externa: https://huggingface.co/spaces/tencent/Hunyuan3D-2")
    print("üìù Modelo: Tencent Hunyuan3D-2 (Talking Head Generation)")
    print("="*70)
    
    # Verificar depend√™ncias
    print("\nüîç Verificando depend√™ncias...")
    try:
        import requests
        print("‚úÖ requests dispon√≠vel")
    except ImportError:
        print("‚ùå requests n√£o encontrado - instale: pip install requests")
        return
    
    try:
        from moviepy.editor import VideoFileClip
        print("‚úÖ moviepy dispon√≠vel")
    except ImportError:
        print("‚ö†Ô∏è moviepy n√£o encontrado - instale: pip install moviepy")
    
    try:
        from PIL import Image
        print("‚úÖ PIL dispon√≠vel")
    except ImportError:
        print("‚ö†Ô∏è PIL n√£o encontrado - instale: pip install pillow")
    
    # Executar demonstra√ß√µes
    try:
        demonstrar_avatar_basico()
        demonstrar_avatar_avancado()
        demonstrar_configuracoes_multiplas()
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Demonstra√ß√£o interrompida pelo usu√°rio")
    
    except Exception as e:
        print(f"\n\n‚ùå Erro na demonstra√ß√£o: {e}")
    
    finally:
        print("\n" + "="*70)
        print("üìä RESUMO DA DEMONSTRA√á√ÉO")
        print("="*70)
        print("‚úÖ Fun√ß√£o generate_avatar_video testada")
        print("üîó Integra√ß√£o com Hunyuan3D-2 configurada")
        print("üéØ Funcionalidades principais:")
        print("   ‚Ä¢ Detec√ß√£o autom√°tica de idioma")
        print("   ‚Ä¢ Cache local inteligente")
        print("   ‚Ä¢ Monitoramento de fila com timeout")
        print("   ‚Ä¢ Fallback para simula√ß√£o")
        print("   ‚Ä¢ M√©tricas detalhadas de qualidade")
        print("   ‚Ä¢ Configura√ß√µes avan√ßadas (background, emo√ß√£o)")
        
        print("\nüí° PR√ìXIMOS PASSOS:")
        print("1. Configure o TTS real para gerar √°udios")
        print("2. Teste com a API real do Hunyuan3D-2")
        print("3. Ajuste timeouts conforme necess√°rio")
        print("4. Integre no pipeline de produ√ß√£o")
        
        print("\nüîß CONFIGURA√á√ÉO MANUAL (se API offline):")
        print("1. Acesse: https://huggingface.co/spaces/tencent/Hunyuan3D-2")
        print("2. Fa√ßa upload do arquivo de √°udio")
        print("3. Insira o texto desejado")
        print("4. Configure par√¢metros e aguarde processamento")
        print("5. Baixe o v√≠deo gerado")
        print("="*70)


if __name__ == "__main__":
    main() 